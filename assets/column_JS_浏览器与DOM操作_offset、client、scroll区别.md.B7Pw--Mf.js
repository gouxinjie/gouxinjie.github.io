import{_ as i,C as a,c as n,o as l,j as t,G as d,aQ as r,a as h}from"./chunks/framework.DEi4YP2n.js";const m=JSON.parse('{"title":"offset和client以及scroll之间的区别","description":"","frontmatter":{},"headers":[],"relativePath":"column/JS/浏览器与DOM操作/offset、client、scroll区别.md","filePath":"column/JS/浏览器与DOM操作/offset、client、scroll区别.md","lastUpdated":1757296483000}'),p={name:"column/JS/浏览器与DOM操作/offset、client、scroll区别.md"};function o(k,s,c,E,g,f){const e=a("ArticleMetadata");return l(),n("div",null,[s[0]||(s[0]=t("h1",{id:"offset和client以及scroll之间的区别",tabindex:"-1"},[h("offset和client以及scroll之间的区别 "),t("a",{class:"header-anchor",href:"#offset和client以及scroll之间的区别","aria-label":'Permalink to "offset和client以及scroll之间的区别"'},"​")],-1)),d(e),s[1]||(s[1]=r(`<blockquote><p>offset、client和scroll是 JavaScript 中用于描述元素位置和尺寸的三个概念，它们的具体含义和区别如下：</p></blockquote><hr><p><strong>先说区别：</strong></p><blockquote><p><strong>1，offset指偏移</strong>: 包括这个元素在文档中占用的所有显示宽度，包括滚动条、padding、border，不包括overflow隐藏的部分；</p><p><strong>2，client指元素本身的可视内容</strong>: 不包括overflow被折叠起来的部分，不包括滚动条、border，包括padding；</p><p><strong>3，scroll指滚动</strong>: 包括这个元素没显示出来的实际宽度，包括padding，不包括滚动条、border；</p></blockquote><h2 id="_1-offset" tabindex="-1">1，offset <a class="header-anchor" href="#_1-offset" aria-label="Permalink to &quot;1，offset&quot;">​</a></h2><p>返回的值都是以像素为单位的；</p><p>对块级元素来说，offsetTop、offsetLeft、offsetWidth 及 offsetHeight 描述了元素相对于 offsetParent 的边界框。</p><table tabindex="0"><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>element.offsetHeight</code></td><td>返回该元素的像素高度，高度包含该元素的垂直内边距 (padding)和边框(border)，且是一个整数</td></tr><tr><td><code>element.offsetWidth </code></td><td>返回一个元素的布局宽度，包含元素的边框 (border)、内边距 (padding)、竖直方向滚动条 (scrollbar)（如果存在的话）、以及 CSS 设置的宽度 (width) 的值</td></tr><tr><td><code>element.offsetLeft</code></td><td>返回当前元素左上角相对于 offsetParent 元素的左边界偏移的像素值</td></tr><tr><td><code>element.offsetTop</code></td><td>返回当前元素相对于offsetParent 元素的顶部内边距的距离</td></tr></tbody></table><p><code>offsetParent</code> 是一个只读属性，返回一个指向最近的（指包含层级上的最近）包含该元素的定位元素或者最近的 table, td, th, body 元素。当元素的 style.display 设置为 &quot;none&quot; 时，offsetParent 返回 null。offsetParent 很有用，因为 offsetTop 和 offsetLeft 都是相对于其内边距边界的。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myElement&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> offsetTop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element.offsetTop;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> offsetLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element.offsetLeft;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_2-client" tabindex="-1">2，client <a class="header-anchor" href="#_2-client" aria-label="Permalink to &quot;2，client&quot;">​</a></h2><p>返回的值都是以像素为单位的；</p><table tabindex="0"><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>element.clientHeight</code></td><td>返回该元素内部的高度，包含内边距，但不包括边框（border）、外边距（margin）和水平滚动条（如果存在）</td></tr><tr><td><code>element.clientWidth </code></td><td>返回该元素的布局宽度，包括内边距（padding），但不包括边框（border）、外边距（margin）和垂直滚动条（如果存在）</td></tr><tr><td><code>element.clientLeft</code></td><td>返回一个元素的左边框的宽度。如果元素的文本方向是从右向左（RTL, right-to-left），并且由于内容溢出导致左边出现了一个垂直滚动条，则该属性包括滚动条的宽度</td></tr><tr><td><code>element.clientTop</code></td><td>返回一个元素顶部边框的宽度。不包括顶部外边距或内边距</td></tr></tbody></table><p><strong>注意：</strong> clientHeight 是可以通过 CSS height + CSS padding - 水平滚动条高度（如果存在）来进行计算的； clientLeft 和clientTop都不包括外边距和内边距。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myElement&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element.clientWidth;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element.clientHeight;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_3-scroll" tabindex="-1">3，scroll <a class="header-anchor" href="#_3-scroll" aria-label="Permalink to &quot;3，scroll&quot;">​</a></h2><p>scroll指滚动，包括这个元素没显示出来的实际宽度，包括padding，不包括滚动条、border；</p><table tabindex="0"><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>element.scrollHeight </code></td><td>获取对象的滚动高度，对象的实际高度,包括由于溢出导致的视图中不可见内容</td></tr><tr><td><code>element.scrollWidth </code></td><td>获取对象的滚动宽度,包括由于 overflow 溢出而在屏幕上不可见的内容</td></tr><tr><td><code>element.scrollLeft </code></td><td>可以读取或设置元素滚动条到元素左边的距离</td></tr><tr><td><code>element.scrollTop </code></td><td>可以获取或设置一个元素的内容垂直滚动的距离</td></tr></tbody></table><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myElement&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scrollTop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element.scrollTop;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scrollLeft </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element.scrollLeft;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>回到顶部：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrollTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,21))])}const y=i(p,[["render",o]]);export{m as __pageData,y as default};
