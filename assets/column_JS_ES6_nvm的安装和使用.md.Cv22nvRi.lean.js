import{_ as n,c as a,aQ as e,o as p}from"./chunks/framework.Dx7Rg_PH.js";const i="/assets/nvm.DRGYlie7.png",l="/assets/nvm-1.byd2kpT4.png",t="/assets/nvm-2.Db_xI4ms.png",r="/assets/nvm-3.3ea9iwTq.png",o="/assets/nvm-4.2klIhpdC.png",_=JSON.parse('{"title":"nvm 的安装和使用","description":"","frontmatter":{},"headers":[],"relativePath":"column/JS/ES6/nvm的安装和使用.md","filePath":"column/JS/ES6/nvm的安装和使用.md"}'),d={name:"column/JS/ES6/nvm的安装和使用.md"};function c(m,s,u,b,v,h){return p(),a("div",null,s[0]||(s[0]=[e('<h1 id="nvm-的安装和使用" tabindex="-1">nvm 的安装和使用 <a class="header-anchor" href="#nvm-的安装和使用" aria-label="Permalink to &quot;nvm 的安装和使用&quot;">​</a></h1><p><img src="'+i+`" alt="在这里插入图片描述"></p><h2 id="_1、介绍" tabindex="-1">1、介绍 <a class="header-anchor" href="#_1、介绍" aria-label="Permalink to &quot;1、介绍&quot;">​</a></h2><blockquote><p>nvm 全名<code>node.js version management</code> 它是一个 nodejs 的版本管理工具；通过它可以安装和切换不同版本的 nodejs；</p></blockquote><p>管理不同的 node 版本在日常开发中也是很方便的；比如 vue3 的项目对 node.js 版本需求比较高 15.0+；这样我们同时开发 vue2 和 vue3 项目时，我们使用 nvm 可以随时切换 node 的版本进行开发；</p><p>启动 vue3 项目如果出现下面这两行报错时，说明你的 node 版本过低：</p><div class="language-clike vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">clike</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>error when starting dev server:</span></span>
<span class="line"><span>Error: Cannot find module &#39;node:url&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_2、安装-nvm" tabindex="-1">2、安装 nvm <a class="header-anchor" href="#_2、安装-nvm" aria-label="Permalink to &quot;2、安装 nvm&quot;">​</a></h2><p><strong>1，安装包下载地址</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://github.com/coreybutler/nvm-windows/releases/download/1.1.9/nvm-setup.zip</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>2，解压然后双击安装</strong> <img src="`+l+'" alt="在这里插入图片描述"></p><p><strong>3，等待安装...</strong></p><p><strong>4，安装完成后 在 cmd 命令窗口输入 <code>nvm -v / nvm -V / nvm -version</code></strong></p><p>出现版本号说明安装成功；</p><p><img src="'+t+'" alt="在这里插入图片描述"></p><h2 id="_3、常用命令" tabindex="-1">3、常用命令 <a class="header-anchor" href="#_3、常用命令" aria-label="Permalink to &quot;3、常用命令&quot;">​</a></h2><p><strong>1，查看目前使用的版本</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nvm ls</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+r+'" alt="在这里插入图片描述"></p><p><strong>2，查看 node 的目前的所有版本</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> nvm list available</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+o+`" alt="在这里插入图片描述"></p><p><strong>3，下载需要的 node 版本</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nvm install 16.16.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>4，切换版本</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> nvm use 16.16.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>5，其他常用命令</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nvm install latest：安装最新稳定版node.js</span></span>
<span class="line"><span>nvm install [version]：安装指定版本node.js</span></span>
<span class="line"><span>nvm use [version]：使用某个版本node.js</span></span>
<span class="line"><span>nvm list：列出当前安装的node.js版本列表</span></span>
<span class="line"><span></span></span>
<span class="line"><span>nvm uninstall [version]：卸载指定版本的node.js</span></span>
<span class="line"><span>卸载一个版本后用 nvm list命令查看竟然还可以查出来； 就是使用不了 （也不知道是不是bug）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>nvm node_mirror [url]：配置nvm的镜像</span></span>
<span class="line"><span>nvm npm_mirror [url]：配置npm的镜像</span></span>
<span class="line"><span>nvm arch：显示node是运行在32位还是64位。</span></span>
<span class="line"><span>nvm on：开启node.js版本管理</span></span>
<span class="line"><span>nvm off：关闭node.js版本管理</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,28)]))}const k=n(d,[["render",c]]);export{_ as __pageData,k as default};
