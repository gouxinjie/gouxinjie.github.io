import{_ as e,C as p,c as t,o as n,j as a,G as l,aQ as o,a as r}from"./chunks/framework.DEi4YP2n.js";const d="/assets/opt-1.DmppU2E5.png",h="/assets/opt-2.B4A0Wjcb.png",c="/assets/opt-5.DINLSh-8.png",k="/assets/opt-6.Bbtxvw7S.png",m="/assets/opt-7.BYWKbDQ3.png",u="/assets/opt-8.BXo12PTZ.png",g="/assets/opt-9.DWF_42s9.png",E="/assets/opt-3.Cjehwn9Q.png",b="/assets/opt-4.m6kE21oC.png",x=JSON.parse('{"title":"vite 的依赖预构建讲解","description":"","frontmatter":{},"headers":[],"relativePath":"column/Vue/Vite相关/依赖预构建.md","filePath":"column/Vue/Vite相关/依赖预构建.md","lastUpdated":1759201926000}'),v={name:"column/Vue/Vite相关/依赖预构建.md"};function y(_,s,f,F,j,D){const i=p("ArticleMetadata");return n(),t("div",null,[s[0]||(s[0]=a("h1",{id:"vite-的依赖预构建讲解",tabindex:"-1"},[r("vite 的依赖预构建讲解 "),a("a",{class:"header-anchor",href:"#vite-的依赖预构建讲解","aria-label":'Permalink to "vite 的依赖预构建讲解"'},"​")],-1)),l(i),s[1]||(s[1]=o('<nav class="table-of-contents"><ul><li><a href="#一、依赖预构建过程">一、依赖预构建过程</a></li><li><a href="#二、什么是预构建">二、什么是预构建</a></li><li><a href="#三、为什么要预构建依赖">三、为什么要预构建依赖？</a><ul><li><a href="#_1、第一点-模块兼容性-都转为-esm-模块">1、第一点：模块兼容性- 都转为 ESM 模块</a></li><li><a href="#_2、第二点-性能-减少-http-请求次数">2、第二点：性能- 减少 HTTP 请求次数</a></li></ul></li><li><a href="#四、依赖缓存机制">四、依赖缓存机制</a></li><li><a href="#五、自定义一些库是否进行预构建">五、自定义一些库是否进行预构建</a></li></ul></nav><h2 id="一、依赖预构建过程" tabindex="-1">一、依赖预构建过程 <a class="header-anchor" href="#一、依赖预构建过程" aria-label="Permalink to &quot;一、依赖预构建过程&quot;">​</a></h2><p>简单来说，所谓依赖预构建指的是在 DevServer 启动之前，Vite 会扫描使用到的依赖从而进行构建，之后在代码中每次导入(import)时会动态地加载构建过的依赖这一过程。</p><p>Vite 在一开始将应用中的模块区分为 <code>依赖</code> 和 <code>源码</code> 两类：</p><p><strong>1, 依赖部分</strong></p><p>更多指的是代码中使用到的第三方模块，比如<code> vue、lodash、react</code> 等。 Vite 将会使用 esbuild 在应用启动时对于依赖部分进行预构建依赖。</p><p><strong>2, 源码部分</strong></p><p>比如说平常我们书写的一个一个 <code>js、jsx、vue </code>等文件，这部分代码会在运行时被编译，并不会进行任何打包。</p><p>Vite 以 原生 ESM 方式提供源码。这实际上是让浏览器接管了打包程序的部分工作。Vite 只需要在浏览器请求源码时进行转换并按需提供源码。根据情景动态导入代码，即只在当前屏幕上实际使用时才会被处理。</p><h2 id="二、什么是预构建" tabindex="-1">二、什么是预构建 <a class="header-anchor" href="#二、什么是预构建" aria-label="Permalink to &quot;二、什么是预构建&quot;">​</a></h2><p>我们在使用 vite 启动项目时，node_modules 目录下会额外增加一个<code> /node_modules/.vite/deps/</code>的目录：</p><p><img src="'+d+'" alt="" loading="lazy"></p><p>这个目录就是 vite 在开发环境下预编译的产物。</p><p>项目中的依赖部分： vue、element-plus、axios 等部分会被预编译成为一个一个 <code>.js</code> 文件。</p><p>同时，.vite/deps 目录下还会存在一个 <code>_metadata.json</code>： <img src="'+h+'" alt="" loading="lazy"></p><p><code>_metadata.json </code>文件是 Vite 在开发模式下生成的一个重要元数据文件，用于优化模块解析、转换和热更新的性能。它存储了项目依赖模块的元数据信息，帮助 Vite 更高效地处理模块依赖关系。</p><p>依赖预构建的过程简单来说就是生成 <code>/node_modules/.vite/deps/</code> 等依赖文件。</p><h2 id="三、为什么要预构建依赖" tabindex="-1">三、为什么要预构建依赖？ <a class="header-anchor" href="#三、为什么要预构建依赖" aria-label="Permalink to &quot;三、为什么要预构建依赖？&quot;">​</a></h2><h3 id="_1、第一点-模块兼容性-都转为-esm-模块" tabindex="-1">1、第一点：模块兼容性- 都转为 ESM 模块 <a class="header-anchor" href="#_1、第一点-模块兼容性-都转为-esm-模块" aria-label="Permalink to &quot;1、第一点：模块兼容性- 都转为 ESM 模块&quot;">​</a></h3><p>我们都清楚 Vite 是基于浏览器 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noreferrer">Esmodule</a> 进行模块加载的方式。</p><p>在组件中直接使用 <code>require</code> 引入第三方库，此时浏览器中会直接报错；如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;const _ = require(&#39;lodash&#39;);&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+c+'" alt="" loading="lazy"></p><p>那么，对于一些非 ESM 模块规范的第三方库，比如 loadsh.js。在开发阶段，vite 的预构建会直接把 lodash-es 转换为 esm 模块。从而在浏览器中进行 import 这部分模块时也可以正确识别。</p><p>下面是一个引入 loadsh.js 的例子：</p><p><img src="'+k+'" alt="" loading="lazy"></p><p>从图中可以看出，当浏览器去请求 loadsh.js 时，此时 loadsh.js 的来源是从<code>/node_modules/.vite/deps/</code>目录里面加载进来的。</p><p>说明预构建阶段已经把 Commonjs 模块转换为 ESM 模块并放入到<code>/node_modules/.vite/deps/</code>里面了。</p><p>最终通过<code>export default </code> 把 <code>lodash</code> 导出(见下图)。</p><p><img src="'+m+`" alt="" loading="lazy"></p><p>这样，我们就能在组件中正确 <code>import</code> lodash 库了。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import { defaultsDeep } from &#39;lodash&#39;; /**按需引入*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.log(&quot;defaultsDeep:&quot;,defaultsDeep);//  成功打印了 defaultsDeep 函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2、第二点-性能-减少-http-请求次数" tabindex="-1">2、第二点：性能- 减少 HTTP 请求次数 <a class="header-anchor" href="#_2、第二点-性能-减少-http-请求次数" aria-label="Permalink to &quot;2、第二点：性能- 减少 HTTP 请求次数&quot;">​</a></h3><p>同样是由于 Vite 是基于 Esmodule 这一特性。在浏览器中每一次 import 都会发送一次请求，部分第三方依赖包中可能会存在许多个文件的拆分从而导致发起多次 import 请求。</p><p>比如 lodash-es 中存在超过 600 个内置模块，当我们执行 import { debounce } from &#39;lodash&#39; 时，如果不进行预构建浏览器会同时发出 600 多个 HTTP 请求，这无疑会让页面加载变得明显缓慢。</p><p>正式通过依赖预构建，将 lodash-es 预构建成为单个模块后仅需要一个 HTTP 请求就可以解决上述的问题。</p><p><strong>总结</strong></p><p>基于上述两点，Vite 中正是为了<code>模块兼容性</code>以及<code>性能</code>这两方面大的原因，所以需要进行依赖预构建。</p><h2 id="四、依赖缓存机制" tabindex="-1">四、依赖缓存机制 <a class="header-anchor" href="#四、依赖缓存机制" aria-label="Permalink to &quot;四、依赖缓存机制&quot;">​</a></h2><p><strong>1. 文件系统缓存</strong></p><p>Vite 会将预构建的依赖缓存到 node_modules/.vite。它根据几个源来决定是否需要重新运行预构建步骤:</p><p>1.package.json 中的 dependencies 列表</p><p>2.包管理器的 lockfile，例如 package-lock.json, yarn.lock，或者 pnpm-lock.yaml</p><p>3.可能在 vite.config.js 相关字段中配置过的</p><p>只有在上述其中一项发生更改时，vite会自动重新运行预构建。</p><p><strong>举例：</strong></p><p>我现在使用的 element-plus 2.70版本库，我重新 <code>npm i element-plus@2.8.4</code>了,把element-plus更新了一个版本。</p><p>此时，不需要重新启动项目，Vite 会自动重新构建依赖。如下图所示： <img src="`+u+'" alt="" loading="lazy"></p><div class="tip custom-block"><p class="custom-block-title">强制 Vite 重新构建依赖</p><p>如果出于某些原因，你想要强制 Vite 重新构建依赖，你可以用 --force 命令行选项启动开发服务器，或者手动删除 node_modules/.vite 目录。</p><p>--force命令</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm run dev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">force</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div><p><strong>2. 浏览器缓存</strong></p><p>解析后的依赖请求会以 HTTP 头<code> max-age=31536000,immutable</code> 强缓存，以提高在开发时的页面重载性能。一旦被缓存，这些请求将永远不会再到达开发服务器。</p><div class="tip custom-block"><p class="custom-block-title">强缓存说明</p><p>Cache-Control: max-age=31536000, immutable 是一个 HTTP 头部字段，用于控制缓存行为。具体含义如下：</p><p>max-age=31536000：指定了资源的最大缓存时间为 31,536,000 秒（即 1 年）。在这个时间段内，客户端可以直接使用缓存的副本，而不需要向服务器发起请求。</p><p>immutable：指示资源在指定的缓存时间内不会改变。这意味着，如果客户端在缓存的有效期内请求该资源，即使服务器的内容更新，客户端也应该使用缓存的版本，而不是重新请求。这有助于提高性能，减少不必要的网络请求。</p></div><p>如下图所示，浏览器会直接从缓存中获取依赖文件： <img src="'+g+'" alt="" loading="lazy"></p><hr><p>如果想通过本地编辑来调试依赖项，可以:</p><p>(1) 通过浏览器调试工具的 <code>Network</code> 选项卡暂时禁用缓存；</p><p><img src="'+E+'" alt="" loading="lazy"></p><p>(2) 重启 <code>Vite dev server</code>，并添加 <code>--force </code>命令以重新构建依赖；</p><p><img src="'+b+`" alt="" loading="lazy"></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm run dev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">force</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3.重新载入页面。</p><h2 id="五、自定义一些库是否进行预构建" tabindex="-1">五、自定义一些库是否进行预构建 <a class="header-anchor" href="#五、自定义一些库是否进行预构建" aria-label="Permalink to &quot;五、自定义一些库是否进行预构建&quot;">​</a></h2><p>默认的依赖项发现为启发式可能并不总是可取的。在你想要显式地从列表中包含/排除依赖项的情况下, 使用 <a href="https://www.vitejs.net/config/#dep-optimization-options" target="_blank" rel="noreferrer">optimizeDeps 配置项</a>。</p><p>在 vite.config.js 中配置 optimizeDeps 字段，可以自定义哪些库不需要进行预构建：</p><p>假设你有一个项目，其中有两个库 lodash 和 axios，不希望它们被预构建。可以这样配置 vite.config.js</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@vitejs/plugin-vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimizeDeps: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    exclude: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lodash&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;axios&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 其他配置项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,66))])}const V=e(v,[["render",y]]);export{x as __pageData,V as default};
