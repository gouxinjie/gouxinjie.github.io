import{_ as s,c as a,aQ as n,o as l}from"./chunks/framework.Dx7Rg_PH.js";const t="/assets/mvvm.Iob_fp-9.png",o="/assets/mvvm-1.BrixnrAQ.png",r="/assets/mvvm-2.BF7LWCBy.png",i="/assets/mvvm-3.DUxu7ImV.webp",h=JSON.parse('{"title":"vue是mvvm模型吗","description":"","frontmatter":{},"headers":[],"relativePath":"column/Vue/Vue2/vue是mvvm模型吗.md","filePath":"column/Vue/Vue2/vue是mvvm模型吗.md"}'),m={name:"column/Vue/Vue2/vue是mvvm模型吗.md"};function p(v,e,c,u,d,V){return l(),a("div",null,e[0]||(e[0]=[n('<h1 id="vue是mvvm模型吗" tabindex="-1">vue是mvvm模型吗 <a class="header-anchor" href="#vue是mvvm模型吗" aria-label="Permalink to &quot;vue是mvvm模型吗&quot;">​</a></h1><h2 id="_1-什么是mvvm模型" tabindex="-1">1.什么是mvvm模型？ <a class="header-anchor" href="#_1-什么是mvvm模型" aria-label="Permalink to &quot;1.什么是mvvm模型？&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">标准的mvvm模型</p><ul><li><strong>M</strong>: Model；既是数据，主要负责业务数据相关；</li><li><strong>V</strong>: View；即是视图，展示给用户看的页面，细分下来就是html+css层；</li><li><strong>VM</strong>: ViewModel；是连接界面View和数据Model桥梁，负责监听M或者V的修改，是实现MVVM双向绑定的核心；</li></ul></div><p>图解见下图：</p><p><img src="'+t+'" alt="在这里插入图片描述"> 我们再看一下使用<code>vue</code>的一个简单示例：</p><h2 id="_2-vue的文件结构" tabindex="-1">2.vue的文件结构 <a class="header-anchor" href="#_2-vue的文件结构" aria-label="Permalink to &quot;2.vue的文件结构&quot;">​</a></h2><p><img src="'+o+`" alt="在这里插入图片描述"></p><p>由上图可知：MVVMM设计模型和Vue的设计会有以下对应关系：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Vue中的data &lt;====&gt;  MVVM模型中Model</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Vue中的template &lt;====&gt;   MVVM模型中View</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Vue中的new Vue实例 &lt;====&gt;   MVVM模型中ViewModel</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>实现mvvm主要包含两个方面：数据变化更新视图，视图变化更新数据</strong></p><p><code>视图变化更新数据</code>： 可以利用v-model指令，也可以用户手动输入监听@input事件来实现，更改数据;</p><p><code>数据变化更新视图</code>：Model变更触发View更新必须通过VewModel (Vue实例),当<code>Object.defineProperty()</code>数据劫持中的<code>set</code>方法触发时会通知render函数进行异步更新视图；</p><p>以上是MVVM的思想。</p><p><strong>当然，</strong> Vue也是按照这样的设计的，但是vue中添加了一个属性<code>ref</code>，通过<code>this.$ref</code>可以直接获取dom节点对象，通过ref直接去操作视图。这一点上，违背了MVVM模型，所以说vue并没有完全遵循MVVM模型。放一张<a href="https://v2.cn.vuejs.org/v2/guide/instance.html" target="_blank" rel="noreferrer">官网的说明图</a>：</p><p><img src="`+r+'" alt="在这里插入图片描述"></p><p><strong>总结：vue并虽然没有完全遵循MVVM模型，但也是属于MVVM模型的</strong></p><p>下面将介绍一下 MMVM 和 MVC 模型的区别：</p><h2 id="扩展-什么是mvc" tabindex="-1">扩展：什么是MVC <a class="header-anchor" href="#扩展-什么是mvc" aria-label="Permalink to &quot;扩展：什么是MVC&quot;">​</a></h2><ul><li>M：model ；模型 数据来源；</li><li>V：view； 视图 主要用来展示前台页面及数据给用户；</li><li>C：controller；控制器 主要用户流程控制 作为中间枢纽 连接V和M 主要做一些流程判断等；</li></ul><p><strong>区别：</strong></p><ul><li>mvvm通过数据驱动视图层的显示而不是节点操作；</li><li>mvc中的view和model是可以直接访问的,造成耦合度较高；</li><li>mvvm真正将页面和数据逻辑分离,将数据绑定放到js实现,解决了mvc中大量的dom操作使得页面渲染速度将降低,加载速度快；</li></ul><p>mvc(Model-View-Controller)是单通信的,必须通过Controller承上启下,mvc和mvvm的区别并不是vm完全取代了c,只是在mvc的基础上增加了vm层,弱化了c的地位,vm主要是抽离c中的业务逻辑,实现逻辑组件的重用是开发效率更高；</p><p><img src="'+i+'" alt="在这里插入图片描述"></p>',23)]))}const g=s(m,[["render",p]]);export{h as __pageData,g as default};
