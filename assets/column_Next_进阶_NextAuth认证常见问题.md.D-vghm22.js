import{_ as n,C as e,c as l,o as t,j as i,G as h,aQ as p,a as k}from"./chunks/framework.DEi4YP2n.js";const r="/assets/next-auth-6.Dk0BxvmN.png",o="/assets/next-auth-7.CwtZBZiu.png",m=JSON.parse('{"title":"NextAuth 认证常见问题","description":"","frontmatter":{},"headers":[],"relativePath":"column/Next/进阶/NextAuth认证常见问题.md","filePath":"column/Next/进阶/NextAuth认证常见问题.md","lastUpdated":1758877920000}'),d={name:"column/Next/进阶/NextAuth认证常见问题.md"};function g(c,s,E,u,y,b){const a=e("ArticleMetadata");return t(),l("div",null,[s[0]||(s[0]=i("h1",{id:"nextauth-认证常见问题",tabindex:"-1"},[k("NextAuth 认证常见问题 "),i("a",{class:"header-anchor",href:"#nextauth-认证常见问题","aria-label":'Permalink to "NextAuth 认证常见问题"'},"​")],-1)),h(a),s[1]||(s[1]=p(`<nav class="table-of-contents"><ul><li><a href="#_1-登录成功后-token-session-的生成和存储">1. 登录成功后，token/session 的生成和存储</a><ul><li><a href="#_1-1-生成过程">1.1 生成过程</a></li><li><a href="#_1-2-存放位置">1.2 存放位置</a></li><li><a href="#_1-3-有效期">1.3 有效期</a></li></ul></li><li><a href="#_2-为什么-nextauth-的-token-存在-cookie-而不是-localstorage-sessionstorage">2. 为什么 NextAuth 的 token 存在 Cookie，而不是 localStorage/sessionStorage？</a><ul><li><a href="#_2-1-原因">2.1 原因</a></li><li><a href="#_2-2-可以改吗">2.2 可以改吗？</a></li></ul></li><li><a href="#_3-每次调用业务接口时-都会携带-nextauth-的-token-吗">3. 每次调用业务接口时，都会携带 NextAuth 的 token 吗？</a></li><li><a href="#_4-nextauth-的-token-和日常的-jwt-token-不是重复了吗">4. NextAuth 的 token 和日常的 JWT token，不是重复了吗？</a><ul><li><a href="#_4-1-区别">4.1 区别：</a></li><li><a href="#_4-2-为什么看起来重复">4.2 为什么看起来重复？</a></li></ul></li><li><a href="#🚀-总结">🚀 总结</a></li><li><a href="#_5-nextauth-session-过期-maxage-后怎么办-怎么重新认证">5 NextAuth session 过期（maxAge）后怎么办？怎么重新认证？</a><ul><li><a href="#_5-1-机制">5.1 机制</a></li><li><a href="#_5-2-过期后怎么办">5.2 过期后怎么办？</a></li></ul></li><li><a href="#_6-浏览器上的-cookie-为什么有好几个">6 浏览器上的 Cookie：为什么有好几个？</a><ul><li><a href="#_6-1-🍪-next-auth-session-token">6.1 🍪 next-auth.session-token</a></li><li><a href="#_6-2-🍪-next-auth-csrf-token">6.2 🍪 next-auth.csrf-token</a></li><li><a href="#_6-3-🍪-next-auth-callback-url">6.3 🍪 next-auth.callback-url</a></li></ul></li><li><a href="#_7-nextauth-session-过期处理方案">7 NextAuth Session 过期处理方案</a><ul><li><a href="#_7-1-客户端检测-usesession-hook">7.1 客户端检测（useSession Hook）</a></li><li><a href="#_7-2-服务端检测-getserversession">7.2 服务端检测（getServerSession）</a></li><li><a href="#_7-3-api-接口保护">7.3 API 接口保护</a></li><li><a href="#_7-4-用户体验优化-自动续期">7.4 用户体验优化：自动续期</a></li></ul></li></ul></nav><p><a href="/column/Next/进阶/NextAuth认证.html"><strong>书接上文（NextAuth 认证）</strong></a></p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>这篇文章主要是记录在 <code>Next.js</code>中使用<code>NextAuth</code>认证中常见的问题，利于对<code>NextAuth</code>的深刻理解。<br> 这几个其实都是很多人第一次用 <strong>NextAuth.js</strong> 会困惑的点。</p></div><h2 id="_1-登录成功后-token-session-的生成和存储" tabindex="-1">1. 登录成功后，token/session 的生成和存储 <a class="header-anchor" href="#_1-登录成功后-token-session-的生成和存储" aria-label="Permalink to &quot;1. 登录成功后，token/session 的生成和存储&quot;">​</a></h2><p>登录成功后，token 是通过<code>NextAuth</code>的<code>signIn</code>方法生成的，默认会将 token 存放在<code>cookie</code>中，时间是<code>30</code>天(可配置)。</p><p><code>NextAuth</code> 的工作流程和 <code>JWT</code> 有点不一样，默认是 <strong>基于 Cookie/Session</strong>。</p><h3 id="_1-1-生成过程" tabindex="-1">1.1 生成过程 <a class="header-anchor" href="#_1-1-生成过程" aria-label="Permalink to &quot;1.1 生成过程&quot;">​</a></h3><ul><li><p>用户在 <code>/api/auth/[...nextauth]</code> 用 <code>CredentialsProvider</code> 登录成功后，NextAuth 会生成一个 <strong>Session 对象</strong>：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;alice@example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;expires&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2025-09-26T09:00:00.000Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>同时，它会在 <strong>浏览器 Cookie</strong> 中存储一个 <strong>加密的 session token</strong>，名字是：</p><ul><li><code>next-auth.session-token</code> （生产环境 HTTPS 下）</li><li><code>__Secure-next-auth.session-token</code> （安全模式下）</li></ul></li></ul><h3 id="_1-2-存放位置" tabindex="-1">1.2 存放位置 <a class="header-anchor" href="#_1-2-存放位置" aria-label="Permalink to &quot;1.2 存放位置&quot;">​</a></h3><ul><li>不是 <code>localStorage</code> 或 <code>sessionStorage</code>，而是 <strong>浏览器 Cookie</strong>。</li><li>你可以在浏览器 → 开发者工具 → 应用 (Application) → Cookie → 找到。</li></ul><p><strong>如图：</strong></p><p><img src="`+r+`" alt="next-auth-6.png" loading="lazy"></p><h3 id="_1-3-有效期" tabindex="-1">1.3 有效期 <a class="header-anchor" href="#_1-3-有效期" aria-label="Permalink to &quot;1.3 有效期&quot;">​</a></h3><ul><li>默认 <strong>30 天</strong>，并且每次请求会 <strong>刷新过期时间</strong>。</li><li>你可以在 <code>authOptions.session</code> 里配置：</li></ul><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  strategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jwt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或 &quot;database&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  maxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 7天</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  updateAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 每24小时刷新一次</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><strong>maxAge</strong>: session 过期时间（秒数）</li><li><strong>updateAge</strong>: 访问后多久刷新 Cookie 里的过期时间</li></ul><h2 id="_2-为什么-nextauth-的-token-存在-cookie-而不是-localstorage-sessionstorage" tabindex="-1">2. 为什么 NextAuth 的 token 存在 Cookie，而不是 localStorage/sessionStorage？ <a class="header-anchor" href="#_2-为什么-nextauth-的-token-存在-cookie-而不是-localstorage-sessionstorage" aria-label="Permalink to &quot;2. 为什么 NextAuth 的 token 存在 Cookie，而不是 localStorage/sessionStorage？&quot;">​</a></h2><h3 id="_2-1-原因" tabindex="-1">2.1 原因 <a class="header-anchor" href="#_2-1-原因" aria-label="Permalink to &quot;2.1 原因&quot;">​</a></h3><ul><li><p><strong>安全性</strong></p><ul><li>Cookie 可以设置为 <code>HttpOnly</code>，这样前端 JS 读不到，防止 <strong>XSS 窃取 token</strong>。</li><li>而如果放在 <code>localStorage</code> 或 <code>sessionStorage</code>，只要页面有个 XSS 漏洞，攻击者就能直接拿到 token。</li></ul></li><li><p><strong>自动携带</strong></p><ul><li>Cookie 是浏览器在请求同源接口时自动附带的，不需要你手动在 <code>fetch</code> 或 <code>axios</code> 里加 <code>Authorization</code> header。</li><li>这样就能保证前后端天然对接，不用每个请求都写 token 注入逻辑。</li></ul></li><li><p><strong>跨子域支持</strong></p><ul><li>设置 Cookie 的 <code>domain=.example.com</code> 后，<code>api.example.com</code> 和 <code>app.example.com</code> 都能共享登录状态。</li><li><code>localStorage</code> 只能在同一个域名下共享。</li></ul></li></ul><h3 id="_2-2-可以改吗" tabindex="-1">2.2 可以改吗？ <a class="header-anchor" href="#_2-2-可以改吗" aria-label="Permalink to &quot;2.2 可以改吗？&quot;">​</a></h3><p>理论上可以让 <code>NextAuth</code> 使用 <code>jwt</code> 模式，然后你手动存到 <code>localStorage</code>，但是：</p><ul><li>不推荐（安全性大幅降低，容易被 XSS 攻击）。</li><li><code>NextAuth</code> 的设计初衷就是：<strong>默认用 Cookie 来维护会话 (session)</strong>，尽量减少开发者手工处理。</li></ul><h2 id="_3-每次调用业务接口时-都会携带-nextauth-的-token-吗" tabindex="-1">3. 每次调用业务接口时，都会携带 NextAuth 的 token 吗？ <a class="header-anchor" href="#_3-每次调用业务接口时-都会携带-nextauth-的-token-吗" aria-label="Permalink to &quot;3. 每次调用业务接口时，都会携带 NextAuth 的 token 吗？&quot;">​</a></h2><p>✅ <strong>是的</strong> —— 只要是 <strong>同源请求</strong>（比如 <code>/api/xxx</code>），浏览器会自动在请求头里带上：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Cookie: next-auth.session-token=xxxx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>👉 这就是为什么在 <code>/api/protected/route.ts</code> 里你只需要写：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> session</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getServerSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(authOptions);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>就能直接拿到用户信息，因为 NextAuth 会解密 Cookie，找到对应的 session。</p><p>如果你用的是 <strong>跨域</strong>（比如前端在 <code>http://localhost:3000</code>，API 在 <code>http://localhost:4000</code>），那就要设置：</p><ul><li><code>credentials: &quot;include&quot;</code>（fetch/axios）</li><li>后端允许 <code>Access-Control-Allow-Credentials: true</code></li></ul><h2 id="_4-nextauth-的-token-和日常的-jwt-token-不是重复了吗" tabindex="-1">4. NextAuth 的 token 和日常的 JWT token，不是重复了吗？ <a class="header-anchor" href="#_4-nextauth-的-token-和日常的-jwt-token-不是重复了吗" aria-label="Permalink to &quot;4. NextAuth 的 token 和日常的 JWT token，不是重复了吗？&quot;">​</a></h2><p>这是一个关键点，很多人第一次接触会误会。</p><h3 id="_4-1-区别" tabindex="-1">4.1 区别： <a class="header-anchor" href="#_4-1-区别" aria-label="Permalink to &quot;4.1 区别：&quot;">​</a></h3><ol><li><p><strong>传统 JWT 鉴权</strong>（自己实现时）：</p><ul><li>登录成功 → 后端返回一个 JWT → 前端存 <code>localStorage</code> 或 Cookie。</li><li>前端每次请求时 → 手动在 <code>Authorization: Bearer xxx</code> 里带上 JWT。</li><li>后端校验 JWT → 放行。</li></ul></li><li><p><strong>NextAuth 的 session token</strong>：</p><ul><li>登录成功 → NextAuth 自动生成一个加密的 session token，放在 Cookie。</li><li>前端请求时 → 浏览器自动带 Cookie。</li><li>NextAuth 校验 Cookie → 获取 session。</li></ul></li></ol><h3 id="_4-2-为什么看起来重复" tabindex="-1">4.2 为什么看起来重复？ <a class="header-anchor" href="#_4-2-为什么看起来重复" aria-label="Permalink to &quot;4.2 为什么看起来重复？&quot;">​</a></h3><ul><li><p>如果你只是「前端 + 自己写的后端 API」，那么 <strong>确实用 JWT 就够了</strong>，不需要再套一层。</p></li><li><p>但 NextAuth 的目标是：</p><ul><li>开箱即用，少写逻辑。</li><li>支持多种登录方式（GitHub / Google / Credentials / Email Link / SSO）。</li><li>不用每个地方都手动写 JWT 校验。</li></ul></li></ul><blockquote><p>你可以理解为：</p><ul><li><strong>JWT</strong>：自己写的「低层 API」，灵活但要维护。</li><li><strong>NextAuth</strong>：一个「高层封装」，里面也可能用到 JWT，但主要靠 Cookie 来维护登录态。</li></ul></blockquote><h2 id="🚀-总结" tabindex="-1">🚀 总结 <a class="header-anchor" href="#🚀-总结" aria-label="Permalink to &quot;🚀 总结&quot;">​</a></h2><ol><li><p><strong>为什么存 Cookie</strong></p><ul><li>更安全 (<code>HttpOnly</code>)</li><li>自动携带，不用手动加 token</li><li>支持跨子域共享</li></ul></li><li><p><strong>请求接口时</strong></p><ul><li>浏览器自动带上 <code>next-auth.session-token</code>（同源请求）</li><li>跨域需要 <code>credentials: include</code></li></ul></li><li><p><strong>和 JWT 的关系</strong></p><ul><li><p>不是重复，而是两种思路：</p><ul><li>JWT → 你自己维护 token。</li><li>NextAuth → 代替你管理 session，用 Cookie 保持状态。</li></ul></li><li><p>如果你的项目只需要前后端分离 + JWT，可以不用 NextAuth。</p></li><li><p>如果你需要快速接入多种认证方式，或者不想维护 JWT 刷新逻辑，用 NextAuth 更方便。</p></li></ul></li></ol><h2 id="_5-nextauth-session-过期-maxage-后怎么办-怎么重新认证" tabindex="-1">5 NextAuth session 过期（maxAge）后怎么办？怎么重新认证？ <a class="header-anchor" href="#_5-nextauth-session-过期-maxage-后怎么办-怎么重新认证" aria-label="Permalink to &quot;5 NextAuth session 过期（maxAge）后怎么办？怎么重新认证？&quot;">​</a></h2><h3 id="_5-1-机制" tabindex="-1">5.1 机制 <a class="header-anchor" href="#_5-1-机制" aria-label="Permalink to &quot;5.1 机制&quot;">​</a></h3><ul><li><p>在 <code>authOptions.session</code> 里你可以设置：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  strategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jwt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或 &quot;database&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  maxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一天（秒）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  updateAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 每24小时刷新一次 Cookie</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p><strong>maxAge</strong>：session 最长有效时间（比如 1 天）。</p></li><li><p><strong>updateAge</strong>：用户只要有访问（比如打开页面、调用 API），NextAuth 就会自动刷新 Cookie 的过期时间，延长有效期。</p></li></ul><p>👉 这意味着：</p><ul><li>如果用户<strong>每天至少访问一次</strong>，登录状态会一直保持。</li><li>如果用户<strong>一天都没访问</strong>，session 就会过期。</li></ul><h3 id="_5-2-过期后怎么办" tabindex="-1">5.2 过期后怎么办？ <a class="header-anchor" href="#_5-2-过期后怎么办" aria-label="Permalink to &quot;5.2 过期后怎么办？&quot;">​</a></h3><ol><li><p>如果 session 过期，NextAuth 的 <code>getServerSession</code> 会返回 <code>null</code>。</p></li><li><p>这时你要做的就是：</p><ul><li>页面：<code>redirect(&quot;/auth/signin&quot;)</code> 跳转登录页。</li><li>API：返回 <code>401 Unauthorized</code>，前端捕获后跳转登录页。</li></ul></li></ol><p>换句话说：<strong>过期后就是重新登录</strong>，NextAuth 不会像 OAuth 那样自动刷新 token（除非你用的是 Google/GitHub provider，这种情况下会内置 refresh 逻辑）。</p><p>如果你希望 “自动续期”，可以：</p><ul><li>设置 <code>maxAge</code> 大一点，比如 <code>7 天</code> 或 <code>30 天</code>。</li><li>配合 <code>updateAge</code>，只要用户活跃，就一直续命。</li></ul><p><strong>总结（session 过期怎么办）</strong></p><ul><li><code>maxAge</code> 控制最大有效期，<code>updateAge</code> 控制刷新机制。</li><li>用户活跃 → 自动续命；长时间不访问 → session 过期，必须重新登录。</li></ul><h2 id="_6-浏览器上的-cookie-为什么有好几个" tabindex="-1">6 浏览器上的 Cookie：为什么有好几个？ <a class="header-anchor" href="#_6-浏览器上的-cookie-为什么有好几个" aria-label="Permalink to &quot;6 浏览器上的 Cookie：为什么有好几个？&quot;">​</a></h2><p>NextAuth 会生成 <strong>多个 Cookie</strong>，每个负责不同功能。常见的有：</p><p><img src="`+o+`" alt="next-auth-7.png" loading="lazy"></p><h3 id="_6-1-🍪-next-auth-session-token" tabindex="-1">6.1 🍪 <code>next-auth.session-token</code> <a class="header-anchor" href="#_6-1-🍪-next-auth-session-token" aria-label="Permalink to &quot;6.1 🍪 \`next-auth.session-token\`&quot;">​</a></h3><ul><li>这是最重要的 <strong>登录态 Cookie</strong>。</li><li>存储加密的 session 信息，后端用它识别用户。</li><li>过期时间 = <code>session.maxAge</code>。</li><li>设置了 <code>HttpOnly</code> 和 <code>Secure</code>（生产环境下），JS 不能读。</li></ul><hr><h3 id="_6-2-🍪-next-auth-csrf-token" tabindex="-1">6.2 🍪 <code>next-auth.csrf-token</code> <a class="header-anchor" href="#_6-2-🍪-next-auth-csrf-token" aria-label="Permalink to &quot;6.2 🍪 \`next-auth.csrf-token\`&quot;">​</a></h3><ul><li>用于防止 <strong>CSRF 攻击</strong>（跨站请求伪造）。</li><li>主要在 <strong>登录表单提交</strong>时用。</li><li>存在于浏览器 Cookie，但前端提交时 NextAuth 会对比校验。</li><li>这个 cookie 本身安全性要求没那么高，但仍然有过期时间（一般是 1 天）。</li></ul><hr><h3 id="_6-3-🍪-next-auth-callback-url" tabindex="-1">6.3 🍪 <code>next-auth.callback-url</code> <a class="header-anchor" href="#_6-3-🍪-next-auth-callback-url" aria-label="Permalink to &quot;6.3 🍪 \`next-auth.callback-url\`&quot;">​</a></h3><ul><li>用来保存登录后的回跳地址。</li><li>比如你访问 <code>/dashboard</code>，被重定向到 <code>/auth/signin</code>，登录成功后会自动回到 <code>/dashboard</code>。</li><li>这个 cookie 就是存储 <strong>你原来想去的页面 URL</strong>。</li><li>临时性 cookie，登录完成后基本就没用了。</li></ul><p><strong>总结</strong></p><ul><li><code>next-auth.session-token</code> → 维持登录态</li><li><code>next-auth.csrf-token</code> → 防止 CSRF 攻击</li><li><code>next-auth.callback-url</code> → 保存回跳地址，登录成功后重定向</li></ul><h2 id="_7-nextauth-session-过期处理方案" tabindex="-1">7 NextAuth Session 过期处理方案 <a class="header-anchor" href="#_7-nextauth-session-过期处理方案" aria-label="Permalink to &quot;7 NextAuth Session 过期处理方案&quot;">​</a></h2><p>下面是一份 <strong>NextAuth.js Session 过期后自动检测 + 重定向登录</strong> 的完整方案（包含 <strong>前端客户端检测</strong> 和 <strong>服务端页面保护</strong> 两种方式）。</p><h3 id="_7-1-客户端检测-usesession-hook" tabindex="-1">7.1 客户端检测（useSession Hook） <a class="header-anchor" href="#_7-1-客户端检测-usesession-hook" aria-label="Permalink to &quot;7.1 客户端检测（useSession Hook）&quot;">​</a></h3><p>在前端组件里，可以用 <code>next-auth/react</code> 提供的 <code>useSession()</code>，它会返回：</p><ul><li><code>status: &quot;authenticated&quot; | &quot;unauthenticated&quot; | &quot;loading&quot;</code></li><li><code>data: session | null</code></li></ul><p><strong>示例：高阶组件保护页面</strong></p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;use client&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useSession } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;next-auth/react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useRouter } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;next/navigation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useEffect } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProtectedClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">children</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReactNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;unauthenticated&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/auth/signin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 未登录 → 跳转登录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, [status, router]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;loading&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Loading...&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 页面加载中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;authenticated&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;&gt;{children}&lt;/&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 已登录 → 渲染内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>👉 使用时直接包裹页面内容：</p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ProtectedClient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@/components/ProtectedClient&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DashboardPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ProtectedClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Dashboard&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ProtectedClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><hr><h3 id="_7-2-服务端检测-getserversession" tabindex="-1">7.2 服务端检测（getServerSession） <a class="header-anchor" href="#_7-2-服务端检测-getserversession" aria-label="Permalink to &quot;7.2 服务端检测（getServerSession）&quot;">​</a></h3><p>App Router 下推荐在 <strong>page.tsx</strong> 里用 <code>getServerSession()</code>，这样用户直接请求时就能被拦截。</p><p><strong>示例：保护 Dashboard 页面</strong></p><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getServerSession } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;next-auth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { authOptions } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;../api/auth/[...nextauth]/route&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { redirect } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;next/navigation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DashboardPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> session</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getServerSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(authOptions);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">session) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    redirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/auth/signin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Session 过期 → 重定向登录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Welcome {session.user?.name}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Email: {session.user?.email}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>👉 好处：</p><ul><li><strong>SSR 阶段就能拦截</strong>，未登录用户看不到敏感页面。</li><li>对 SEO 友好，页面不会闪一下再跳转。</li></ul><hr><h3 id="_7-3-api-接口保护" tabindex="-1">7.3 API 接口保护 <a class="header-anchor" href="#_7-3-api-接口保护" aria-label="Permalink to &quot;7.3 API 接口保护&quot;">​</a></h3><p>业务 API 路由里，也要防止过期的 session：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app/api/orders/route.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getServerSession } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;next-auth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { authOptions } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;../auth/[...nextauth]/route&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { NextResponse } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;next/server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> session</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getServerSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(authOptions);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">session) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NextResponse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ error: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Unauthorized&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, { status: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">401</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NextResponse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ orders: [{ id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, item: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Book&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }] });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>前端 fetch：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/orders&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (res.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 401</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/auth/signin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动跳登录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><hr><h3 id="_7-4-用户体验优化-自动续期" tabindex="-1">7.4 用户体验优化：自动续期 <a class="header-anchor" href="#_7-4-用户体验优化-自动续期" aria-label="Permalink to &quot;7.4 用户体验优化：自动续期&quot;">​</a></h3><p>如果你觉得「一天过期就要重新登录」很烦，可以：</p><ul><li>把 <code>maxAge</code> 设大一点，比如 30 天；</li><li>配合 <code>updateAge</code>（比如 1 天），只要用户每天来一次，Cookie 就会自动刷新。</li></ul><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  maxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 30 天</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  updateAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 每 24 小时刷新一次</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这样就变成「长期有效登录」，除非用户真的一个月没来。</p><hr><p><strong>✅ 最终效果</strong></p><ol><li><strong>客户端检测</strong> → 在 React 组件里实时监控登录状态，失效自动跳转。</li><li><strong>服务端检测</strong> → 在 page.tsx 里用 <code>getServerSession()</code>，未登录直接 redirect。</li><li><strong>API 接口保护</strong> → 后端路由验证 session，过期返回 401。</li><li><strong>自动续期</strong> → 只要用户活跃，session 就不会轻易过期。</li></ol>`,95))])}const A=n(d,[["render",g]]);export{m as __pageData,A as default};
