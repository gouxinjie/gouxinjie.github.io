import{_ as n,C as e,c as l,o as p,j as a,G as t,aQ as h,a as r}from"./chunks/framework.DEi4YP2n.js";const c="/assets/shallow.D-ceHieR.png",y=JSON.parse('{"title":"浅层响应式shallowRef和shallowReactive使用","description":"","frontmatter":{},"headers":[],"relativePath":"column/Vue/响应式API进阶/shallowReactive.md","filePath":"column/Vue/响应式API进阶/shallowReactive.md","lastUpdated":1757558151000}'),k={name:"column/Vue/响应式API进阶/shallowReactive.md"};function o(E,s,d,b,u,g){const i=e("ArticleMetadata");return p(),l("div",null,[s[0]||(s[0]=a("h1",{id:"浅层响应式shallowref和shallowreactive使用",tabindex:"-1"},[r("浅层响应式shallowRef和shallowReactive使用 "),a("a",{class:"header-anchor",href:"#浅层响应式shallowref和shallowreactive使用","aria-label":'Permalink to "浅层响应式shallowRef和shallowReactive使用"'},"​")],-1)),t(i),s[1]||(s[1]=h(`<hr><p><code>在 Vue 3 中，shallowRef 和 shallowReactive </code>是用于创建浅层响应式数据的工具。</p><p><code>与 ref 和 reactive 不同</code>，它们只对顶层属性进行响应式处理，而不递归地处理嵌套的对象或数组。这可以提高性能，特别是在处理大型数据结构时。</p><h2 id="_1、shallowref" tabindex="-1">1、shallowRef <a class="header-anchor" href="#_1、shallowref" aria-label="Permalink to &quot;1、shallowRef&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">简述</p><p>ref的浅层作用形式。shallowRef与普通的 ref 的区别在于，shallowRef 不会对对象进行深度的响应式处理。</p><p>也就是 shallowRef 包含的对象内部的属性发生变化时，shallowRef 本身不会触发重新渲染或响应式更新，所以使用shallowRef时只关心顶层的引用变化。</p></div><p>创建一个浅层的 <code>ref</code>，只对顶层值进行响应式处理。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  import { shallowRef } from &#39;vue&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  const state = shallowRef({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xinjie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  // 修改顶层引用会触发响应式更新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  state.value = { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Eula&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  // 修改内部属性不会触发响应式更新  既视图不会更新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  state.value.age = 30;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>从下面图上就可以看出：</p><p>浅层响应式里面的属性：<code>__v_isShallow：true</code><br> _value也是通过Proxy代理的。</p><div class="info custom-block"><p class="custom-block-title">shallowRef</p><p><img src="`+c+`" alt="" loading="lazy"></p></div><p>上面的例子说明只有对 <code>state.value </code>进行整体赋值操作才会触发响应式更新，对内部属性修改不会触发视图的更新。</p><p><strong>总结：</strong></p><p>这对于一些列表数据需要重新替换或赋值的场景非常有用。减少不必要的视图更新，提高性能。</p><h2 id="_2、shallowreactive" tabindex="-1">2、shallowReactive <a class="header-anchor" href="#_2、shallowreactive" aria-label="Permalink to &quot;2、shallowReactive&quot;">​</a></h2><p><code>reactive</code> 的浅层作用形式, 和 <code>shallowRef</code> 的功能比较类似。</p><p><code>shallowReactive</code> 与普通的 <code>reactive</code> 的区别在于，shallowReactive 不会对对象进行深度的响应式处理，也就是 shallowReactive 包含的对象内部的属性发生变化时，shallowReactive 本身不会触发重新渲染或响应式更新，所以使用shallowReactive时只关心顶层的引用变化。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const state = shallowReactive({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  foo: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  nested: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bar: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 更改状态自身的属性是响应式的</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state.foo++</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// ...但下层嵌套对象不会被转为响应式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isReactive(state.nested) // false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 不是响应式的</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state.nested.bar++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>`,17))])}const v=n(k,[["render",o]]);export{y as __pageData,v as default};
