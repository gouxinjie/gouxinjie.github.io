import{_ as e,C as n,c as p,o as l,j as i,G as t,aQ as h,a as r}from"./chunks/framework.DEi4YP2n.js";const y=JSON.parse('{"title":"Node.js 中的 process ：进程控制与环境管理","description":"","frontmatter":{},"headers":[],"relativePath":"column/Node/内置模块/process 模块.md","filePath":"column/Node/内置模块/process 模块.md","lastUpdated":1760688554000}'),d={name:"column/Node/内置模块/process 模块.md"};function k(o,s,c,E,g,u){const a=n("ArticleMetadata");return l(),p("div",null,[s[0]||(s[0]=i("h1",{id:"node-js-中的-process-进程控制与环境管理",tabindex:"-1"},[r("Node.js 中的 process ：进程控制与环境管理 "),i("a",{class:"header-anchor",href:"#node-js-中的-process-进程控制与环境管理","aria-label":'Permalink to "Node.js 中的 process ：进程控制与环境管理"'},"​")],-1)),t(a),s[1]||(s[1]=h('<nav class="table-of-contents"><ul><li><a href="#_1-进程对象-process">1. 进程对象 process</a></li><li><a href="#_2-常用属性">2. 常用属性</a></li><li><a href="#_3-常用事件">3. 常用事件</a></li><li><a href="#_4-示例-命令行参数和环境变量">4. 示例：命令行参数和环境变量</a></li></ul></nav><p><code>process</code> 是 Node.js 中一个非常核心的全局对象，它提供了与当前进程相关的信息和控制。<code>process</code> 对象可以用来管理命令行输入输出、操作系统环境变量、执行时的资源限制等。</p><h3 id="_1-进程对象-process" tabindex="-1">1. 进程对象 <code>process</code> <a class="header-anchor" href="#_1-进程对象-process" aria-label="Permalink to &quot;1. 进程对象 `process`&quot;">​</a></h3><p><code>process</code> 是一个全局对象，在 Node.js 中不需要通过 <code>require</code> 引入。它包含了许多有用的方法和属性，来帮助我们管理 Node.js 应用的运行时环境。</p><h3 id="_2-常用属性" tabindex="-1">2. 常用属性 <a class="header-anchor" href="#_2-常用属性" aria-label="Permalink to &quot;2. 常用属性&quot;">​</a></h3><h4 id="_2-1-process-argv" tabindex="-1">2.1 <code>process.argv</code> <a class="header-anchor" href="#_2-1-process-argv" aria-label="Permalink to &quot;2.1 `process.argv`&quot;">​</a></h4><p><code>process.argv</code> 是一个数组，包含了命令行中调用 Node.js 脚本时传入的参数。第一个元素是 Node.js 可执行文件的路径，第二个元素是脚本文件的路径，后面的元素是传给脚本的其他参数。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.argv);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>输出示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[</span></span>\n<span class="line"><span>  &#39;/usr/local/bin/node&#39;,</span></span>\n<span class="line"><span>  &#39;/path/to/your/script.js&#39;,</span></span>\n<span class="line"><span>  &#39;arg1&#39;,</span></span>\n<span class="line"><span>  &#39;arg2&#39;</span></span>\n<span class="line"><span>]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可以通过 <code>process.argv</code> 来解析命令行参数。例如：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.argv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 跳过前两个元素（Node.js 和脚本路径）</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&#39;arg1&#39;, &#39;arg2&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_2-2-process-env" tabindex="-1">2.2 <code>process.env</code> <a class="header-anchor" href="#_2-2-process-env" aria-label="Permalink to &quot;2.2 `process.env`&quot;">​</a></h4><p><code>process.env</code> 是一个包含用户环境变量的对象。例如，它可以访问操作系统中的环境变量如 <code>PATH</code>, <code>HOME</code>, <code>USER</code> 等。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.env); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印所有环境变量</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取 PATH 环境变量</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>可以使用它来设置应用的环境配置：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;production&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 &#39;production&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_2-3-process-exit" tabindex="-1">2.3 <code>process.exit()</code> <a class="header-anchor" href="#_2-3-process-exit" aria-label="Permalink to &quot;2.3 `process.exit()`&quot;">​</a></h4><p><code>process.exit()</code> 用于退出当前的 Node.js 进程，并且可以传入一个退出码。默认的退出码是 <code>0</code>，表示程序成功退出。如果传入非零值，表示程序异常退出。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;程序执行结束&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 正常退出</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>如果退出码是 <code>0</code>，表示程序成功执行。</li><li>如果退出码是非 <code>0</code>，表示程序出现了错误。</li></ul><h4 id="_2-4-process-stdin-process-stdout-process-stderr" tabindex="-1">2.4 <code>process.stdin</code>, <code>process.stdout</code>, <code>process.stderr</code> <a class="header-anchor" href="#_2-4-process-stdin-process-stdout-process-stderr" aria-label="Permalink to &quot;2.4 `process.stdin`, `process.stdout`, `process.stderr`&quot;">​</a></h4><p>这三个属性分别代表标准输入流、标准输出流和标准错误流。</p><ul><li><strong><code>process.stdin</code></strong>：读取用户输入（通常是命令行输入）。</li><li><strong><code>process.stdout</code></strong>：输出到终端（通常是程序的输出）。</li><li><strong><code>process.stderr</code></strong>：输出错误信息到终端。</li></ul><p>例如，使用 <code>process.stdin</code> 来读取用户输入：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;用户输入:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>你还可以使用 <code>process.stdout</code> 输出信息：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-5-process-pid" tabindex="-1">2.5 <code>process.pid</code> <a class="header-anchor" href="#_2-5-process-pid" aria-label="Permalink to &quot;2.5 `process.pid`&quot;">​</a></h4><p><code>process.pid</code> 返回当前 Node.js 进程的进程 ID（PID）。它是一个数字，用来标识当前正在运行的进程。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.pid); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出当前进程的 PID</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-6-process-title" tabindex="-1">2.6 <code>process.title</code> <a class="header-anchor" href="#_2-6-process-title" aria-label="Permalink to &quot;2.6 `process.title`&quot;">​</a></h4><p><code>process.title</code> 返回或设置 Node.js 进程的标题。进程标题通常用于命令行工具的标识。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.title); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认值是 &#39;node&#39;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyApp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.title); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;MyApp&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2-7-process-platform" tabindex="-1">2.7 <code>process.platform</code> <a class="header-anchor" href="#_2-7-process-platform" aria-label="Permalink to &quot;2.7 `process.platform`&quot;">​</a></h4><p><code>process.platform</code> 返回 Node.js 进程运行的平台。它可以返回如下的值：</p><ul><li><code>&#39;darwin&#39;</code>：macOS</li><li><code>&#39;linux&#39;</code>：Linux</li><li><code>&#39;win32&#39;</code>：Windows</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.platform); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;win32&#39;, &#39;darwin&#39;, &#39;linux&#39; 等</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-8-process-version" tabindex="-1">2.8 <code>process.version</code> <a class="header-anchor" href="#_2-8-process-version" aria-label="Permalink to &quot;2.8 `process.version`&quot;">​</a></h4><p><code>process.version</code> 返回当前 Node.js 的版本信息。它是一个字符串，如 <code>v14.16.1</code>。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.version); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 例如 &#39;v14.16.1&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-9-process-memoryusage" tabindex="-1">2.9 <code>process.memoryUsage()</code> <a class="header-anchor" href="#_2-9-process-memoryusage" aria-label="Permalink to &quot;2.9 `process.memoryUsage()`&quot;">​</a></h4><p><code>process.memoryUsage()</code> 返回一个对象，表示当前进程的内存使用情况。返回的对象包含以下字段：</p><ul><li><code>rss</code>：常驻内存集（Resident Set Size），是进程占用的物理内存量（包括代码、数据和堆栈）。</li><li><code>heapTotal</code>：V8 引擎的堆总大小。</li><li><code>heapUsed</code>：V8 引擎已经使用的堆内存量。</li><li><code>external</code>：V8 引擎外部的内存（如 C++ 对象）。</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memoryUsage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>输出示例：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  rss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">163000576</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  heapTotal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">92876800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  heapUsed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">52823296</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  external</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1160584</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_2-10-process-argv0" tabindex="-1">2.10 <code>process.argv0</code> <a class="header-anchor" href="#_2-10-process-argv0" aria-label="Permalink to &quot;2.10 `process.argv0`&quot;">​</a></h4><p><code>process.argv0</code> 返回 Node.js 执行时传入的脚本名称，通常是与 <code>process.argv[1]</code> 相同，但可以用来区分启动脚本时是否使用了 Node.js 的 <code>--eval</code> 或 <code>--require</code> 等选项。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.argv0);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-常用事件" tabindex="-1">3. 常用事件 <a class="header-anchor" href="#_3-常用事件" aria-label="Permalink to &quot;3. 常用事件&quot;">​</a></h3><h4 id="_3-1-process-on-exit-callback" tabindex="-1">3.1 <code>process.on(&#39;exit&#39;, callback)</code> <a class="header-anchor" href="#_3-1-process-on-exit-callback" aria-label="Permalink to &quot;3.1 `process.on(&#39;exit&#39;, callback)`&quot;">​</a></h4><p><code>&#39;exit&#39;</code> 事件会在 Node.js 进程退出时触发，通常用来执行清理任务。<code>callback</code> 在进程退出时执行，但不能异步执行（不能使用 <code>setTimeout</code> 等异步方法）。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;exit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`进程退出，退出码: ${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_3-2-process-on-uncaughtexception-callback" tabindex="-1">3.2 <code>process.on(&#39;uncaughtException&#39;, callback)</code> <a class="header-anchor" href="#_3-2-process-on-uncaughtexception-callback" aria-label="Permalink to &quot;3.2 `process.on(&#39;uncaughtException&#39;, callback)`&quot;">​</a></h4><p>当发生未捕获的异常时，会触发 <code>&#39;uncaughtException&#39;</code> 事件。这可以用来处理未捕获的异常，但建议用它来做日志记录，而不是直接处理所有异常。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uncaughtException&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;捕获到异常:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, err);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 退出进程</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_4-示例-命令行参数和环境变量" tabindex="-1">4. 示例：命令行参数和环境变量 <a class="header-anchor" href="#_4-示例-命令行参数和环境变量" aria-label="Permalink to &quot;4. 示例：命令行参数和环境变量&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取命令行参数</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.argv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;命令行参数:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取环境变量</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nodeEnv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;development&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;当前环境:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, nodeEnv);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出进程ID</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;当前进程ID:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, process.pid);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',59))])}const v=e(d,[["render",k]]);export{y as __pageData,v as default};
