import{_ as l,C as a,c as e,o as i,j as o,G as n,aQ as s,a as d}from"./chunks/framework.DEi4YP2n.js";const S=JSON.parse('{"title":"关系型和非关系型数据库","description":"","frontmatter":{},"headers":[],"relativePath":"column/Node/MySQL/关系型和非关系型数据库.md","filePath":"column/Node/MySQL/关系型和非关系型数据库.md","lastUpdated":1759136986000}'),g={name:"column/Node/MySQL/关系型和非关系型数据库.md"};function p(h,t,c,u,_,b){const r=a("ArticleMetadata");return i(),e("div",null,[t[0]||(t[0]=o("h1",{id:"关系型和非关系型数据库",tabindex:"-1"},[d("关系型和非关系型数据库 "),o("a",{class:"header-anchor",href:"#关系型和非关系型数据库","aria-label":'Permalink to "关系型和非关系型数据库"'},"​")],-1)),n(r),t[1]||(t[1]=s('<nav class="table-of-contents"><ul><li><a href="#一、关系型数据库的基本概念">一、关系型数据库的基本概念</a><ul><li><a href="#_1-1-关系型数据库的特点">1.1 关系型数据库的特点</a></li><li><a href="#_1-2-关系型数据库的常见管理系统-dbms">1.2 关系型数据库的常见管理系统（DBMS）</a></li><li><a href="#_1-3-关系型数据库的优缺点">1.3 关系型数据库的优缺点</a></li></ul></li><li><a href="#二、什么是非关系型数据库-nosql">二、什么是非关系型数据库（NoSQL）？</a><ul><li><a href="#_2-1-非关系型数据库的特点">2.1 非关系型数据库的特点</a></li><li><a href="#_2-2-非关系型数据库的类型">2.2 非关系型数据库的类型</a></li><li><a href="#_2-3-非关系型数据库的优缺点">2.3 非关系型数据库的优缺点</a></li><li><a href="#_2-4-非关系型数据库的应用场景">2.4 非关系型数据库的应用场景</a></li></ul></li><li><a href="#三、怎么理解主键和外键">三、怎么理解主键和外键</a><ul><li><a href="#_3-1-主键-primary-key">3.1 主键（Primary Key）</a></li><li><a href="#_3-2-外键-foreign-key">3.2 外键（Foreign Key）</a></li><li><a href="#_3-3-例子">3.3 例子：</a></li></ul></li><li><a href="#四、实体-属性-关系简述">四、实体，属性，关系简述</a><ul><li><a href="#_4-1-实体-entity">4.1 实体（Entity）</a></li><li><a href="#_4-2-属性-attribute">4.2 属性（Attribute）</a></li><li><a href="#_4-3-关系-relationship">4.3 关系（Relationship）</a></li></ul></li></ul></nav><h2 id="一、关系型数据库的基本概念" tabindex="-1">一、关系型数据库的基本概念 <a class="header-anchor" href="#一、关系型数据库的基本概念" aria-label="Permalink to &quot;一、关系型数据库的基本概念&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">关系型数据库的基本概念</p><p>在关系型数据库中，数据被存储在表（<code>Table</code>）中，这些表通过行（<code>Row</code>）和列（<code>Column</code>）组织。每一行表示一条记录，而每一列表示一个属性（字段）。这些表之间可以通过关联（<code>Relationship</code>）建立联系，从而确保数据的完整性、准确性以及易于管理。</p></div><ol><li><p><strong>表（Table）</strong> 表是关系型数据库中的基本存储单元，它由多个行和列组成。每个表有一个唯一的名称，并且包含一组特定的字段。表中的每一行表示一个记录，每一列表示记录的一个属性。例如，一个学生信息表可能包含“学号”、“姓名”、“年龄”等列。</p></li><li><p><strong>行（Row）</strong> 每一行代表一个数据实体（记录）。例如，在“学生”表中，一行可能表示某个学生的信息。</p></li><li><p><strong>列（Column）</strong> 列是表中的字段，定义了记录的某一属性。例如，“姓名”、“学号”就是“学生”表的列。每列的数据类型（如整数、字符串、日期等）通常都是一致的。</p></li><li><p><strong>主键（Primary Key）</strong> 主键是表中每行记录的<strong>唯一标识符</strong>。每个表只能有一个主键，主键字段的值必须唯一且不能为空。例如，“学号”可以作为学生信息表的主键，因为每个学生都有唯一的学号。</p></li><li><p><strong>外键（Foreign Key）</strong> 外键是一个表中的字段，它引用另一个表中的主键，建立表与表之间的关系。通过外键，可以实现数据的关联。例如，“成绩”表可能包含一个“学生 ID”外键，它引用“学生”表中的主键“学号”。</p></li><li><p><strong>关系（Relationship）</strong> 关系型数据库的核心就是“关系”，即不同表之间通过外键和主键相连接，形成数据之间的逻辑联系。通过这种关联，可以确保数据的一致性和完整性。</p></li></ol><h3 id="_1-1-关系型数据库的特点" tabindex="-1">1.1 关系型数据库的特点 <a class="header-anchor" href="#_1-1-关系型数据库的特点" aria-label="Permalink to &quot;1.1 关系型数据库的特点&quot;">​</a></h3><ol><li><p><strong>数据存储方式：</strong> 数据以表格的形式组织，每个表都有一组行和列。</p></li><li><p><strong>结构化查询：</strong> 使用结构化查询语言（SQL，Structured Query Language）对数据库进行查询、插入、更新、删除等操作。SQL 提供了丰富的功能，可以执行复杂的查询操作。</p></li><li><p><strong>数据一致性：</strong> 关系型数据库遵循 ACID（原子性、一致性、隔离性、持久性）原则，确保数据库中的数据在各种情况下都能保持一致和可靠。</p></li><li><p><strong>关系模型：</strong> 数据表之间的关系是通过主键和外键建立的，可以在多个表之间进行联接（JOIN），从而获取更复杂的数据。</p></li><li><p><strong>数据完整性：</strong> 通过主键和外键约束，关系型数据库确保数据的一致性和完整性。例如，外键约束保证了在一个表中的值必须对应另一个表中的值，从而避免出现孤立的记录。</p></li><li><p><strong>规范化（Normalization）：</strong> 关系型数据库通常进行数据规范化，旨在减少数据冗余和依赖性。通过规范化，可以将数据分解成多个表，确保数据的结构更加简洁和高效。</p></li></ol><h3 id="_1-2-关系型数据库的常见管理系统-dbms" tabindex="-1">1.2 关系型数据库的常见管理系统（DBMS） <a class="header-anchor" href="#_1-2-关系型数据库的常见管理系统-dbms" aria-label="Permalink to &quot;1.2 关系型数据库的常见管理系统（DBMS）&quot;">​</a></h3><ol><li><p><strong>MySQL</strong> 一个开源的关系型数据库管理系统，非常流行，尤其是在 Web 开发中。支持 SQL 标准，提供了高性能、可靠性和易于使用的特点。</p></li><li><p><strong>PostgreSQL</strong> 也是一个开源的关系型数据库，支持更高级的 SQL 功能和更复杂的数据类型。它比 MySQL 具有更强的事务处理和数据完整性保障。</p></li><li><p><strong>Oracle Database</strong> 是由 Oracle 公司开发的商用关系型数据库系统。它功能强大，常用于大型企业的数据库管理，提供了高度可扩展性和复杂的安全特性。</p></li><li><p><strong>Microsoft SQL Server</strong> 由微软开发的关系型数据库管理系统，广泛应用于企业级应用中，尤其是在与微软其他技术（如.NET）配合使用时，具有非常高的兼容性。</p></li></ol><h3 id="_1-3-关系型数据库的优缺点" tabindex="-1">1.3 关系型数据库的优缺点 <a class="header-anchor" href="#_1-3-关系型数据库的优缺点" aria-label="Permalink to &quot;1.3 关系型数据库的优缺点&quot;">​</a></h3><p><strong>优点：</strong></p><ol><li><p><strong>数据一致性与完整性：</strong> 通过 ACID 特性，关系型数据库保证了数据的高一致性和高完整性，确保了事务的可靠执行。</p></li><li><p><strong>结构清晰：</strong> 数据通过表格清晰地组织和管理，便于理解和维护。</p></li><li><p><strong>强大的查询能力：</strong> 使用 SQL 进行数据查询，支持复杂的查询、聚合、联接等操作。</p></li><li><p><strong>成熟的技术与工具：</strong> 关系型数据库技术已经非常成熟，拥有大量的社区支持和商业工具，开发和维护相对容易。</p></li></ol><p><strong>缺点：</strong></p><ol><li><p><strong>扩展性问题：</strong> 关系型数据库通常在处理大规模分布式数据时面临性能瓶颈，尤其是在横向扩展（增加更多服务器）时，往往比非关系型数据库更具挑战。</p></li><li><p><strong>灵活性较差：</strong> 关系型数据库的数据结构相对固定，变更数据结构（如表的列）可能会对应用程序产生较大影响。</p></li><li><p><strong>复杂的联接操作：</strong> 当数据表之间存在大量关联时，复杂的联接查询可能会影响性能，尤其是在处理大量数据时。</p></li></ol><h2 id="二、什么是非关系型数据库-nosql" tabindex="-1">二、什么是非关系型数据库（NoSQL）？ <a class="header-anchor" href="#二、什么是非关系型数据库-nosql" aria-label="Permalink to &quot;二、什么是非关系型数据库（NoSQL）？&quot;">​</a></h2><p>它并不使用结构化的表格（行和列）来存储数据，而是使用更加灵活和多样的数据模型，如键值对（Key-Value）、文档（Document）、列族（Column Family）和图（Graph）等。NoSQL 数据库被设计为支持大规模数据存储、分布式架构、高性能和高扩展性，尤其适用于海量数据、高并发请求和快速变化的数据结构。</p><h3 id="_2-1-非关系型数据库的特点" tabindex="-1">2.1 非关系型数据库的特点 <a class="header-anchor" href="#_2-1-非关系型数据库的特点" aria-label="Permalink to &quot;2.1 非关系型数据库的特点&quot;">​</a></h3><ol><li><p><strong>灵活的数据模型</strong> 非关系型数据库通常不需要预定义数据表的结构，它允许动态的添加字段。与关系型数据库的固定结构不同，NoSQL 数据库支持各种类型的数据模型，比如键值对、文档、列族和图形模型。</p></li><li><p><strong>高可扩展性</strong> NoSQL 数据库通常是分布式的，可以横向扩展（通过增加更多的服务器来增加容量），这使得它们能处理大规模的数据量和高并发请求。</p></li><li><p><strong>最终一致性</strong> 相较于关系型数据库中严格的 ACID 事务（原子性、一致性、隔离性、持久性），大部分 NoSQL 数据库采用的是 <strong>最终一致性</strong> 模型。这意味着，在某些情况下，数据可能会在不同节点之间短时间内不一致，但最终会达到一致状态。</p></li><li><p><strong>无模式结构</strong> 非关系型数据库不要求事先定义数据表结构，可以灵活存储不同类型的数据。例如，可以在同一集合中存储具有不同字段的数据，这对快速发展的应用和迭代周期较短的场景非常有用。</p></li><li><p><strong>高性能</strong> 由于 NoSQL 数据库大多针对特定的应用场景进行优化（例如高速读写、低延迟查询），它们在一些场景下的性能表现远超传统的关系型数据库。</p></li></ol><h3 id="_2-2-非关系型数据库的类型" tabindex="-1">2.2 非关系型数据库的类型 <a class="header-anchor" href="#_2-2-非关系型数据库的类型" aria-label="Permalink to &quot;2.2 非关系型数据库的类型&quot;">​</a></h3><p>非关系型数据库根据其数据模型的不同，通常可以分为以下几种类型：</p><ol><li><p><strong>键值数据库（Key-Value Store）</strong> 键值数据库是一种最简单的 NoSQL 数据库，它将数据存储为键值对（Key-Value）。每个数据项都有一个唯一的键（Key）和对应的值（Value）。这种结构非常适合存储快速查找的简单数据，如缓存、会话数据等。</p><ul><li>例子：<strong>Redis</strong>、<strong>Riak</strong></li></ul></li><li><p><strong>文档数据库（Document Store）</strong> 文档数据库将数据存储为文档，通常使用 JSON、BSON 或 XML 格式来表示。每个文档可以存储不同的数据字段，而无需事先定义模式，且文档之间可以有不同的结构。文档数据库非常适合存储半结构化数据，如用户配置文件、日志数据等。</p><ul><li>例子：<strong>MongoDB</strong>、<strong>CouchDB</strong></li></ul></li><li><p><strong>列族数据库（Column-Family Store）</strong> 列族数据库将数据按列而不是行进行存储，适用于处理大规模的、需要按列查询的数据。它支持高效的读取操作和水平扩展，常用于处理数据仓库和大数据存储的应用。</p><ul><li>例子：<strong>Cassandra</strong>、<strong>HBase</strong></li></ul></li><li><p><strong>图数据库（Graph Database）</strong> 图数据库用于存储和处理图形结构的数据，如社交网络、推荐系统等。数据以节点（Node）和边（Edge）的形式存储，节点表示实体，边表示实体之间的关系。图数据库可以高效地处理复杂的关系数据。</p><ul><li>例子：<strong>Neo4j</strong>、<strong>Amazon Neptune</strong></li></ul></li></ol><h3 id="_2-3-非关系型数据库的优缺点" tabindex="-1">2.3 非关系型数据库的优缺点 <a class="header-anchor" href="#_2-3-非关系型数据库的优缺点" aria-label="Permalink to &quot;2.3 非关系型数据库的优缺点&quot;">​</a></h3><p><strong>优点：</strong></p><ol><li><p><strong>高扩展性</strong> NoSQL 数据库设计时便考虑到大规模数据存储和高并发请求，因此它们通常能够水平扩展。随着数据量增加，可以通过增加更多服务器来分担负载，而不必升级单台机器的硬件。</p></li><li><p><strong>灵活性</strong> 不需要固定的模式定义，数据可以灵活地存储和修改。这对开发快速迭代的应用程序非常有利，因为你不需要每次都改变数据库模式。</p></li><li><p><strong>高性能</strong> 在许多应用场景下，NoSQL 数据库通过减少复杂的联接操作、优化写入和读取性能，提供了非常高的响应速度，适合处理大量并发请求。</p></li><li><p><strong>适应大数据应用</strong> NoSQL 数据库特别适合大数据处理和实时数据分析。它们能够处理 PB 级别的数据，支持分布式存储和并行计算，非常适用于大数据分析、物联网（IoT）、日志收集等场景。</p></li></ol><p><strong>缺点：</strong></p><ol><li><p><strong>数据一致性问题</strong> 大多数 NoSQL 数据库采用最终一致性模型，这可能导致在某些情况下数据不一致。虽然这种模型在很多场景下可以满足需求，但对于需要强一致性的应用来说，可能会产生问题。</p></li><li><p><strong>缺乏标准化</strong> 每种 NoSQL 数据库都有不同的数据模型和查询语言，缺乏统一的标准。这意味着开发人员需要学习多种不同的 NoSQL 数据库技术，并且每个数据库的功能和性能也有所不同。</p></li><li><p><strong>事务支持较弱</strong> 与关系型数据库相比，许多 NoSQL 数据库不支持复杂的事务操作，或者即使支持也没有 ACID 特性。因此，对于需要复杂事务处理的应用，NoSQL 可能不是最佳选择。</p></li><li><p><strong>适用场景限制</strong> 非关系型数据库更适合存储非结构化或半结构化数据，对于严格结构化的表格数据，关系型数据库仍然是更好的选择。</p></li></ol><h3 id="_2-4-非关系型数据库的应用场景" tabindex="-1">2.4 非关系型数据库的应用场景 <a class="header-anchor" href="#_2-4-非关系型数据库的应用场景" aria-label="Permalink to &quot;2.4 非关系型数据库的应用场景&quot;">​</a></h3><ol><li><p><strong>社交网络</strong> 社交网络应用需要存储大量的用户数据、关系图谱以及动态内容。图数据库（如 Neo4j）可以高效地管理和查询复杂的社交关系。</p></li><li><p><strong>实时推荐系统</strong> 如 Netflix、Amazon 和 YouTube 的推荐系统，通常使用非关系型数据库来存储用户行为数据和推荐结果，以便快速进行数据读取和实时更新。</p></li><li><p><strong>物联网（IoT）</strong> 物联网设备生成的传感器数据通常是高频次且结构不固定的，适合使用 NoSQL 数据库进行存储和处理。</p></li><li><p><strong>日志分析</strong> 大型网站和应用生成的日志数据可以通过 NoSQL 数据库高效存储，并进行快速查询和分析，实时发现问题。</p></li></ol><h2 id="三、怎么理解主键和外键" tabindex="-1">三、怎么理解主键和外键 <a class="header-anchor" href="#三、怎么理解主键和外键" aria-label="Permalink to &quot;三、怎么理解主键和外键&quot;">​</a></h2><h3 id="_3-1-主键-primary-key" tabindex="-1">3.1 主键（Primary Key） <a class="header-anchor" href="#_3-1-主键-primary-key" aria-label="Permalink to &quot;3.1 主键（Primary Key）&quot;">​</a></h3><p><strong>主键</strong>是用来唯一标识表中每一行记录的字段。每个表只能有一个主键，主键值必须是唯一的且不能为 <code>NULL</code>。它确保表中的每一条记录都有唯一标识。</p><p><strong>例子</strong>：在学生表中，<code>Student_ID</code> 可以作为主键，因为每个学生的学号都是唯一的。</p><h3 id="_3-2-外键-foreign-key" tabindex="-1">3.2 外键（Foreign Key） <a class="header-anchor" href="#_3-2-外键-foreign-key" aria-label="Permalink to &quot;3.2 外键（Foreign Key）&quot;">​</a></h3><p><strong>外键</strong>是一个表中的字段，它指向另一个表的主键，用来建立两个表之间的联系。外键确保数据的完整性和一致性，外键列的值必须在目标表的主键列中存在。</p><p><strong>例子</strong>：在成绩表中，<code>Student_ID</code> 可以作为外键，指向学生表中的 <code>Student_ID</code>，表示成绩记录属于哪个学生。</p><h3 id="_3-3-例子" tabindex="-1">3.3 例子： <a class="header-anchor" href="#_3-3-例子" aria-label="Permalink to &quot;3.3 例子：&quot;">​</a></h3><p>假设我们有两个表：</p><ol><li><strong>学生表</strong>（<code>students</code>）：</li></ol><table tabindex="0"><thead><tr><th>学号（Student_ID）</th><th>姓名（Name）</th><th>年龄（Age）</th></tr></thead><tbody><tr><td>1001</td><td>张三</td><td>20</td></tr><tr><td>1002</td><td>李四</td><td>22</td></tr><tr><td>1003</td><td>王五</td><td>21</td></tr></tbody></table><ol start="2"><li><strong>成绩表</strong>（<code>grades</code>）：</li></ol><table tabindex="0"><thead><tr><th>学号（Student_ID）</th><th>课程（Course）</th><th>成绩（Grade）</th></tr></thead><tbody><tr><td>1001</td><td>数学</td><td>90</td></tr><tr><td>1002</td><td>英语</td><td>85</td></tr><tr><td>1001</td><td>物理</td><td>88</td></tr></tbody></table><p>在这个例子中，<code>grades</code> 表中的 <code>Student_ID</code> 是外键，它引用了 <code>students</code> 表中的 <code>Student_ID</code> 主键。这样，我们就能知道每一条成绩记录对应的是哪个学生。外键确保了成绩表中每个学生的学号必须存在于学生表中，从而保证数据的关联性和完整性。</p><h2 id="四、实体-属性-关系简述" tabindex="-1">四、实体，属性，关系简述 <a class="header-anchor" href="#四、实体-属性-关系简述" aria-label="Permalink to &quot;四、实体，属性，关系简述&quot;">​</a></h2><p>在数据库建模中，实体（Entity）属性（Attribute）和关系（Relationship）是三个基本概念，它们用来描述现实世界中的数据和数据之间的关系。</p><h3 id="_4-1-实体-entity" tabindex="-1">4.1 实体（Entity） <a class="header-anchor" href="#_4-1-实体-entity" aria-label="Permalink to &quot;4.1 实体（Entity）&quot;">​</a></h3><p><strong>实体</strong>表示现实世界中的一个对象或事物，它可以是具体的也可以是抽象的，通常指的是我们需要存储数据的对象。</p><ul><li><strong>例子</strong>：学生、课程、员工、订单等。</li><li>实体通常被表示为表格中的一行。</li></ul><h3 id="_4-2-属性-attribute" tabindex="-1">4.2 属性（Attribute） <a class="header-anchor" href="#_4-2-属性-attribute" aria-label="Permalink to &quot;4.2 属性（Attribute）&quot;">​</a></h3><p><strong>属性</strong>是描述实体特征的字段或数据项。每个实体通常有多个属性，用于详细描述该实体的特征。</p><ul><li><strong>例子</strong>：对于一个“学生”实体，属性可以是 <code>Student_ID</code>（学号）、<code>Name</code>（姓名）、<code>Age</code>（年龄）等。</li></ul><h3 id="_4-3-关系-relationship" tabindex="-1">4.3 关系（Relationship） <a class="header-anchor" href="#_4-3-关系-relationship" aria-label="Permalink to &quot;4.3 关系（Relationship）&quot;">​</a></h3><p><strong>关系</strong>表示不同实体之间的联系或互动。在数据库中，关系通常表示表与表之间的关联。</p><ul><li><strong>例子</strong>：学生与课程之间的关系，可以是“选修”关系，表示哪个学生选了哪些课程。</li><li>关系在数据库中通过外键来实现。</li></ul><div class="tip custom-block"><p class="custom-block-title">总结：</p><ul><li><strong>实体</strong>：表示现实世界中的事物（例如：学生、课程）。</li><li><strong>属性</strong>：描述实体的特征（例如：学生的姓名、年龄）。</li><li><strong>关系</strong>：描述不同实体之间的联系（例如：学生选修课程）。</li></ul></div>',53))])}const f=l(g,[["render",p]]);export{S as __pageData,f as default};
