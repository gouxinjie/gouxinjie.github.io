import{_ as n,C as i,c as o,o as p,j as s,G as t,aQ as d,a as c}from"./chunks/framework.DEi4YP2n.js";const l="/assets/NODE_ENV.X_cZd8ol.png",r="/assets/NODE_ENV-1.fgYnN0Q2.png",h="/assets/NODE_ENV-2.DwkBC5kF.png",u="/assets/NODE_ENV-3.CGZSTk8T.png",V=JSON.parse('{"title":"环境变量和 process.env.NODE_ENV 理解","description":"","frontmatter":{},"headers":[],"relativePath":"column/Vue/构建打包相关/环境变量和NODE_ENV.md","filePath":"column/Vue/构建打包相关/环境变量和NODE_ENV.md","lastUpdated":1757923618000}'),E={name:"column/Vue/构建打包相关/环境变量和NODE_ENV.md"};function v(k,e,_,m,g,b){const a=i("ArticleMetadata");return p(),o("div",null,[e[0]||(e[0]=s("h1",{id:"环境变量和-process-env-node-env-理解",tabindex:"-1"},[c("环境变量和 process.env.NODE_ENV 理解 "),s("a",{class:"header-anchor",href:"#环境变量和-process-env-node-env-理解","aria-label":'Permalink to "环境变量和 process.env.NODE_ENV 理解"'},"​")],-1)),t(a),e[1]||(e[1]=d('<h2 id="_1-什么是-process-env" tabindex="-1">1，什么是 process.env <a class="header-anchor" href="#_1-什么是-process-env" aria-label="Permalink to &quot;1，什么是 process.env&quot;">​</a></h2><p><code>process.env</code> 是 <code>Node.js</code> 中的一个环境对象。其中保存着系统的环境的变量信息。可使用 <code>Node.js </code>命令行工具直接进行查看。如下：</p><p><img src="'+l+'" alt="在这里插入图片描述" loading="lazy"></p><p>而 <code>NODE_ENV</code> 就是其中的一个环境变量。这个变量主要用于标识当前的环境（生产环境，开发环境）。默认是没有这个环境变量的，需要自己手动配置。</p><h2 id="_2-vue-中的-node-env" tabindex="-1">2，vue 中的 NODE_ENV <a class="header-anchor" href="#_2-vue-中的-node-env" aria-label="Permalink to &quot;2，vue 中的 NODE_ENV&quot;">​</a></h2><p>在 <code>Vue</code> 项目中， Vue 提供了自己的配置方式。这就要涉及到 <code>Vue CLI</code> 中模式的概念了。 <code>Vue CLI</code> 文档说明了这个问题。</p><p><a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F" target="_blank" rel="noreferrer">VueCli 官方链接：</a></p><p><img src="'+r+`" alt="在这里插入图片描述" width="90%" loading="lazy"></p><p>也就是说，在 Vue 中 ,<code>NODE_ENV</code> 可以通过 <code>.env .[mode]</code>文件配置。配置过后，运行 Vue CLI 指令（ <code>npm run dev(serve) ，npm run build</code> ）时，就会将该模式下的<code>NODE_ENV</code>载入其中了。而这些命令，都有自己的默认模式：</p><ul><li><p><code>npm run dev(serve)</code> ，其实是运行了 <code>vue-cli service serve</code> ，默认模式为 <code>development</code> 。可以在 <code>.env.development</code> 文件下修改该模式的 <code>NODE_ENV</code></p></li><li><p><code>npm run build</code> ，其实运行了 <code>vue-cli service build </code>，默认模式为 <code>production</code> 。可以在<code>.env.production</code> 文件下修改该模式的 <code>NODE_ENV</code> ；不推荐修改；</p></li><li><p>在开发阶段 process.env.NODE_ENV 默认是 <code>development</code></p></li><li><p>当运行 npm run build 打包后 process.env.NODE_ENV 状态就自动改为了<code>production</code></p></li></ul><h2 id="_3-环境变量" tabindex="-1">3，环境变量 <a class="header-anchor" href="#_3-环境变量" aria-label="Permalink to &quot;3，环境变量&quot;">​</a></h2><blockquote><p>在日常开发中我们可能分为测试环境开发环境和生产环境，但是这两个环境所请求的后端接口是不一样的，或者生产环境下关闭 <code>Vconsole</code> 等这些跨环境的需求；</p><p>此时我们可以新建 <code>.env.development 和 .env.production</code> 这些文件来新增一些配置，作为重要的依赖项，</p><p>你可以在你的项目根目录中放置下列文件来指定环境变量：</p></blockquote><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.env                # 在所有的环境中被载入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.env.local          # 在所有的环境中被载入，但会被 git 忽略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.env.[mode]         # 只在指定的模式中被载入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.env.[mode].local   # 只在指定的模式中被载入，但会被 git 忽略</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>一个环境文件只包含环境变量的“键=值”对：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FOO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VUE_APP_BASE_API</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://bdgw.cci.cn/common&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>只有以<code>VUE_APP</code> 开头的变量会被<code>webpack.DefinePlugin</code>静态嵌入到客户端侧的包中。你可以在应用的代码中这样访问它们：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VUE_APP_BASE_API</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>1，新建文件</strong></p><p>可以看到下图我新建了三个文件：<code>.env.development 和.env.production 和.env.test;</code></p><p>可以看出我在测试环境和生产环境新建了一个 <code>process.env.VUE_APP_BASE_API</code> 这个属性来表示测试环境和生产环境请求不同的后端接口 ip；我只需要运行不同的打包命令即可；</p><p><img src="`+h+'" alt="在这里插入图片描述" loading="lazy"></p><p><strong>2，使用：</strong></p><p>package.json 里面新的运行命名后面要新增 <code>--mode &#39;自定义的名字&#39;</code>；</p><p>我这里为什么没有使用--mode development 或 production 呢？因为上面讲到 vue 默认开发环境就是 development ，生产环境就是 production ；</p><p>所以不需要多此一举了；</p><p><img src="'+u+'" alt="在这里插入图片描述" loading="lazy"></p><p>看到我上面红框里面的变量是 <code>--mode test</code> 说明当我运行 <code>npm run build-test</code> 时，.env.test 文件里面配置的一些环境变量就已经加载进来的，可以在代码中做一些相应的判断；</p>',27))])}const y=n(E,[["render",v]]);export{V as __pageData,y as default};
