import{_ as a,C as n,c as r,o as l,j as t,G as i,aQ as s,a as c}from"./chunks/framework.DEi4YP2n.js";const p="/assets/philosophy-1.DDcm0heS.png",S=JSON.parse('{"title":"Next.js 的哲学思想","description":"","frontmatter":{},"headers":[],"relativePath":"column/Next/基础/nextjs的哲学思想.md","filePath":"column/Next/基础/nextjs的哲学思想.md","lastUpdated":1760688554000}'),d={name:"column/Next/基础/nextjs的哲学思想.md"};function _(u,e,g,h,x,f){const o=n("ArticleMetadata");return l(),r("div",null,[e[0]||(e[0]=t("h1",{id:"next-js-的哲学思想",tabindex:"-1"},[c("Next.js 的哲学思想 "),t("a",{class:"header-anchor",href:"#next-js-的哲学思想","aria-label":'Permalink to "Next.js 的哲学思想"'},"​")],-1)),i(o),e[1]||(e[1]=s('<nav class="table-of-contents"><ul><li><a href="#_1-约定优于配置-convention-over-configuration">1. 约定优于配置（Convention over Configuration）</a></li><li><a href="#_2-开发者体验即生产力">2. 开发者体验即生产力</a></li><li><a href="#_3-性能是默认行为-不是优化目标">3. 性能是默认行为，不是优化目标</a></li><li><a href="#_4-全栈一体化-打破前后端壁垒">4. 全栈一体化，打破前后端壁垒</a></li><li><a href="#_5-渐进式架构-适应从个人博客到企业级系统">5. 渐进式架构，适应从个人博客到企业级系统</a></li></ul></nav><p><img src="'+p+'" alt="Next.js 哲学思想" loading="lazy"></p><p><a href="https://nextjs.org/docs" target="_blank" rel="noreferrer">Next.js 官网</a></p><p><code>Next.js</code> 的哲学思想可以概括为一句话：<strong>“约定优于配置，开发者体验优先，性能与扩展性并重。”</strong></p><p>它不是“又一个前端框架”，而是一种对现代 Web 开发痛点的系统性回应。如下：</p><h3 id="_1-约定优于配置-convention-over-configuration" tabindex="-1">1. <strong>约定优于配置（Convention over Configuration）</strong> <a class="header-anchor" href="#_1-约定优于配置-convention-over-configuration" aria-label="Permalink to &quot;1. **约定优于配置（Convention over Configuration）**&quot;">​</a></h3><p>Next.js 通过文件系统路由、自动代码分割、内置 SSR/SSG 等方式，<strong>将复杂的基础设施决策从开发者手中接管过来</strong>，让开发者专注于业务逻辑而非配置细节。</p><blockquote><p>例如：</p><ul><li><code>pages/index.js</code> 自动映射到 <code>/</code></li><li><code>app/blog/[slug]/page.js</code> 自动成为动态路由</li><li>无需手动配置 Webpack、Babel、Router、SSR 等</li></ul></blockquote><h3 id="_2-开发者体验即生产力" tabindex="-1">2. <strong>开发者体验即生产力</strong> <a class="header-anchor" href="#_2-开发者体验即生产力" aria-label="Permalink to &quot;2. **开发者体验即生产力**&quot;">​</a></h3><p>Next.js 把“开发快感”写进了架构设计：</p><ul><li><strong>零配置启动</strong>：<code>npx create-next-app</code> 即可运行</li><li><strong>热模块替换（HMR）</strong>：毫秒级反馈</li><li><strong>TypeScript、ESLint、Tailwind 一键集成</strong></li><li><strong>App Router</strong>：统一前后端逻辑，React Server Components 让数据获取更接近组件</li></ul><h3 id="_3-性能是默认行为-不是优化目标" tabindex="-1">3. <strong>性能是默认行为，不是优化目标</strong> <a class="header-anchor" href="#_3-性能是默认行为-不是优化目标" aria-label="Permalink to &quot;3. **性能是默认行为，不是优化目标**&quot;">​</a></h3><p>Next.js 不问你“要不要优化”，而是默认帮你优化：</p><ul><li>自动代码分割、图片优化、字体预加载</li><li>静态生成（SSG）、服务端渲染（SSR）、增量静态再生（ISR）按需使用</li><li>构建时 vs 运行时智能划分，减少客户端负担</li></ul><h3 id="_4-全栈一体化-打破前后端壁垒" tabindex="-1">4. <strong>全栈一体化，打破前后端壁垒</strong> <a class="header-anchor" href="#_4-全栈一体化-打破前后端壁垒" aria-label="Permalink to &quot;4. **全栈一体化，打破前后端壁垒**&quot;">​</a></h3><p>Next.js 不再只是“前端框架”，而是<strong>全栈 React 框架</strong>：</p><ul><li><code>app/api/</code> 目录下写 <code>route.ts</code> 即可创建后端接口</li><li>React Server Components 让组件在服务端运行，减少 hydration 成本</li><li>统一语言（TypeScript）、统一框架、统一部署（Vercel）</li></ul><h3 id="_5-渐进式架构-适应从个人博客到企业级系统" tabindex="-1">5. <strong>渐进式架构，适应从个人博客到企业级系统</strong> <a class="header-anchor" href="#_5-渐进式架构-适应从个人博客到企业级系统" aria-label="Permalink to &quot;5. **渐进式架构，适应从个人博客到企业级系统**&quot;">​</a></h3><p>Next.js 的结构设计支持<strong>从静态站点到复杂全栈应用的渐进式演进</strong>：</p><ul><li>初期：静态页面 + SSG</li><li>中期：动态路由 + ISR</li><li>后期：Server Components + Route Handlers + Middleware</li></ul>',20))])}const j=a(d,[["render",_]]);export{S as __pageData,j as default};
