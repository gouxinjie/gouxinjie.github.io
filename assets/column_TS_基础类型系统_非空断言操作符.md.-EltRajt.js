import{_ as n,C as l,c as t,o as p,j as i,G as h,aQ as k,a}from"./chunks/framework.DEi4YP2n.js";const F=JSON.parse('{"title":"TypeScript 非空断言操作符 (!) 解析","description":"","frontmatter":{},"headers":[],"relativePath":"column/TS/基础类型系统/非空断言操作符.md","filePath":"column/TS/基础类型系统/非空断言操作符.md","lastUpdated":1760582846000}'),d={name:"column/TS/基础类型系统/非空断言操作符.md"};function r(o,s,c,E,g,u){const e=l("ArticleMetadata");return p(),t("div",null,[s[0]||(s[0]=i("h1",{id:"typescript-非空断言操作符-解析",tabindex:"-1"},[a("TypeScript 非空断言操作符 ("),i("code",null,"!"),a(") 解析 "),i("a",{class:"header-anchor",href:"#typescript-非空断言操作符-解析","aria-label":'Permalink to "TypeScript 非空断言操作符 (`!`) 解析"'},"​")],-1)),h(e),s[1]||(s[1]=k(`<nav class="table-of-contents"><ul><li><a href="#_1-基本语法">1. 基本语法</a></li><li><a href="#_2-非空断言的使用场景">2. 非空断言的使用场景</a></li><li><a href="#_3-非空断言操作符的风险">3. 非空断言操作符的风险</a></li><li><a href="#_4-非空断言-vs-可选链">4. 非空断言 vs 可选链（?.）</a></li><li><a href="#_5-总结">5. 总结</a></li></ul></nav><p>在 <code>TypeScript</code> 中，<strong>非空断言操作符</strong>（<code>!</code>）用于告诉编译器某个值在特定上下文中是 <strong>非空的</strong>，即该值不会是 <code>null</code> 或 <code>undefined</code>。当你确定一个值在某个时刻不会是 <code>null</code> 或 <code>undefined</code> 时，可以使用非空断言操作符来绕过 TypeScript 的空值检查，避免报错。</p><h3 id="_1-基本语法" tabindex="-1">1. 基本语法 <a class="header-anchor" href="#_1-基本语法" aria-label="Permalink to &quot;1. 基本语法&quot;">​</a></h3><p>非空断言操作符是一个后缀 <code>!</code>，直接加在变量或表达式后面：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 非空断言操作符</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在上面的例子中，<code>value</code> 被声明为 <code>string | null</code> 类型。通过使用 <code>value!</code>，我们告诉 TypeScript 编译器：<strong>在这里，<code>value</code> 不是 <code>null</code></strong>。因此，TypeScript 会跳过对 <code>value</code> 是否为 <code>null</code> 的检查，并允许我们安全地访问其属性。</p><h3 id="_2-非空断言的使用场景" tabindex="-1">2. 非空断言的使用场景 <a class="header-anchor" href="#_2-非空断言的使用场景" aria-label="Permalink to &quot;2. 非空断言的使用场景&quot;">​</a></h3><h4 id="_2-1-防止-null-或-undefined-报错" tabindex="-1">2.1 防止 <code>null</code> 或 <code>undefined</code> 报错 <a class="header-anchor" href="#_2-1-防止-null-或-undefined-报错" aria-label="Permalink to &quot;2.1 防止 \`null\` 或 \`undefined\` 报错&quot;">​</a></h4><p>通常情况下，TypeScript 会对可能为 <code>null</code> 或 <code>undefined</code> 的变量进行类型检查，如果你尝试访问这些值的属性或方法，TypeScript 会报错：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error: Object is possibly &#39;null&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在这种情况下，使用非空断言操作符可以告诉 TypeScript 你确定 <code>user</code> 不为 <code>null</code>，这样就不会报错：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: Alice</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这里，<code>user!</code> 告诉 TypeScript 编译器：<strong>我确信 <code>user</code> 不是 <code>null</code></strong>。</p><h4 id="_2-2-用于-dom-元素" tabindex="-1">2.2 用于 DOM 元素 <a class="header-anchor" href="#_2-2-用于-dom-元素" aria-label="Permalink to &quot;2.2 用于 DOM 元素&quot;">​</a></h4><p>在与 DOM 操作交互时，通常通过 <code>document.getElementById()</code> 等方法获取元素，但这些方法可能返回 <code>null</code>。TypeScript 默认会警告你访问一个可能为 <code>null</code> 的元素。在这种情况下，非空断言可以用来绕过警告。</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submitButton&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;click&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Button clicked!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在这个例子中，<code>button!</code> 表示 <code>button</code> 一定不是 <code>null</code>。如果 <code>getElementById</code> 返回 <code>null</code>，这时会引发运行时错误，因此你要确保在使用非空断言时，变量确实会被正确赋值。</p><h4 id="_2-3-与函数返回值一起使用" tabindex="-1">2.3 与函数返回值一起使用 <a class="header-anchor" href="#_2-3-与函数返回值一起使用" aria-label="Permalink to &quot;2.3 与函数返回值一起使用&quot;">​</a></h4><p>在某些情况下，函数可能返回 <code>null</code> 或某些类型的值。你可以使用非空断言操作符来确保在访问返回值之前，变量不会是 <code>null</code> 或 <code>undefined</code>。</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: Bob</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这里，<code>user!</code> 表示你确信 <code>getUser()</code> 的返回值不会是 <code>null</code>。</p><h3 id="_3-非空断言操作符的风险" tabindex="-1">3. 非空断言操作符的风险 <a class="header-anchor" href="#_3-非空断言操作符的风险" aria-label="Permalink to &quot;3. 非空断言操作符的风险&quot;">​</a></h3><p>虽然非空断言操作符能够绕过 TypeScript 的类型检查，但它是一个危险的操作，因为它会禁用 TypeScript 对 <code>null</code> 或 <code>undefined</code> 的检查。如果你使用不当，可能会导致运行时错误。<strong>除非你完全确信某个变量不会为 <code>null</code> 或 <code>undefined</code>，否则不建议使用非空断言</strong>。</p><p>例如，如果我们错误地使用非空断言操作符：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 运行时错误：Cannot read property &#39;name&#39; of null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这会导致 <strong>运行时错误</strong>，因为 <code>user</code> 实际上是 <code>null</code>，而非空断言并不会阻止运行时的错误发生。</p><h3 id="_4-非空断言-vs-可选链" tabindex="-1">4. 非空断言 vs 可选链（<code>?.</code>） <a class="header-anchor" href="#_4-非空断言-vs-可选链" aria-label="Permalink to &quot;4. 非空断言 vs 可选链（\`?.\`）&quot;">​</a></h3><p>有时你可能希望在某个值是 <code>null</code> 或 <code>undefined</code> 时避免报错，可以使用 <strong>可选链操作符</strong>（<code>?.</code>）来进行安全访问，而不需要使用非空断言。</p><h4 id="可选链示例" tabindex="-1">可选链示例： <a class="header-anchor" href="#可选链示例" aria-label="Permalink to &quot;可选链示例：&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user?.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: undefined，而不是报错</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>?.</code> 会检查值是否为 <code>null</code> 或 <code>undefined</code>，如果是，则返回 <code>undefined</code>，而不是继续执行后续的操作。</p><h3 id="_5-总结" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h3><ul><li><strong>非空断言操作符（<code>!</code>）</strong> 用于告诉 TypeScript 编译器一个值不会是 <code>null</code> 或 <code>undefined</code>，从而绕过类型检查。</li><li>常用于访问可能为 <code>null</code> 的值，或者在 DOM 操作中避免类型检查。</li><li>使用时需要非常小心，确保值在访问时确实不为 <code>null</code>，否则可能会导致 <strong>运行时错误</strong>。</li><li>如果你希望更安全地处理 <code>null</code> 或 <code>undefined</code>，可以使用 <strong>可选链操作符（<code>?.</code>）</strong> 来避免直接访问潜在的 <code>null</code> 值。</li></ul>`,33))])}const b=n(d,[["render",r]]);export{F as __pageData,b as default};
