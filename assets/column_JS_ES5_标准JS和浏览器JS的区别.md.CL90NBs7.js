import{_ as t,c as r,aQ as e,o}from"./chunks/framework.Dx7Rg_PH.js";const J=JSON.parse('{"title":"标准JS和浏览器JS的区别","description":"","frontmatter":{},"headers":[],"relativePath":"column/JS/ES5/标准JS和浏览器JS的区别.md","filePath":"column/JS/ES5/标准JS和浏览器JS的区别.md"}'),p={name:"column/JS/ES5/标准JS和浏览器JS的区别.md"};function c(i,a,s,n,S,d){return o(),r("div",null,a[0]||(a[0]=[e('<h1 id="标准js和浏览器js的区别" tabindex="-1">标准JS和浏览器JS的区别 <a class="header-anchor" href="#标准js和浏览器js的区别" aria-label="Permalink to &quot;标准JS和浏览器JS的区别&quot;">​</a></h1><hr><p>标准<code> JavaScript</code>（也称为 ECMAScript）和浏览器 JavaScript 之间的主要区别在于它们的运行环境、特性和功能。以下是两者之间的一些关键差异：</p><h2 id="_1、标准-javascript-ecmascript" tabindex="-1">1、标准 JavaScript (ECMAScript) <a class="header-anchor" href="#_1、标准-javascript-ecmascript" aria-label="Permalink to &quot;1、标准 JavaScript (ECMAScript)&quot;">​</a></h2><p><strong>1.定义与规范：</strong></p><p>标准 JavaScript 是由 ECMA 国际组织制定的一套语言规范，称为 ECMAScript。 这个规范定义了 JavaScript 语言的核心语法、数据类型、操作符、语句、表达式等。</p><p><strong>2.运行环境：</strong></p><p>标准 JavaScript 不依赖于任何特定的运行环境。它可以在各种环境中运行，包括浏览器、Node.js、嵌入式系统等。 它关注的是语言本身的特性，而不是具体的实现细节。</p><p><strong>3.核心功能：</strong></p><p>包括变量声明、函数、控制结构（如 if-else, for, while）、对象、数组、字符串处理、正则表达式等。</p><p>提供了一些内置对象，如 <code>Object, Array, String, Number, Date, Math</code> 等。</p><p><strong>4.版本更新：</strong> ECMAScript 规范会定期更新，引入新的语言特性和改进。例如，ES6/ES2015 引入了类、模块、箭头函数等新特性。</p><h2 id="_2、浏览器-javascript" tabindex="-1">2、浏览器 JavaScript <a class="header-anchor" href="#_2、浏览器-javascript" aria-label="Permalink to &quot;2、浏览器 JavaScript&quot;">​</a></h2><p><strong>1.运行环境：</strong> 浏览器 JavaScript 是在 Web 浏览器中运行的 JavaScript。 它不仅包含 ECMAScript 规范中的所有内容，还包括一些浏览器特有的 API 和功能。</p><p><strong>2.DOM 操作：</strong></p><p>浏览器 JavaScript 可以直接操作文档对象模型（DOM），允许开发者动态地修改网页内容、样式和结构。 通过 document 对象，可以访问和操作 HTML 元素，监听和触发事件。</p><p><strong>3.BOM (浏览器对象模型)：</strong> 浏览器 JavaScript 提供了 BOM，允许开发者与浏览器窗口进行交互，例如控制窗口大小、位置，管理历史记录，处理弹出对话框等。 通过 window 对象，可以访问浏览器的各种功能，如定时器 (<code>setTimeout, setInterval</code>)、存储 (<code>localStorage, sessionStorage</code>)、地理位置、网络请求等。</p><p><strong>4.网络请求：</strong></p><p>浏览器 JavaScript 可以使用 <code>XMLHttpRequest</code> 或更现代的 <code>fetch API</code> 来发起 HTTP 请求，与服务器进行通信。 这使得前端应用能够进行异步数据加载和更新，从而提供更好的用户体验。</p><p><strong>5.多媒体支持：</strong></p><p>浏览器 JavaScript 可以控制音频和视频元素，提供播放、暂停、音量控制等功能。 通过 HTMLMediaElement 接口，可以访问和控制 <code>&lt;audio&gt;</code> 和 <code>&lt;video&gt; </code>元素。</p><p><strong>6.Canvas 和 WebGL：</strong></p><p>浏览器 JavaScript 支持 Canvas API，允许开发者绘制图形、动画和其他视觉效果。</p><p><strong>7.WebGL API</strong></p><p>提供了硬件加速的 3D 图形渲染能力。</p><p><strong>8.其他浏览器特定的功能：</strong> 地理位置 API (navigator.geolocation) 通知 API (Notification) 文件 API (File, Blob) 媒体查询 (matchMedia) 存储 API (IndexedDB, Web Storage)</p><h2 id="_3、总结" tabindex="-1">3、总结 <a class="header-anchor" href="#_3、总结" aria-label="Permalink to &quot;3、总结&quot;">​</a></h2><p>标准 <code>JavaScript</code> 关注的是语言本身的核心特性和语法。</p><p>浏览器 JavaScript 在标准 JavaScript 的基础上增加了大量的 API 和功能，用于与浏览器环境进行交互。</p>',29)]))}const g=t(p,[["render",c]]);export{J as __pageData,g as default};
