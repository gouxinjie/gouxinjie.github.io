import{_ as i,c as a,o as n,aQ as t}from"./chunks/framework.ZszFOjJI.js";const l="/assets/xss-1.BmAhMgYj.png",e="/assets/xss-2.C_jhIiv1.png",p="/assets/xss-5.BbdXsIir.png",h="/assets/xss-3.9eWuIz80.png",k="/assets/xss-4.O0WYAKOB.png",F=JSON.parse('{"title":"前端 XSS 攻击：原理、危害与防御","description":"","frontmatter":{},"headers":[],"relativePath":"column/Network/网络基础/XSS脚本攻击.md","filePath":"column/Network/网络基础/XSS脚本攻击.md"}'),r={name:"column/Network/网络基础/XSS脚本攻击.md"};function d(E,s,o,c,g,y){return n(),a("div",null,[...s[0]||(s[0]=[t(`<h1 id="前端-xss-攻击-原理、危害与防御" tabindex="-1">前端 XSS 攻击：原理、危害与防御 <a class="header-anchor" href="#前端-xss-攻击-原理、危害与防御" aria-label="Permalink to &quot;前端 XSS 攻击：原理、危害与防御&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#什么是-xss-攻击">什么是 XSS 攻击？</a></li><li><a href="#xss-攻击的类型">XSS 攻击的类型</a><ul><li><a href="#_1-反射型-xss-非持久型">1. 反射型 XSS（非持久型）</a></li><li><a href="#_2-存储型-xss-持久型">2. 存储型 XSS（持久型）</a></li><li><a href="#_3-dom-型-xss">3. DOM 型 XSS</a></li></ul></li><li><a href="#防御-xss-攻击的措施">防御 XSS 攻击的措施</a><ul><li><a href="#_1-输入验证和过滤">1. 输入验证和过滤</a></li><li><a href="#_2-输出编码">2. 输出编码</a></li><li><a href="#_3-使用安全的-api">3. 使用安全的 API</a></li><li><a href="#_4-内容安全策略-csp">4. 内容安全策略（CSP）</a></li><li><a href="#_5-httponly-和-secure-cookie-标记">5. HttpOnly 和 Secure Cookie 标记</a></li><li><a href="#_6-现代框架的内置防护">6. 现代框架的内置防护</a></li></ul></li></ul></nav><h2 id="什么是-xss-攻击" tabindex="-1">什么是 XSS 攻击？ <a class="header-anchor" href="#什么是-xss-攻击" aria-label="Permalink to &quot;什么是 XSS 攻击？&quot;">​</a></h2><p><code>XSS（Cross-Site Scripting，跨站脚本攻击）</code>是一种常见的 <code>Web</code> 安全漏洞，攻击者通过在网页中注入恶意脚本，当其他用户浏览该网页时，这些脚本会在用户的浏览器中执行，从而达到攻击目的。</p><p>有趣的是，虽然缩写是 XSS 而不是 CSS，这是为了避免与层叠样式表(CSS)的缩写混淆。</p><div class="tip custom-block"><p class="custom-block-title">XSS 攻击的危害</p><ol><li><strong>窃取用户 Cookie</strong>：攻击者可以获取用户的会话 Cookie，从而冒充用户登录</li><li><strong>钓鱼攻击</strong>：伪造登录表单，诱骗用户输入敏感信息</li><li><strong>键盘记录</strong>：记录用户的键盘输入，获取密码等敏感信息</li><li><strong>篡改页面内容</strong>：修改网页显示内容，传播虚假信息</li><li><strong>发起其他攻击</strong>：利用受害者身份发起 CSRF 攻击等</li></ol></div><h2 id="xss-攻击的类型" tabindex="-1">XSS 攻击的类型 <a class="header-anchor" href="#xss-攻击的类型" aria-label="Permalink to &quot;XSS 攻击的类型&quot;">​</a></h2><h3 id="_1-反射型-xss-非持久型" tabindex="-1">1. 反射型 XSS（非持久型） <a class="header-anchor" href="#_1-反射型-xss-非持久型" aria-label="Permalink to &quot;1. 反射型 XSS（非持久型）&quot;">​</a></h3><p><code>反射型XSS</code> 是最常见的类型，恶意脚本作为请求的一部分发送到服务器，然后服务器将恶意脚本&quot;反射&quot;回响应中，在用户的浏览器中执行。</p><p><strong>典型场景</strong>：</p><ul><li>攻击者构造一个包含恶意脚本的 URL</li><li>诱骗用户点击该 URL</li><li>服务器将恶意脚本返回并在用户浏览器执行</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 恶意URL示例</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//example.com/search?query=&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>靶场练习</strong></p><p><strong>1，浏览器输入</strong> ：<code>http://test.ctf8.com/level1.php?name=test</code>, test 字符串会显示到网页上面，如下图：</p><p><img src="`+l+'" alt=""></p><p><strong>2，浏览器输入</strong> ：<code>http://test.ctf8.com/level1.php?name&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;</code>,会发现直接触发了<code>alert</code>弹窗,如下图：</p><p><img src="'+e+'" alt=""></p><h3 id="_2-存储型-xss-持久型" tabindex="-1">2. 存储型 XSS（持久型） <a class="header-anchor" href="#_2-存储型-xss-持久型" aria-label="Permalink to &quot;2. 存储型 XSS（持久型）&quot;">​</a></h3><p>存储型<code> XSS</code> 更为危险，恶意脚本被永久存储在目标服务器上（如数据库），当其他用户访问包含该脚本的页面时，脚本会被执行。</p><p><strong>典型场景</strong>：</p><ul><li>攻击者在论坛评论中提交恶意脚本</li><li>服务器将评论存储到数据库</li><li>其他用户查看该评论时，恶意脚本被执行</li></ul><p><strong>如图：</strong></p><p><img src="'+p+`" alt=""></p><h3 id="_3-dom-型-xss" tabindex="-1">3. DOM 型 XSS <a class="header-anchor" href="#_3-dom-型-xss" aria-label="Permalink to &quot;3. DOM 型 XSS&quot;">​</a></h3><p><code>DOM 型 XSS</code> 是完全在客户端发生的攻击，不涉及服务器。恶意脚本通过修改页面的 DOM 结构来执行。</p><p><strong>第一种注入：</strong></p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 漏洞代码示例 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">textarea</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font-size: 24px;&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;textarea&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">textarea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">br</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;btn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;提交&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 点击提交按钮 测试DOMxss漏洞</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> btn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;btn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;click&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> textareaValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;textarea&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        document.body.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> textareaValue;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>点击提交按钮，会发现输入的内容会直接显示在页面上，如下图：</p><p><img src="`+h+'" alt=""></p><p><strong>第二种注入：(直接注入脚本)</strong></p><p>如下：直接在输入框中输入脚本，点击提交按钮，会发现脚本直接执行了。</p><p><img src="'+k+`" alt=""></p><p><strong>解决办法</strong></p><p>1，对输入内容的特殊字符进行转义，例如：将 <code>&lt;</code> 转义为 <code>&amp;lt;</code>，将 <code>&gt;</code> 转义为 <code>&amp;gt;</code> 等。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 转义HTML特殊字符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;click&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> textareaValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;textarea&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).value;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> safeValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> textareaValue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&amp;lt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&amp;gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注意这行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.body.innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> safeValue;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>2，使用第三方库 xss 进行处理 xss 攻击</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 引入xss库</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xss </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 清理HTML字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dirtyHTML</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&lt;script&gt;alert(&quot;XSS&quot;);&lt;/script&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cleanHTML</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dirtyHTML);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cleanHTML); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：&amp;lt;script&amp;gt;alert(&quot;XSS&quot;);&amp;lt;/script&amp;gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="防御-xss-攻击的措施" tabindex="-1">防御 XSS 攻击的措施 <a class="header-anchor" href="#防御-xss-攻击的措施" aria-label="Permalink to &quot;防御 XSS 攻击的措施&quot;">​</a></h2><h3 id="_1-输入验证和过滤" tabindex="-1">1. 输入验证和过滤 <a class="header-anchor" href="#_1-输入验证和过滤" aria-label="Permalink to &quot;1. 输入验证和过滤&quot;">​</a></h3><p>对所有用户输入进行严格的验证和过滤：</p><ul><li>只允许预期的字符集（如仅字母数字）</li><li>使用白名单而非黑名单策略</li><li>对特殊字符进行转义</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 转义HTML特殊字符</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> escapeHtml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">unsafe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unsafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&amp;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&amp;amp;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&amp;lt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&amp;gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&amp;quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&amp;#039;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2-输出编码" tabindex="-1">2. 输出编码 <a class="header-anchor" href="#_2-输出编码" aria-label="Permalink to &quot;2. 输出编码&quot;">​</a></h3><p>根据输出上下文使用适当的编码：</p><ul><li>HTML 实体编码：<code>&amp; -&gt; &amp;amp;</code>, <code>&lt; -&gt; &amp;lt;</code>等</li><li>JavaScript 编码：对动态插入到 JS 代码中的内容进行编码</li><li>URL 编码：对 URL 参数进行编码</li></ul><h3 id="_3-使用安全的-api" tabindex="-1">3. 使用安全的 API <a class="header-anchor" href="#_3-使用安全的-api" aria-label="Permalink to &quot;3. 使用安全的 API&quot;">​</a></h3><p>避免使用不安全的 API：</p><ul><li>避免使用<code>innerHTML</code>，改用<code>textContent</code></li><li>避免使用<code>eval()</code>、<code>setTimeout(string)</code>等可以执行字符串作为代码的函数</li></ul><h3 id="_4-内容安全策略-csp" tabindex="-1">4. 内容安全策略（CSP） <a class="header-anchor" href="#_4-内容安全策略-csp" aria-label="Permalink to &quot;4. 内容安全策略（CSP）&quot;">​</a></h3><p>CSP 是一种强大的防御机制，通过 HTTP 头<code>Content-Security-Policy</code>定义哪些资源可以被加载和执行。</p><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Security-Policy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> default-src &#39;self&#39;; script-src &#39;self&#39; https://trusted.cdn.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_5-httponly-和-secure-cookie-标记" tabindex="-1">5. HttpOnly 和 Secure Cookie 标记 <a class="header-anchor" href="#_5-httponly-和-secure-cookie-标记" aria-label="Permalink to &quot;5. HttpOnly 和 Secure Cookie 标记&quot;">​</a></h3><p>设置 Cookie 时使用 HttpOnly 和 Secure 标记：</p><ul><li><code>HttpOnly</code>：防止 JavaScript 访问 Cookie</li><li><code>Secure</code>：仅通过 HTTPS 传输 Cookie</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: sessionid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12345</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; HttpOnly; Secure</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_6-现代框架的内置防护" tabindex="-1">6. 现代框架的内置防护 <a class="header-anchor" href="#_6-现代框架的内置防护" aria-label="Permalink to &quot;6. 现代框架的内置防护&quot;">​</a></h3><p>现代前端框架如 React、Vue、Angular 等内置了 XSS 防护机制：</p><ul><li>React 自动转义所有嵌入 JSX 的值</li><li>Vue 的模板语法也自动转义内容</li><li>但要注意使用<code>dangerouslySetInnerHTML</code>或<code>v-html</code>时的风险</li></ul>`,58)])])}const b=i(r,[["render",d]]);export{F as __pageData,b as default};
