import{_ as l,C as n,c as e,o as h,j as a,G as t,aQ as p,a as r}from"./chunks/framework.DEi4YP2n.js";const o="/assets/shallowRef-1.HP1UPnUF.gif",y=JSON.parse('{"title":"shallowRef：浅层响应式引用","description":"","frontmatter":{},"headers":[],"relativePath":"column/Vue/响应式API进阶/shallowRef.md","filePath":"column/Vue/响应式API进阶/shallowRef.md","lastUpdated":1760343849000}'),k={name:"column/Vue/响应式API进阶/shallowRef.md"};function d(c,s,E,g,u,f){const i=n("ArticleMetadata");return h(),e("div",null,[s[0]||(s[0]=a("h1",{id:"shallowref-浅层响应式引用",tabindex:"-1"},[r("shallowRef：浅层响应式引用 "),a("a",{class:"header-anchor",href:"#shallowref-浅层响应式引用","aria-label":'Permalink to "shallowRef：浅层响应式引用"'},"​")],-1)),t(i),s[1]||(s[1]=p(`<nav class="table-of-contents"><ul><li><a href="#_1-shallowref-的作用">1. shallowRef 的作用</a></li><li><a href="#_2-shallowref-的基本用法">2. shallowRef 的基本用法</a><ul><li><a href="#shallowref-的行为分析">shallowRef 的行为分析</a></li></ul></li><li><a href="#_3-shallowref-的适用场景">3. shallowRef 的适用场景</a></li><li><a href="#_4-shallowref-的总结">4. shallowRef 的总结</a></li></ul></nav><p>在 <strong>Vue 3</strong> 中，<code>shallowRef</code> 是一个新的响应式工具，它与 <code>ref</code> 有些相似，但有一个重要的区别：<code>shallowRef</code> 仅对 <strong>引用类型</strong>（如对象、数组等）进行 <strong>浅层响应式</strong> 处理，而不是对其深层次的属性进行响应式包装。</p><h2 id="_1-shallowref-的作用" tabindex="-1">1. <code>shallowRef</code> 的作用 <a class="header-anchor" href="#_1-shallowref-的作用" aria-label="Permalink to &quot;1. \`shallowRef\` 的作用&quot;">​</a></h2><p><code>shallowRef</code> 用于创建一个 <strong>响应式引用</strong>，但是它 <strong>不会</strong> 对引用类型的数据进行深度响应式处理。换句话说，如果你将一个对象或数组传递给 <code>shallowRef</code>，它会将这个引用变为响应式，但 <strong>对象或数组的内部属性不会被代理为响应式</strong>，只有引用本身是响应式的。也就是说只有对 <code>.value </code>的访问是响应式的。</p><h2 id="_2-shallowref-的基本用法" tabindex="-1">2. <code>shallowRef</code> 的基本用法 <a class="header-anchor" href="#_2-shallowref-的基本用法" aria-label="Permalink to &quot;2. \`shallowRef\` 的基本用法&quot;">​</a></h2><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ shallowObj.count }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;updateShallowRef&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;强行修改shallowRef&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { shallowRef } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 shallowRef 创建一个响应式引用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> shallowObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shallowRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shallowObj.value.count); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改引用对象本身，会触发更新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shallowObj.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这是响应式的</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shallowObj.value.count); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义一个方法来强行修改 shallowRef</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateShallowRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  shallowObj.value.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这个修改不会触发更新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;强行修改shallowRef后:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, shallowObj.value.count); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 2，但视图不会更新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p><strong>如图所示：</strong></p><p><img src="`+o+'" alt="shallowRef-1" loading="lazy"></p><p>可以看到 <code>updateShallowRef</code> 方法 强行修改 <code>shallowRef</code> ,打印变为 2，但是视图不会更新。</p><h3 id="shallowref-的行为分析" tabindex="-1"><strong><code>shallowRef</code> 的行为分析</strong> <a class="header-anchor" href="#shallowref-的行为分析" aria-label="Permalink to &quot;**`shallowRef` 的行为分析**&quot;">​</a></h3><ol><li><p><strong>创建响应式引用</strong>：与 <code>ref</code> 一样，<code>shallowRef</code> 也返回一个响应式引用，它包含一个 <code>value</code> 属性，指向实际的数据。</p></li><li><p><strong>浅层响应式</strong>：<code>shallowRef</code> 只会让对象本身成为响应式，<strong>不会递归处理对象内部的属性</strong>。例如，如果你创建一个对象并将它传递给 <code>shallowRef</code>，它的顶层属性会变成响应式的，但是对象内部的嵌套属性不会变为响应式。</p></li><li><p><strong>修改引用触发更新</strong>：如果你直接修改 <code>shallowRef</code> 引用的对象（例如替换 <code>shallowObj.value</code>），视图会更新，因为引用本身是响应式的。</p></li><li><p><strong>修改对象的属性不触发更新</strong>：如果你直接修改对象的内部属性（例如 <code>shallowObj.value.count = 2</code>），<strong>视图不会更新</strong>，因为 Vue 只会追踪引用的变化，而不是对象内部属性的变化。</p></li></ol><h2 id="_3-shallowref-的适用场景" tabindex="-1">3. <code>shallowRef</code> 的适用场景 <a class="header-anchor" href="#_3-shallowref-的适用场景" aria-label="Permalink to &quot;3. `shallowRef` 的适用场景&quot;">​</a></h2><h4 id="_1-性能优化" tabindex="-1">1. <strong>性能优化</strong> <a class="header-anchor" href="#_1-性能优化" aria-label="Permalink to &quot;1. **性能优化**&quot;">​</a></h4><p>当你只关心对象本身的变化，而不关心其内部属性时，使用 <code>shallowRef</code> 可以减少不必要的响应式代理，从而提升性能。</p><h4 id="_2-不需要深度响应式的场景" tabindex="-1">2. <strong>不需要深度响应式的场景</strong> <a class="header-anchor" href="#_2-不需要深度响应式的场景" aria-label="Permalink to &quot;2. **不需要深度响应式的场景**&quot;">​</a></h4><p>如果你只关心某个对象的整体变化，而不关心它的每个属性变化，可以使用 <code>shallowRef</code>。例如，当你使用 Vue 的响应式对象来管理复杂数据结构时，只需要监听对象的引用变化而不需要关心每个嵌套的属性变化。</p><h2 id="_4-shallowref-的总结" tabindex="-1">4. <code>shallowRef</code> 的总结 <a class="header-anchor" href="#_4-shallowref-的总结" aria-label="Permalink to &quot;4. `shallowRef` 的总结&quot;">​</a></h2><ul><li><code>shallowRef</code> 用于创建一个 <strong>浅层响应式引用</strong>，只有对象的引用是响应式的，而其内部属性不会被代理为响应式。</li><li><code>shallowRef</code> 适用于只关心对象整体变化的场景，而不需要对其内部属性进行深度代理。</li><li>与 <code>ref</code> 和 <code>reactive</code> 比较，<code>shallowRef</code> 是一种 <strong>优化手段</strong>，减少不必要的性能开销。</li></ul>',18))])}const w=l(k,[["render",d]]);export{y as __pageData,w as default};
