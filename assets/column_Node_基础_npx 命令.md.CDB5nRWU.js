import{_ as n,C as e,c as t,o as l,j as a,G as p,aQ as h,a as r}from"./chunks/framework.DEi4YP2n.js";const F=JSON.parse('{"title":"npx 命令","description":"","frontmatter":{},"headers":[],"relativePath":"column/Node/基础/npx 命令.md","filePath":"column/Node/基础/npx 命令.md","lastUpdated":1758527591000}'),d={name:"column/Node/基础/npx 命令.md"};function o(k,s,c,g,b,u){const i=e("ArticleMetadata");return l(),t("div",null,[s[0]||(s[0]=a("h1",{id:"npx-命令",tabindex:"-1"},[r("npx 命令 "),a("a",{class:"header-anchor",href:"#npx-命令","aria-label":'Permalink to "npx 命令"'},"​")],-1)),p(i),s[1]||(s[1]=h(`<p><code>npx</code> 是 npm 5.2+ 版本内置的一个工具，用于<strong>直接运行 Node.js 包中的可执行文件</strong>，无需先全局或局部安装包。它的设计初衷是简化包的临时使用和项目依赖管理。以下是详细解析：</p><hr><h3 id="_1-核心功能" tabindex="-1"><strong>1. 核心功能</strong> <a class="header-anchor" href="#_1-核心功能" aria-label="Permalink to &quot;**1. 核心功能**&quot;">​</a></h3><ul><li><strong>直接运行本地/远程的 npm 包</strong>：无需全局安装即可执行命令。</li><li><strong>自动查找依赖</strong>：优先从本地 <code>node_modules/.bin</code> 或项目依赖中查找命令。</li><li><strong>临时安装并运行</strong>：如果包未安装，自动从 npm 仓库下载（运行后删除）。</li><li><strong>执行 GitHub/URL 代码</strong>：直接运行远程脚本或仓库代码。</li></ul><hr><h3 id="_2-基本用法" tabindex="-1"><strong>2. 基本用法</strong> <a class="header-anchor" href="#_2-基本用法" aria-label="Permalink to &quot;**2. 基本用法**&quot;">​</a></h3><h4 id="运行本地已安装的包" tabindex="-1"><strong>运行本地已安装的包</strong> <a class="header-anchor" href="#运行本地已安装的包" aria-label="Permalink to &quot;**运行本地已安装的包**&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">package-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [args]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 示例：运行本地安装的 eslint</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="临时运行未安装的包" tabindex="-1"><strong>临时运行未安装的包</strong> <a class="header-anchor" href="#临时运行未安装的包" aria-label="Permalink to &quot;**临时运行未安装的包**&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 临时安装 create-react-app 并执行，完成后删除</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-react-app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-app</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="指定包版本" tabindex="-1"><strong>指定包版本</strong> <a class="header-anchor" href="#指定包版本" aria-label="Permalink to &quot;**指定包版本**&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">package-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">versio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [args]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 示例：使用特定版本的 create-react-app</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-react-app@5.0.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-app</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><hr><h3 id="_3-与-npm-run-的区别" tabindex="-1"><strong>3. 与 <code>npm run</code> 的区别</strong> <a class="header-anchor" href="#_3-与-npm-run-的区别" aria-label="Permalink to &quot;**3. 与 \`npm run\` 的区别**&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>对比项</strong></th><th><code>npx</code></th><th><code>npm run</code></th></tr></thead><tbody><tr><td><strong>安装要求</strong></td><td>可临时安装包</td><td>必须提前安装包（写入 <code>package.json</code>）</td></tr><tr><td><strong>作用范围</strong></td><td>可运行任意 npm 包</td><td>仅运行 <code>package.json</code> 中 <code>scripts</code> 定义的命令</td></tr><tr><td><strong>使用场景</strong></td><td>一次性命令（如脚手架工具）</td><td>项目标准化脚本（如构建、测试）</td></tr><tr><td><strong>路径解析</strong></td><td>自动查找全局和本地 <code>node_modules</code></td><td>仅限本地 <code>node_modules/.bin</code></td></tr></tbody></table><hr><h3 id="_4-常见使用场景" tabindex="-1"><strong>4. 常见使用场景</strong> <a class="header-anchor" href="#_4-常见使用场景" aria-label="Permalink to &quot;**4. 常见使用场景**&quot;">​</a></h3><h4 id="场景-1-快速调用脚手架工具" tabindex="-1"><strong>场景 1：快速调用脚手架工具</strong> <a class="header-anchor" href="#场景-1-快速调用脚手架工具" aria-label="Permalink to &quot;**场景 1：快速调用脚手架工具**&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 无需全局安装，直接创建 React 项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-react-app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-app</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行后不会残留全局包</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="场景-2-运行项目依赖中的-cli" tabindex="-1"><strong>场景 2：运行项目依赖中的 CLI</strong> <a class="header-anchor" href="#场景-2-运行项目依赖中的-cli" aria-label="Permalink to &quot;**场景 2：运行项目依赖中的 CLI**&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 即使未全局安装，也能运行项目内的 webpack</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webpack</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webpack.config.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="场景-3-执行远程代码" tabindex="-1"><strong>场景 3：执行远程代码</strong> <a class="header-anchor" href="#场景-3-执行远程代码" aria-label="Permalink to &quot;**场景 3：执行远程代码**&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行 GitHub Gist 中的脚本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://gist.github.com/username/1234567</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="场景-4-切换包版本测试" tabindex="-1"><strong>场景 4：切换包版本测试</strong> <a class="header-anchor" href="#场景-4-切换包版本测试" aria-label="Permalink to &quot;**场景 4：切换包版本测试**&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 临时使用旧版本工具</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prettier@2.8.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --write</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><hr><h3 id="_5-高级用法" tabindex="-1"><strong>5. 高级用法</strong> <a class="header-anchor" href="#_5-高级用法" aria-label="Permalink to &quot;**5. 高级用法**&quot;">​</a></h3><h4 id="强制使用本地包-避免下载" tabindex="-1"><strong>强制使用本地包（避免下载）</strong> <a class="header-anchor" href="#强制使用本地包-避免下载" aria-label="Permalink to &quot;**强制使用本地包（避免下载）**&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-install</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">package-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 如果本地不存在则报错</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="忽略缓存-重新下载" tabindex="-1"><strong>忽略缓存（重新下载）</strong> <a class="header-anchor" href="#忽略缓存-重新下载" aria-label="Permalink to &quot;**忽略缓存（重新下载）**&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ignore-existing</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-react-app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-app</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="指定-node-js-版本运行" tabindex="-1"><strong>指定 Node.js 版本运行</strong> <a class="header-anchor" href="#指定-node-js-版本运行" aria-label="Permalink to &quot;**指定 Node.js 版本运行**&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node@16</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 使用 Node 16 执行命令</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="并行执行多个包" tabindex="-1"><strong>并行执行多个包</strong> <a class="header-anchor" href="#并行执行多个包" aria-label="Permalink to &quot;**并行执行多个包**&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lodash</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> moment</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;console.log(_.VERSION, moment().format())&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><h3 id="_6-工作原理" tabindex="-1"><strong>6. 工作原理</strong> <a class="header-anchor" href="#_6-工作原理" aria-label="Permalink to &quot;**6. 工作原理**&quot;">​</a></h3><ol><li><strong>查找路径</strong>： <ul><li>检查本地 <code>node_modules/.bin</code> 和全局 <code>PATH</code> 中是否存在目标命令。</li></ul></li><li><strong>临时安装</strong>： <ul><li>如果未找到，从 npm 仓库下载包到临时目录（通常位于 <code>~/.npm/_npx</code>）。</li></ul></li><li><strong>执行后清理</strong>： <ul><li>运行完成后，自动删除临时安装的包（除非使用 <code>--no-clean</code> 参数）。</li></ul></li></ol>`,38))])}const y=n(d,[["render",o]]);export{F as __pageData,y as default};
