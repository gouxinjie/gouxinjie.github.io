import{_ as n,C as t,c as e,o as l,j as i,G as p,aQ as r,a as d}from"./chunks/framework.DEi4YP2n.js";const h="/assets/created.C7_PE-al.png",y=JSON.parse('{"title":"vue 的生命周期和执行顺序","description":"","frontmatter":{},"headers":[],"relativePath":"column/Vue/基础/生命周期.md","filePath":"column/Vue/基础/生命周期.md","lastUpdated":1760343849000}'),o={name:"column/Vue/基础/生命周期.md"};function k(c,s,g,E,u,b){const a=t("ArticleMetadata");return l(),e("div",null,[s[0]||(s[0]=i("h1",{id:"vue-的生命周期和执行顺序",tabindex:"-1"},[d("vue 的生命周期和执行顺序 "),i("a",{class:"header-anchor",href:"#vue-的生命周期和执行顺序","aria-label":'Permalink to "vue 的生命周期和执行顺序"'},"​")],-1)),p(a),s[1]||(s[1]=r(`<nav class="table-of-contents"><ul><li><a href="#一、options-api-中的生命周期钩子">一、Options API 中的生命周期钩子</a></li><li><a href="#二、composition-api-中的生命周期钩子">二、Composition API 中的生命周期钩子</a></li><li><a href="#三、vue-3-生命周期钩子的总结表">三、Vue 3 生命周期钩子的总结表</a></li><li><a href="#四、composition-api-生命周期钩子的使用示例">四、Composition API 生命周期钩子的使用示例</a></li></ul></nav><p>在 <strong>Vue 3</strong> 中，生命周期钩子函数有一些重要的变化，尤其是随着 <strong>Composition API</strong> 的引入，生命周期钩子的使用方式也发生了改变。下面是 <strong>Vue 3</strong> 中生命周期的总结，包括 <strong>Options API</strong> 和 <strong>Composition API</strong> 下的生命周期钩子。</p><h3 id="一、options-api-中的生命周期钩子" tabindex="-1">一、<strong>Options API</strong> 中的生命周期钩子 <a class="header-anchor" href="#一、options-api-中的生命周期钩子" aria-label="Permalink to &quot;一、**Options API** 中的生命周期钩子&quot;">​</a></h3><p>在 <strong>Vue 2.x</strong> 和 <strong>Vue 3</strong> 的 <strong>Options API</strong> 中，生命周期钩子的使用方式基本保持一致。Vue 的生命周期可以分为三个阶段：<strong>创建阶段</strong>、<strong>更新阶段</strong>、<strong>销毁阶段</strong>。</p><h4 id="_1-创建阶段" tabindex="-1">1. <strong>创建阶段</strong> <a class="header-anchor" href="#_1-创建阶段" aria-label="Permalink to &quot;1. **创建阶段**&quot;">​</a></h4><ul><li><code>beforeCreate</code>：在组件实例被创建之前，数据、事件和侦听器都没有初始化。这个钩子非常早期，通常不常用。</li><li><code>created</code>：在组件实例创建后，数据和事件已经初始化，然而，DOM 还没有渲染。你可以在此进行数据处理、发起 API 请求等操作。</li></ul><h4 id="_2-挂载阶段" tabindex="-1">2. <strong>挂载阶段</strong> <a class="header-anchor" href="#_2-挂载阶段" aria-label="Permalink to &quot;2. **挂载阶段**&quot;">​</a></h4><ul><li><code>beforeMount</code>：在模板编译、DOM 渲染之前调用，这时虚拟 DOM 已经创建，但还没有渲染到实际 DOM 上。</li><li><code>mounted</code>：当组件挂载到真实 DOM 后调用。在这里可以访问到组件的实际 DOM 元素，适合进行初始化工作，比如第三方库的集成。</li></ul><h4 id="_3-更新阶段" tabindex="-1">3. <strong>更新阶段</strong> <a class="header-anchor" href="#_3-更新阶段" aria-label="Permalink to &quot;3. **更新阶段**&quot;">​</a></h4><ul><li><code>beforeUpdate</code>：当数据更新后、视图渲染之前调用。此时数据已经变化，但视图尚未更新。</li><li><code>updated</code>：当视图更新完毕后调用。在这个钩子中，你可以进行 DOM 操作，但不推荐在此修改组件的数据，以避免引起不必要的性能损耗或无限更新。</li></ul><h4 id="_4-销毁阶段" tabindex="-1">4. <strong>销毁阶段</strong> <a class="header-anchor" href="#_4-销毁阶段" aria-label="Permalink to &quot;4. **销毁阶段**&quot;">​</a></h4><ul><li><code>beforeUnmount</code>：组件实例销毁之前调用，适合进行一些清理操作，例如移除事件监听器、取消定时器等。</li><li><code>unmounted</code>：组件销毁后调用，适合进行一些销毁后的清理工作。</li></ul><h4 id="_5-错误捕获阶段" tabindex="-1">5. <strong>错误捕获阶段</strong> <a class="header-anchor" href="#_5-错误捕获阶段" aria-label="Permalink to &quot;5. **错误捕获阶段**&quot;">​</a></h4><ul><li><code>errorCaptured</code>：在组件的任何地方发生错误时，这个钩子会被调用，可以捕获错误并处理错误，通常用于全局错误处理。</li></ul><p><strong>表格如下：</strong></p><table tabindex="0"><thead><tr><th>序号</th><th>生命周期</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>beforecreate</code>创建前</td><td>vue 实例初始化阶段，不可以访问 data,methods； 此时打印出的 this 是 undefined；</td></tr><tr><td>2</td><td><code>created</code>创建后</td><td>vue 实例初始化完成，可以访问 data，methods，但是节点尚未挂载，不能获取 dom 节点；</td></tr><tr><td>3</td><td><code>beforeMount</code>挂载前</td><td>实际上与 created 阶段类似，同样的节点尚未挂载，此时模板已经编译完成，但还没有被渲染至页面中（即为虚拟 dom 加载为真实 dom）注意的是这是在视图渲染前最后一次可以更改数据的机会，不会触发其他的钩子函数；</td></tr><tr><td>4</td><td><code>mounted</code>挂载完成</td><td>这个阶段说说明模板已经被渲染成真实 DOM，实例已经被完全创建好了；</td></tr><tr><td>5</td><td><code>beforeUpdate</code>更新前</td><td>data 里面的数据改动会触发 vue 的响应式数据更新，也就是对比真实 dom 进行渲染的过程；</td></tr><tr><td>6</td><td><code>updated</code>更新完成</td><td>data 中的数据更新完成，dom 节点替换完成 ；</td></tr><tr><td>7</td><td><code>activited</code></td><td>在组件被激活时调⽤（使用了 <code>&lt;keep-alive&gt;</code> 的情况下）；</td></tr><tr><td>8</td><td><code>deactivated</code></td><td>在组件被销毁时调⽤（使用了 <code>&lt;keep-alive&gt;</code> 的情况下）；</td></tr><tr><td>9</td><td><code>beforeDestroy</code>销毁前</td><td>销毁前执行（$destroy 方法被调用的时候就会执行）,一般在这里善后：清除计时器、监听等；</td></tr><tr><td>10</td><td><code>destroyed</code>销毁后</td><td>销毁后 （Dom 元素存在，只是不再受 vue 控制）,卸载 watcher，事件监听，子组件；</td></tr></tbody></table><p><strong>父子组件生命周期执行顺序</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">父beforeCreate</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">父created</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">父beforeMount</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">子beforeCreate</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">子created</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">子beforeMount</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">子mounted</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">父mounted</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>验证如下图</code>：</p><p><img src="`+h+`" alt="在这里插入图片描述" width="80%" loading="lazy"></p><p><strong>更新过程</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">父beforeUpdate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">子beforeUpdate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">子updated</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">父updated</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>销毁过程</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">父beforeDestroy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">子beforeDestroy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">子destroyed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">父destroyed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>keep-alive</code>可以实现组件缓存，当组件切换时不会对当前组件进行卸载。</p><p><strong>使用 keepAlive 后生命周期变化（重要）：</strong></p><p>首次进入缓存页面：beforeRouteEnter --&gt; created --&gt; mounted --&gt; activated --&gt; deactivated<br> 再次进入缓存页面：beforeRouteEnter --&gt; activated --&gt; deactivated</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>配置了 <code>keepAlive</code> 的页面，在再次进入时不会重新渲染（第一次进来时会触发所有钩子函数），该页面内的组件同理不会再次渲染。<br> 而这可能会导致该组件内的相关操作（那些每次都需要重新渲染页面的操作：如父子组件间的传值）不再生效。 这一点可能会导致一些莫名其妙而又无从查证的 bug；</p></div><h3 id="二、composition-api-中的生命周期钩子" tabindex="-1">二、<strong>Composition API</strong> 中的生命周期钩子 <a class="header-anchor" href="#二、composition-api-中的生命周期钩子" aria-label="Permalink to &quot;二、**Composition API** 中的生命周期钩子&quot;">​</a></h3><p>在 <strong>Vue 3</strong> 中引入了 <strong>Composition API</strong>，这使得生命周期钩子不再直接作为组件选项的一部分，而是通过 <code>onXXX</code> 的形式暴露出来。以下是与 <strong>Options API</strong> 对应的生命周期钩子函数。</p><h4 id="_1-创建阶段-1" tabindex="-1">1. <strong>创建阶段</strong> <a class="header-anchor" href="#_1-创建阶段-1" aria-label="Permalink to &quot;1. **创建阶段**&quot;">​</a></h4><ul><li><code>onBeforeMount</code>：与 <code>beforeMount</code> 对应，组件挂载之前执行。</li><li><code>onMounted</code>：与 <code>mounted</code> 对应，组件挂载后执行。</li></ul><h4 id="_2-更新阶段" tabindex="-1">2. <strong>更新阶段</strong> <a class="header-anchor" href="#_2-更新阶段" aria-label="Permalink to &quot;2. **更新阶段**&quot;">​</a></h4><ul><li><code>onBeforeUpdate</code>：与 <code>beforeUpdate</code> 对应，数据更新之前执行。</li><li><code>onUpdated</code>：与 <code>updated</code> 对应，数据更新之后执行。</li></ul><h4 id="_3-销毁阶段" tabindex="-1">3. <strong>销毁阶段</strong> <a class="header-anchor" href="#_3-销毁阶段" aria-label="Permalink to &quot;3. **销毁阶段**&quot;">​</a></h4><ul><li><code>onBeforeUnmount</code>：与 <code>beforeUnmount</code> 对应，组件销毁之前执行。</li><li><code>onUnmounted</code>：与 <code>unmounted</code> 对应，组件销毁后执行。</li></ul><h4 id="_4-错误捕获阶段" tabindex="-1">4. <strong>错误捕获阶段</strong> <a class="header-anchor" href="#_4-错误捕获阶段" aria-label="Permalink to &quot;4. **错误捕获阶段**&quot;">​</a></h4><ul><li><code>onErrorCaptured</code>：与 <code>errorCaptured</code> 对应，用于捕获组件中的错误。</li></ul><h3 id="三、vue-3-生命周期钩子的总结表" tabindex="-1">三、<strong>Vue 3 生命周期钩子的总结表</strong> <a class="header-anchor" href="#三、vue-3-生命周期钩子的总结表" aria-label="Permalink to &quot;三、**Vue 3 生命周期钩子的总结表**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>生命周期钩子</th><th>Options API</th><th>Composition API</th></tr></thead><tbody><tr><td><strong>创建阶段</strong></td><td><code>beforeCreate</code> / <code>created</code></td><td><code>onBeforeMount</code> / <code>onMounted</code></td></tr><tr><td><strong>挂载阶段</strong></td><td><code>beforeMount</code> / <code>mounted</code></td><td><code>onBeforeMount</code> / <code>onMounted</code></td></tr><tr><td><strong>更新阶段</strong></td><td><code>beforeUpdate</code> / <code>updated</code></td><td><code>onBeforeUpdate</code> / <code>onUpdated</code></td></tr><tr><td><strong>销毁阶段</strong></td><td><code>beforeUnmount</code> / <code>unmounted</code></td><td><code>onBeforeUnmount</code> / <code>onUnmounted</code></td></tr><tr><td><strong>错误捕获</strong></td><td><code>errorCaptured</code></td><td><code>onErrorCaptured</code></td></tr></tbody></table><hr><h3 id="四、composition-api-生命周期钩子的使用示例" tabindex="-1">四、<strong>Composition API</strong> 生命周期钩子的使用示例 <a class="header-anchor" href="#四、composition-api-生命周期钩子的使用示例" aria-label="Permalink to &quot;四、**Composition API** 生命周期钩子的使用示例&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref, onMounted, onBeforeUnmount } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 组件挂载时调用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onMounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;组件已挂载&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 组件销毁前调用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onBeforeUnmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;组件即将销毁&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      count</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p><strong>Vue3 中各属性初始化的顺序</strong></p><p>下面这段代码是 Vue 中初始化组件状态的核心部分。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">vm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> opts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vm.$options</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (opts.props) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm, opts.props)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Composition API</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  initSetup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (opts.methods) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initMethods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm, opts.methods)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (opts.data) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    initData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((vm._data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ob </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ob.vmCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (opts.computed) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initComputed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm, opts.computed)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (opts.watch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> opts.watch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nativeWatch) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    initWatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm, opts.watch)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>可以看到依次初始化了:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">props </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> setup </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> methods </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> computed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> watch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,48))])}const F=n(o,[["render",k]]);export{y as __pageData,F as default};
