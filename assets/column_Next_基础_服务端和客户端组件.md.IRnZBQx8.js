import{_ as a,C as e,c as t,o as l,j as i,G as p,aQ as r,a as h}from"./chunks/framework.DEi4YP2n.js";const C=JSON.parse('{"title":"Next.js 的客户端组件和服务端组件讲解","description":"","frontmatter":{},"headers":[],"relativePath":"column/Next/基础/服务端和客户端组件.md","filePath":"column/Next/基础/服务端和客户端组件.md","lastUpdated":1759115073000}'),o={name:"column/Next/基础/服务端和客户端组件.md"};function k(d,s,c,g,E,u){const n=e("ArticleMetadata");return l(),t("div",null,[s[0]||(s[0]=i("h1",{id:"next-js-的客户端组件和服务端组件讲解",tabindex:"-1"},[h("Next.js 的客户端组件和服务端组件讲解 "),i("a",{class:"header-anchor",href:"#next-js-的客户端组件和服务端组件讲解","aria-label":'Permalink to "Next.js 的客户端组件和服务端组件讲解"'},"​")],-1)),p(n),s[1]||(s[1]=r(`<nav class="table-of-contents"><ul><li><a href="#一、什么是-server-component">一、什么是 Server Component</a></li><li><a href="#二、什么是-client-component">二、什么是 Client Component</a></li><li><a href="#三、server-component-与-client-component-的区别">三、Server Component 与 Client Component 的区别</a></li><li><a href="#四、嵌套规则">四、嵌套规则</a><ul><li><a href="#_1-server-component-可以嵌套-client-component-✅">1. Server Component 可以嵌套 Client Component ✅</a></li><li><a href="#_2-client-component-不能嵌套-server-component-❌">2. Client Component 不能嵌套 Server Component ❌</a></li></ul></li><li><a href="#五、为什么不能在-server-component-里直接使用-client-hook">五、为什么不能在 Server Component 里直接使用 Client Hook</a></li><li><a href="#六、最佳实践">六、最佳实践</a></li></ul></nav><p>在 <code>Next.js 15 的 App Router</code> 中，React 组件分为 <strong>Server Component（服务端组件）</strong> 和 <strong>Client Component（客户端组件）</strong>；注意区分这两者的细节。</p><h2 id="一、什么是-server-component" tabindex="-1">一、什么是 Server Component <a class="header-anchor" href="#一、什么是-server-component" aria-label="Permalink to &quot;一、什么是 Server Component&quot;">​</a></h2><ul><li><p><strong>默认组件类型</strong> App Router 下，<code>app/</code> 目录里的组件默认都是 <strong>Server Component</strong>。</p></li><li><p><strong>运行环境</strong> 在 <strong>服务端</strong> 执行（Node.js），可直接访问数据库、文件系统、环境变量等。</p></li><li><p><strong>特点</strong></p><ul><li>不会打包到浏览器，体积小。</li><li>不可使用 React Hook（如 <code>useState</code>, <code>useEffect</code>）。</li><li>可直接渲染 HTML，首屏渲染快，SEO 友好。</li></ul></li><li><p><strong>示例</strong>：</p></li></ul><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app/page.js (Server Component)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello from Server Component&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="二、什么是-client-component" tabindex="-1">二、什么是 Client Component <a class="header-anchor" href="#二、什么是-client-component" aria-label="Permalink to &quot;二、什么是 Client Component&quot;">​</a></h2><ul><li><strong>显式声明</strong> 在组件文件顶部添加：</li></ul><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;use client&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p><strong>运行环境</strong> 在 <strong>浏览器端</strong> 执行，可响应用户交互，使用 React Hook。</p></li><li><p><strong>特点</strong></p><ul><li>可使用 <code>useState</code>, <code>useEffect</code>, <code>useContext</code> 等 Hook。</li><li>体积较大，会被打包到客户端 JS。</li><li>适合处理按钮点击、表单、动画等动态交互。</li></ul></li><li><p><strong>示例</strong>：</p></li></ul><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;use client&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useState } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}&gt;Count: {count}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="三、server-component-与-client-component-的区别" tabindex="-1">三、Server Component 与 Client Component 的区别 <a class="header-anchor" href="#三、server-component-与-client-component-的区别" aria-label="Permalink to &quot;三、Server Component 与 Client Component 的区别&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>Server Component</th><th>Client Component</th></tr></thead><tbody><tr><td>默认</td><td>✅ 默认</td><td>❌ 必须 <code>&quot;use client&quot;</code></td></tr><tr><td>执行位置</td><td>服务端（Node.js）</td><td>浏览器</td></tr><tr><td>可访问数据库 / secrets</td><td>✅</td><td>❌ 不安全</td></tr><tr><td>React Hooks</td><td>❌</td><td>✅</td></tr><tr><td>首屏渲染性能</td><td>高</td><td>较低（JS 加载）</td></tr><tr><td>打包体积</td><td>小</td><td>大</td></tr><tr><td>SEO</td><td>优</td><td>差（需客户端渲染）</td></tr></tbody></table><h2 id="四、嵌套规则" tabindex="-1">四、嵌套规则 <a class="header-anchor" href="#四、嵌套规则" aria-label="Permalink to &quot;四、嵌套规则&quot;">​</a></h2><h3 id="_1-server-component-可以嵌套-client-component-✅" tabindex="-1">1. Server Component 可以嵌套 Client Component ✅ <a class="header-anchor" href="#_1-server-component-可以嵌套-client-component-✅" aria-label="Permalink to &quot;1. Server Component 可以嵌套 Client Component ✅&quot;">​</a></h3><ul><li>常见模式：页面或布局为 Server Component，局部组件为 Client Component。</li></ul><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app/page.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./Counter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Counter 是 Client Component</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Server Component&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>Server Component 嵌套 Client Component 时，必须通过 import 引入成组件。不能直接写在 Server Component 里。</p></div><p><strong>Server/Client 嵌套示意</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Page (Server)</span></span>
<span class="line"><span> ├─ Header (Server)</span></span>
<span class="line"><span> ├─ Counter (Client)  ← 用 useState / useEffect</span></span>
<span class="line"><span> └─ Footer (Server)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2-client-component-不能嵌套-server-component-❌" tabindex="-1">2. Client Component 不能嵌套 Server Component ❌ <a class="header-anchor" href="#_2-client-component-不能嵌套-server-component-❌" aria-label="Permalink to &quot;2. Client Component 不能嵌套 Server Component ❌&quot;">​</a></h3><ul><li>原因：浏览器无法执行 Server Component 的服务端逻辑。</li><li>如果尝试 import Server Component，会报错：</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Error: Server component imported into a client component</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>解决方法：将被嵌套组件改成 Client Component，或将 Server Component 提取到父组件。</li></ul><h2 id="五、为什么不能在-server-component-里直接使用-client-hook" tabindex="-1">五、为什么不能在 Server Component 里直接使用 Client Hook <a class="header-anchor" href="#五、为什么不能在-server-component-里直接使用-client-hook" aria-label="Permalink to &quot;五、为什么不能在 Server Component 里直接使用 Client Hook&quot;">​</a></h2><ul><li>Server Component 运行在服务端，不存在浏览器环境。</li><li>React Hook（<code>useState</code>, <code>useEffect</code>）只能在客户端执行。</li><li>强制要求：<strong>要使用 Hook，必须在 Client Component 里</strong>。</li><li><strong>错误示例</strong>：</li></ul><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ❌ 报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}&gt;{count}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="六、最佳实践" tabindex="-1">六、最佳实践 <a class="header-anchor" href="#六、最佳实践" aria-label="Permalink to &quot;六、最佳实践&quot;">​</a></h2><ol><li><p><strong>尽量保持页面和布局为 Server Component</strong></p><ul><li>提升首屏渲染速度，减少 JS 包体积。</li></ul></li><li><p><strong>交互、状态管理、浏览器 API 组件用 Client Component</strong></p><ul><li>例如按钮计数器、表单、动态列表、动画。</li></ul></li><li><p><strong>嵌套规则</strong></p><ul><li>Server Component → Client Component ✅</li><li>Client Component → Server Component ❌</li></ul></li><li><p><strong>数据获取在 Server Component</strong></p><ul><li>Server Component 可直接调用数据库 / fetch API，将数据传给 Client Component 只做渲染和交互。</li></ul></li><li><p><strong>布局优先 Server</strong></p><ul><li>页面整体布局尽量 Server Component，仅在局部需要交互的地方使用 Client Component。</li></ul></li></ol><ul><li>页面和 Header、Footer 由服务端渲染。</li><li>Counter 组件在浏览器端处理点击和状态。</li><li>保持 Server Component 不直接依赖 Client Hook。</li></ul>`,29))])}const b=a(o,[["render",k]]);export{C as __pageData,b as default};
