import{_ as i,c as a,o as l,aQ as e}from"./chunks/framework.DEi4YP2n.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"column/ProblemNotes/日常笔记/WebAssembly简介.md","filePath":"column/ProblemNotes/日常笔记/WebAssembly简介.md","lastUpdated":1759995509000}'),n={name:"column/ProblemNotes/日常笔记/WebAssembly简介.md"};function t(p,s,r,h,k,b){return l(),a("div",null,[...s[0]||(s[0]=[e(`<h3 id="webassembly-wasm-简介" tabindex="-1">WebAssembly (Wasm) 简介 <a class="header-anchor" href="#webassembly-wasm-简介" aria-label="Permalink to &quot;WebAssembly (Wasm) 简介&quot;">​</a></h3><p><code>WebAssembly</code> (简称 <strong>Wasm</strong>) 是一种新的低级编程语言，它被设计用于在现代浏览器中高效执行。它的主要目标是使网页和 web 应用程序能够运行更高效的代码，尤其是在性能要求较高的场景中。Wasm 不是用来替代 JavaScript，而是作为补充，它能够让开发者在 Web 环境中运行用 C、C++、Rust、Go 等编写的代码，享受接近原生性能。</p><h3 id="webassembly-的主要特点" tabindex="-1">WebAssembly 的主要特点 <a class="header-anchor" href="#webassembly-的主要特点" aria-label="Permalink to &quot;WebAssembly 的主要特点&quot;">​</a></h3><ol><li><p><strong>高效性</strong>：</p><ul><li>Wasm 被设计为二进制格式，加载速度比 JavaScript 快，执行速度也更高。</li><li>它可以通过浏览器的底层优化进行加速，从而提高性能。</li></ul></li><li><p><strong>跨平台</strong>：</p><ul><li>Wasm 可以在所有现代浏览器中运行（如 Chrome、Firefox、Safari、Edge），支持 Windows、Linux、MacOS、移动设备等各种操作系统。</li><li>不依赖于底层硬件架构，它通过 Web 平台提供一致的执行环境。</li></ul></li><li><p><strong>安全性</strong>：</p><ul><li>WebAssembly 是在一个沙箱中执行的，意味着它无法直接访问宿主系统的文件系统、网络等资源。这使得它在 Web 环境中能够保持良好的安全性。</li></ul></li><li><p><strong>互操作性</strong>：</p><ul><li>WebAssembly 可以与 JavaScript 进行互操作，可以在 JavaScript 中调用 Wasm 模块，也可以从 Wasm 中调用 JavaScript 函数。</li></ul></li><li><p><strong>二进制格式</strong>：</p><ul><li>WebAssembly 使用二进制格式进行编码，文件较小且加载更快，比传统的 JavaScript 脚本要高效得多。</li></ul></li></ol><h3 id="webassembly-的工作原理" tabindex="-1">WebAssembly 的工作原理 <a class="header-anchor" href="#webassembly-的工作原理" aria-label="Permalink to &quot;WebAssembly 的工作原理&quot;">​</a></h3><ol><li><p><strong>编译</strong>：</p><ul><li>开发者首先使用支持的语言（如 C、C++、Rust、Go 等）编写代码。</li><li>然后，将这些语言编译成 WebAssembly 模块（通常是 <code>.wasm</code> 文件）。这些文件是二进制格式，优化过的，可以直接在浏览器中加载和执行。</li></ul></li><li><p><strong>加载和执行</strong>：</p><ul><li>当浏览器加载网页时，它会下载 WebAssembly 模块并通过 WebAssembly 引擎进行解析和执行。</li><li>WebAssembly 代码可以与 JavaScript 一起工作，JavaScript 可以用来加载和调用 WebAssembly 模块的函数。</li></ul></li><li><p><strong>与 JavaScript 交互</strong>：</p><ul><li>WebAssembly 模块可以通过 JavaScript API 进行调用。你可以在 JavaScript 中加载 <code>.wasm</code> 文件，并且调用其暴露的函数，传递数据和接收返回值。</li></ul><p>示例：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaScript 中加载 WebAssembly 模块</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module.wasm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arrayBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bytes))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wasmModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmModule.instance.exports.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">myFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ol><h3 id="使用-webassembly-的场景" tabindex="-1">使用 WebAssembly 的场景 <a class="header-anchor" href="#使用-webassembly-的场景" aria-label="Permalink to &quot;使用 WebAssembly 的场景&quot;">​</a></h3><ul><li><strong>性能优化</strong>：需要高性能的应用（如图像处理、视频解码、游戏引擎、物理模拟等）可以利用 WebAssembly 来提升性能，特别是在 Web 上。</li><li><strong>C/C++、Rust 迁移</strong>：如果已有 C/C++ 或 Rust 项目，并且需要将其移植到 Web 环境，Wasm 是一个理想的选择。</li><li><strong>多语言支持</strong>：使用 WebAssembly，开发者可以选择他们熟悉的编程语言，而不必受限于 JavaScript。</li></ul><h3 id="webassembly-的限制" tabindex="-1">WebAssembly 的限制 <a class="header-anchor" href="#webassembly-的限制" aria-label="Permalink to &quot;WebAssembly 的限制&quot;">​</a></h3><ul><li><strong>调试和错误信息</strong>：由于 Wasm 是二进制格式，调试过程相对复杂，错误信息不如 JavaScript 那样易读。</li><li><strong>运行时支持</strong>：WebAssembly 本身不支持 DOM 操作（比如修改网页内容），需要 JavaScript 来处理与网页的交互。</li><li><strong>大型应用</strong>：对于一些大型应用，Wasm 加载和初始化的时间仍然比 JavaScript 长。</li></ul><h3 id="未来展望" tabindex="-1">未来展望 <a class="header-anchor" href="#未来展望" aria-label="Permalink to &quot;未来展望&quot;">​</a></h3><p><code>WebAssembly</code> 在不断发展，现在已经支持更多的语言和功能。未来可能会支持更多的功能，比如多线程、垃圾回收、更丰富的系统 API 支持等。这些特性将进一步增强 <code>WebAssembly</code> 在现代 Web 开发中的应用场景。</p>`,12)])])}const m=i(n,[["render",t]]);export{d as __pageData,m as default};
