import{_ as i,C as n,c as e,o as l,j as a,G as p,aQ as r,a as o}from"./chunks/framework.DEi4YP2n.js";const d="/assets/autoprefixer.DZS-tbby.png",C=JSON.parse('{"title":"PostCSS 与 Sass/LESS","description":"","frontmatter":{},"headers":[],"relativePath":"column/HtmlCss/CSS/CSS预处理器和后处理器.md","filePath":"column/HtmlCss/CSS/CSS预处理器和后处理器.md","lastUpdated":1759136986000}'),h={name:"column/HtmlCss/CSS/CSS预处理器和后处理器.md"};function c(k,s,S,g,u,b){const t=n("ArticleMetadata");return l(),e("div",null,[s[0]||(s[0]=a("h1",{id:"postcss-与-sass-less",tabindex:"-1"},[o("PostCSS 与 Sass/LESS "),a("a",{class:"header-anchor",href:"#postcss-与-sass-less","aria-label":'Permalink to "PostCSS 与 Sass/LESS"'},"​")],-1)),p(t),s[1]||(s[1]=r(`<nav class="table-of-contents"><ul><li><a href="#一、什么是-postcss-后处理器">一、什么是 PostCSS(后处理器)？</a></li><li><a href="#二、什么是-css-预处理器-sass-less">二、什么是 CSS 预处理器（Sass/LESS）？</a></li><li><a href="#三、postcss-vs-sass-less-功能和侧重点对比">三、PostCSS vs Sass/LESS：功能和侧重点对比</a></li><li><a href="#四、postcss-的主要功能">四、PostCSS 的主要功能</a></li><li><a href="#五、如何在-vite-项目中配置-postcss">五、如何在 Vite 项目中配置 PostCSS？</a><ul><li><a href="#步骤-1-安装-postcss-和插件">步骤 1：安装 PostCSS 和插件</a></li><li><a href="#步骤-2-创建-postcss-config-js-配置文件">步骤 2：创建 postcss.config.js 配置文件</a></li><li><a href="#步骤-3-在-vite-config-js-配置-postcss">步骤 3：在 vite.config.js 配置 PostCSS</a></li><li><a href="#步骤-4-启动开发服务器">步骤 4：启动开发服务器</a></li></ul></li><li><a href="#六、报错处理">六、报错处理</a></li></ul></nav><h2 id="一、什么是-postcss-后处理器" tabindex="-1">一、什么是 PostCSS(后处理器)？ <a class="header-anchor" href="#一、什么是-postcss-后处理器" aria-label="Permalink to &quot;一、什么是 PostCSS(后处理器)？&quot;">​</a></h2><p><strong>PostCSS</strong> 是一个 <code>CSS</code> 处理工具，它本身不直接处理 CSS 样式，而是依赖插件来扩展功能。通过插件，<code>PostCSS</code> 可以执行很多任务，如自动加浏览器前缀、CSS 压缩、CSS 模块支持等。<code>PostCSS</code> 的强大之处在于它可以根据需求灵活选择插件，而不像传统的 CSS 预处理器那样预设了一些功能。</p><h2 id="二、什么是-css-预处理器-sass-less" tabindex="-1">二、什么是 CSS 预处理器（Sass/LESS）？ <a class="header-anchor" href="#二、什么是-css-预处理器-sass-less" aria-label="Permalink to &quot;二、什么是 CSS 预处理器（Sass/LESS）？&quot;">​</a></h2><p><strong>Sass</strong> 和 <strong>LESS</strong> 是最常用的 CSS 预处理器，它们增加了变量、嵌套规则、混入（Mixins）、继承等功能。与 PostCSS 不同，Sass 和 LESS 更多地关注于扩展 CSS 的语法和结构，使得开发者能够编写更具逻辑性和复用性的 CSS 代码。</p><h2 id="三、postcss-vs-sass-less-功能和侧重点对比" tabindex="-1">三、PostCSS vs Sass/LESS：功能和侧重点对比 <a class="header-anchor" href="#三、postcss-vs-sass-less-功能和侧重点对比" aria-label="Permalink to &quot;三、PostCSS vs Sass/LESS：功能和侧重点对比&quot;">​</a></h2><p>我们可以通过以下表格来对比 <strong>PostCSS</strong> 和 <strong>Sass/LESS</strong> 的主要功能、侧重点和适用场景。</p><table tabindex="0"><thead><tr><th>特性/功能</th><th><strong>PostCSS</strong></th><th><strong>Sass/LESS</strong></th></tr></thead><tbody><tr><td><strong>功能扩展方式</strong></td><td>通过插件实现，灵活定制</td><td>内置语法扩展，功能固定</td></tr><tr><td><strong>语法扩展</strong></td><td>不直接扩展 CSS 语法，使用插件增强功能</td><td>扩展了 CSS 语法，如变量、嵌套、Mixins 等</td></tr><tr><td><strong>自动加前缀</strong></td><td>通过插件（如 <code>autoprefixer</code>）自动加前缀</td><td>不直接支持自动加前缀，需要额外配置（例如 <code>gulp-autoprefixer</code>）</td></tr><tr><td><strong>CSS 压缩</strong></td><td>通过插件（如 <code>cssnano</code>）进行 CSS 压缩</td><td>可通过配置与其他工具（如 <code>gulp</code>）实现 CSS 压缩</td></tr><tr><td><strong>模块化支持</strong></td><td>通过插件支持 CSS Modules 和其他模块系统</td><td>原生支持 CSS 文件的模块化，特别是 Sass 的 <code>@use</code> 和 <code>@import</code></td></tr><tr><td><strong>嵌套支持</strong></td><td>通过插件支持 CSS 嵌套（如 <code>postcss-nested</code>）</td><td>本身内建强大的嵌套支持</td></tr><tr><td><strong>变量支持</strong></td><td>通过插件支持 CSS 变量（如 <code>postcss-custom-properties</code>）</td><td>本身内建变量支持</td></tr><tr><td><strong>逻辑操作</strong></td><td>没有内建的逻辑功能，所有功能都需要通过插件实现</td><td>提供变量、运算、条件语句等逻辑功能</td></tr><tr><td><strong>目标浏览器兼容性</strong></td><td>通过插件（如 <code>autoprefixer</code>）根据浏览器版本自动处理兼容性</td><td>不提供内建的浏览器兼容性处理，需外部工具支持</td></tr><tr><td><strong>开发模式支持</strong></td><td>高度可定制，通过插件定制构建流程</td><td>有自己的编译流程，通常通过构建工具（如 <code>Webpack</code>）实现</td></tr><tr><td><strong>使用场景</strong></td><td>适合现有 CSS 代码的优化，特别是需要灵活的插件配置</td><td>适合 CSS 的结构化和增强，注重开发体验与可维护性</td></tr></tbody></table><h2 id="四、postcss-的主要功能" tabindex="-1">四、PostCSS 的主要功能 <a class="header-anchor" href="#四、postcss-的主要功能" aria-label="Permalink to &quot;四、PostCSS 的主要功能&quot;">​</a></h2><p>PostCSS 是通过插件实现其功能的工具，以下是 PostCSS 常用插件及其功能汇总：</p><table tabindex="0"><thead><tr><th>插件/功能</th><th>说明</th></tr></thead><tbody><tr><td><strong>Autoprefixer</strong></td><td>自动为 CSS 属性添加浏览器厂商前缀。</td></tr><tr><td><strong>cssnano</strong></td><td>用于 CSS 压缩，移除不必要的空格、注释等。</td></tr><tr><td><strong>postcss-nested</strong></td><td>使得 CSS 支持嵌套规则，类似 Sass 中的嵌套功能。</td></tr><tr><td><strong>postcss-modules</strong></td><td>支持 CSS 模块化，避免样式冲突。</td></tr><tr><td><strong>postcss-preset-env</strong></td><td>使用最新的 CSS 特性并自动转换为兼容性好的代码。</td></tr><tr><td><strong>postcss-import</strong></td><td>支持在 CSS 中导入其他 CSS 文件，类似 Sass 的 <code>@import</code>。</td></tr><tr><td><strong>postcss-custom-properties</strong></td><td>支持在不完全支持 CSS 变量的环境中使用 CSS 变量。</td></tr><tr><td><strong>postcss-assets</strong></td><td>自动处理图片、字体文件的路径管理。</td></tr></tbody></table><h2 id="五、如何在-vite-项目中配置-postcss" tabindex="-1">五、如何在 Vite 项目中配置 PostCSS？ <a class="header-anchor" href="#五、如何在-vite-项目中配置-postcss" aria-label="Permalink to &quot;五、如何在 Vite 项目中配置 PostCSS？&quot;">​</a></h2><p>在 Vite 项目中配置 PostCSS 其实非常简单。Vite 会自动检测并支持 <code>postcss.config.js</code> 文件的配置，因此，你只需要安装并配置相关插件即可。以下是配置的步骤：</p><h3 id="步骤-1-安装-postcss-和插件" tabindex="-1">步骤 1：安装 PostCSS 和插件 <a class="header-anchor" href="#步骤-1-安装-postcss-和插件" aria-label="Permalink to &quot;步骤 1：安装 PostCSS 和插件&quot;">​</a></h3><p>首先，你需要安装 PostCSS 以及你所需要的插件（例如 <code>autoprefixer</code> 和 <code>cssnano</code>）：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> postcss</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> autoprefixer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cssnano</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="步骤-2-创建-postcss-config-js-配置文件" tabindex="-1">步骤 2：创建 <code>postcss.config.js</code> 配置文件 <a class="header-anchor" href="#步骤-2-创建-postcss-config-js-配置文件" aria-label="Permalink to &quot;步骤 2：创建 \`postcss.config.js\` 配置文件&quot;">​</a></h3><p>在项目根目录下创建 <code>postcss.config.js</code> 文件，并配置相关插件：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// postcss.config.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;autoprefixer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动加浏览器前缀</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cssnano&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 压缩 CSS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      preset: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;default&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="步骤-3-在-vite-config-js-配置-postcss" tabindex="-1">步骤 3：在 <code>vite.config.js</code> 配置 PostCSS <a class="header-anchor" href="#步骤-3-在-vite-config-js-配置-postcss" aria-label="Permalink to &quot;步骤 3：在 \`vite.config.js\` 配置 PostCSS&quot;">​</a></h3><p>Vite 会自动识别 <code>postcss.config.js</code>，但如果需要更详细的配置，也可以在 <code>vite.config.js</code> 中显式声明：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  css: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    postcss: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./postcss.config.js&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 指定 PostCSS 配置文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="步骤-4-启动开发服务器" tabindex="-1">步骤 4：启动开发服务器 <a class="header-anchor" href="#步骤-4-启动开发服务器" aria-label="Permalink to &quot;步骤 4：启动开发服务器&quot;">​</a></h3><p>完成配置后，可以运行 Vite 开发服务器，PostCSS 将在构建时自动处理你的 CSS：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="六、报错处理" tabindex="-1">六、报错处理 <a class="header-anchor" href="#六、报错处理" aria-label="Permalink to &quot;六、报错处理&quot;">​</a></h2><p><img src="`+d+`" alt="" loading="lazy"></p><p>这是因为 VitePress 项目缺少 <code>autoprefixer</code> 模块。要解决这个问题，请执行以下命令：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> autoprefixer</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后再<code>postcss.config.js</code>中添加</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tailwindcss: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    autoprefixer: {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动添加浏览器前缀</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,31))])}const m=i(h,[["render",c]]);export{C as __pageData,m as default};
