import{_ as e,C as p,c as t,o as n,j as a,G as l,aQ as c,a as h}from"./chunks/framework.CZC_k6km.js";const o="/assets/publicPath.BPv3PVDl.png",m=JSON.parse('{"title":"vue配置中的 publicPath 讲解","description":"","frontmatter":{},"headers":[],"relativePath":"column/Vue/构建打包相关/publicPath讲解.md","filePath":"column/Vue/构建打包相关/publicPath讲解.md","lastUpdated":1757059848000}'),r={name:"column/Vue/构建打包相关/publicPath讲解.md"};function d(u,s,k,b,E,g){const i=p("ArticleMetadata");return n(),t("div",null,[s[0]||(s[0]=a("h1",{id:"vue配置中的-publicpath-讲解",tabindex:"-1"},[h("vue配置中的 publicPath 讲解 "),a("a",{class:"header-anchor",href:"#vue配置中的-publicpath-讲解","aria-label":'Permalink to "vue配置中的 publicPath 讲解"'},"​")],-1)),l(i),s[1]||(s[1]=c('<p><code>vue.config.js 里面的 publicPath </code>是部署应用包时的基本 URL；(从 Vue CLI 3.3 起 baseUrl 已被 publicPath 替代；)</p><p>如果想要了解 <code>vue</code> 的环境变量 <code>process.env</code> 可以阅读这篇文章：</p><p><a href="https://blog.csdn.net/qq_43886365/article/details/128370109" target="_blank" rel="noreferrer">vue 中的 process.env.NODE_ENV 讲解</a></p><h2 id="一、publicpath" tabindex="-1">一、publicPath <a class="header-anchor" href="#一、publicpath" aria-label="Permalink to &quot;一、publicPath&quot;">​</a></h2><p><code>publicPath</code> 是部署应用包时的基本 URL；默认情况下，<code>Vue CLI</code> 会假设你的应用是被部署在一个域名的根路径上(<a href="https://www.my-app.com/" target="_blank" rel="noreferrer">https://www.my-app.com/</a>)</p><p>如果应用被部署在一个子路径上，你就需要用这个选项指定这个子路径。如果你的应用被部署在 <code>https://www.my-app.com/my-app/</code>，则设置 <code>publicPath</code> 为<code>/my-app/</code>。</p><p>这个值也可以被设置为空字符串 (&#39;&#39;) 或是相对路径 (&#39;./&#39;)，这样所有的资源都会被链接为相对路径，这样打出来的包可以被部署在任意路径；</p><p>但相对路径的 <code>publicPath</code> 有一些使用上的限制。在以下情况下，应当避免使用相对 <code>publicPath</code>:</p><p>1、当使用基于<code> HTML5 history.pushState</code> 的路由时；<br> 2、当使用 <code>pages</code> 选项构建多页面应用时。</p><h2 id="二、哪里会用到-publicpath" tabindex="-1">二、哪里会用到 publicPath <a class="header-anchor" href="#二、哪里会用到-publicpath" aria-label="Permalink to &quot;二、哪里会用到 publicPath&quot;">​</a></h2><p>在 vue 中的项目中一般静态文件路径要使用 <code>publicPath</code> 和项目打包部署时都会用到 <code>publicPath</code>;</p><h3 id="_2-1-静态文件使用-publicpath" tabindex="-1">2.1 静态文件使用 publicPath <a class="header-anchor" href="#_2-1-静态文件使用-publicpath" aria-label="Permalink to &quot;2.1 静态文件使用 publicPath&quot;">​</a></h3><p>如果你的项目里面的静态文件都放在<strong>public 文件中</strong>，那么使用的时候要使用 <code>publicPath</code> 这个变量，防止打包后静态文件找不到；你需要通过绝对路径来引用它们。</p><p>因为：任何放置在 <code>public</code> 文件夹的静态资源都会被简单的复制，而不经过 <code>webpack；</code></p><p>下图是 <code>vue-cli</code> 官网给出的使用说明：<a href="https://cli.vuejs.org/zh/guide/html-and-static-assets.html#public-%E6%96%87%E4%BB%B6%E5%A4%B9" target="_blank" rel="noreferrer">链接</a></p><p><code>注意</code>：这里用到了 <code>process.env.BASE_URL</code>,下面会解释的</p><p><img src="'+o+`" alt="在这里插入图片描述" loading="lazy"></p><h3 id="_2-2-项目打包使用-publicpath" tabindex="-1">2.2 项目打包使用 publicPath <a class="header-anchor" href="#_2-2-项目打包使用-publicpath" aria-label="Permalink to &quot;2.2 项目打包使用 publicPath&quot;">​</a></h3><p>如果你想把开发服务器架设在根路径，你可以使用一个条件式的值：</p><p>这里判断是否是生产环境 如果是那么前面的部署路径加上 /app/；如果不是 默认使用根路径 / ; 生产环境经常配合前端服务器的中 nginx 代理使用；</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  publicPath: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;production&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/app/&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="三、publicpath-和-process-env-base-url" tabindex="-1">三、publicPath 和 process.env.BASE_URL <a class="header-anchor" href="#三、publicpath-和-process-env-base-url" aria-label="Permalink to &quot;三、publicPath 和 process.env.BASE_URL&quot;">​</a></h2><p>1，如果你在 <code>vue.config.js </code>里面设置了<code> publicPath</code>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  publicPath: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;production&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/video/&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">process.env.BASE_URL</p><p>那么 process.env.BASE_URL 其实就是 publicPath;</p><p>不信你可以在组件中 console.log(process.env.BASE_URL) 打印出来；BASE_URL 会被 vue.config.js 中 publicPath 变量覆盖。</p></div><p>2，如果没有在 <code>vue.config.js </code>里面设置 <code>publicPath</code>；那么 <code>process.env.BASE_UR</code>L 默认就是根路径 ：<code>/ </code>;</p><p>3，在 <code>vue</code> 路由的配置项中也会用到 <code>process.env.BASE_URL</code>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VueRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;history&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  base: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BASE_URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  routes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>mode history</code> 代表路由不再显示#，会像如下形式：<code>localhost:8080/user/list</code>；主要是 <code>base</code> 属性 代表着是基本的路由请求的路径：</p><p>如：<code>base: &#39;/app/&#39;</code> 说明项目部署在 <code>app</code> 目录下，那么 vue 所有的路由前面都会自动加上: <code>/app</code></p>`,30))])}const y=e(r,[["render",d]]);export{m as __pageData,y as default};
