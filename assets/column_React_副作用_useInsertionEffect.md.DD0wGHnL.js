import{_ as n,C as t,c as e,o as l,j as a,G as p,aQ as h,a as r}from"./chunks/framework.DEi4YP2n.js";const b=JSON.parse('{"title":"useInsertionEffect：样式注入 Hook","description":"","frontmatter":{},"headers":[],"relativePath":"column/React/副作用/useInsertionEffect.md","filePath":"column/React/副作用/useInsertionEffect.md","lastUpdated":1759999524000}'),k={name:"column/React/副作用/useInsertionEffect.md"};function d(E,s,c,o,u,g){const i=t("ArticleMetadata");return l(),e("div",null,[s[0]||(s[0]=a("h1",{id:"useinsertioneffect-样式注入-hook",tabindex:"-1"},[r("useInsertionEffect：样式注入 Hook "),a("a",{class:"header-anchor",href:"#useinsertioneffect-样式注入-hook","aria-label":'Permalink to "useInsertionEffect：样式注入 Hook"'},"​")],-1)),p(i),s[1]||(s[1]=h(`<nav class="table-of-contents"><ul><li><a href="#一、为什么需要-useinsertioneffect">一、为什么需要 useInsertionEffect？</a></li><li><a href="#二、useinsertioneffect-是什么">二、useInsertionEffect 是什么？</a><ul><li><a href="#📘-基本语法">📘 基本语法：</a></li></ul></li><li><a href="#三、执行时机对比图">三、执行时机对比图</a></li><li><a href="#四、实际例子-模拟-css-in-js-注入">四、实际例子：模拟 CSS-in-JS 注入</a></li><li><a href="#五、与-uselayouteffect-的区别">五、与 useLayoutEffect 的区别</a></li><li><a href="#六、为什么-react-要单独为样式设计一个-hook">六、为什么 React 要单独为样式设计一个 Hook？</a></li><li><a href="#七、在框架中的实际应用">七、在框架中的实际应用</a></li></ul></nav><blockquote><p>React 18 除了带来 <code>useTransition</code>、<code>useDeferredValue</code> 等常用的并发特性外，<br> 还新增了一个专为 <strong>样式注入（Style Insertion）</strong> 设计的 Hook —— <code>useInsertionEffect</code>。</p><p>它的主要作用是：<strong>在 DOM 变更前执行副作用，保证样式优先插入</strong>。</p></blockquote><h2 id="一、为什么需要-useinsertioneffect" tabindex="-1">一、为什么需要 useInsertionEffect？ <a class="header-anchor" href="#一、为什么需要-useinsertioneffect" aria-label="Permalink to &quot;一、为什么需要 useInsertionEffect？&quot;">​</a></h2><p>在 React 18 之前，CSS-in-JS 库（如 <code>emotion</code>、<code>styled-components</code>） 通常在 <code>useLayoutEffect</code> 或 <code>useEffect</code> 中插入样式。</p><p>然而，这会出现两个问题：</p><ol><li><strong>样式闪烁（FOUC）</strong>：组件渲染了，但样式还没插入。</li><li><strong>插入顺序错误</strong>：多个样式更新时，后渲染的组件样式可能覆盖前面的。</li></ol><p>React 18 为了解决这个问题，专门引入了 <code>useInsertionEffect</code> —— 它的执行时机比 <code>useLayoutEffect</code> 还要早！</p><h2 id="二、useinsertioneffect-是什么" tabindex="-1">二、useInsertionEffect 是什么？ <a class="header-anchor" href="#二、useinsertioneffect-是什么" aria-label="Permalink to &quot;二、useInsertionEffect 是什么？&quot;">​</a></h2><h3 id="📘-基本语法" tabindex="-1">📘 基本语法： <a class="header-anchor" href="#📘-基本语法" aria-label="Permalink to &quot;📘 基本语法：&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useInsertionEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(setup, dependencies</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>说明</th><th></th></tr></thead><tbody><tr><td><code>setup</code></td><td>\`() =&gt; void</td><td>(() =&gt; void)\`</td><td>用于插入样式的函数</td></tr><tr><td><code>dependencies</code></td><td><code>any[]</code></td><td>依赖数组，决定何时重新执行</td><td></td></tr></tbody></table><h2 id="三、执行时机对比图" tabindex="-1">三、执行时机对比图 <a class="header-anchor" href="#三、执行时机对比图" aria-label="Permalink to &quot;三、执行时机对比图&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Hook</th><th>执行时机</th><th>用途</th></tr></thead><tbody><tr><td><code>useEffect</code></td><td>在浏览器完成绘制后</td><td>异步副作用，如请求数据</td></tr><tr><td><code>useLayoutEffect</code></td><td>在 DOM 更新后、绘制前</td><td>同步 DOM 操作</td></tr><tr><td><strong><code>useInsertionEffect</code></strong></td><td><strong>在 React 修改 DOM 之前</strong></td><td><strong>插入样式、确保样式优先</strong></td></tr></tbody></table><p>📊 <strong>执行顺序（React 渲染阶段）</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Render Phase</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>useInsertionEffect ✅ (样式注入)</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>DOM mutations (插入真实 DOM)</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>useLayoutEffect</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>Browser Paint (页面绘制)</span></span>
<span class="line"><span>  ↓</span></span>
<span class="line"><span>useEffect</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="四、实际例子-模拟-css-in-js-注入" tabindex="-1">四、实际例子：模拟 CSS-in-JS 注入 <a class="header-anchor" href="#四、实际例子-模拟-css-in-js-注入" aria-label="Permalink to &quot;四、实际例子：模拟 CSS-in-JS 注入&quot;">​</a></h2><p>来看一个简化的例子：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React, { useInsertionEffect } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cssText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  useInsertionEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    style.textContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cssText;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    document.head.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(style);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.head.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(style);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, [cssText]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  useStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    .box {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      background: #4f46e5;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      color: white;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      padding: 10px;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      border-radius: 8px;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  \`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;box&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello useInsertionEffect&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Box;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>✅ 效果：</p><ul><li>样式会在 DOM 创建之前注入；</li><li>页面渲染时不会出现闪烁；</li><li>样式插入顺序完全可控。</li></ul><h2 id="五、与-uselayouteffect-的区别" tabindex="-1">五、与 useLayoutEffect 的区别 <a class="header-anchor" href="#五、与-uselayouteffect-的区别" aria-label="Permalink to &quot;五、与 useLayoutEffect 的区别&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>useLayoutEffect</th><th>useInsertionEffect</th></tr></thead><tbody><tr><td>执行时机</td><td>DOM 更新后、绘制前</td><td><strong>DOM 更新前</strong></td></tr><tr><td>是否可操作 DOM</td><td>✅ 可以</td><td>❌ 不推荐（DOM 尚未生成）</td></tr><tr><td>用途</td><td>读取或修改布局</td><td>插入样式、生成 CSS</td></tr><tr><td>使用场景</td><td>动画、测量</td><td>CSS-in-JS 样式注入</td></tr></tbody></table><p>🚫 注意： <code>useInsertionEffect</code> 不能操作 DOM（因为此时 DOM 还没生成）， 它<strong>只适合做“样式插入”类副作用</strong>。</p><h2 id="六、为什么-react-要单独为样式设计一个-hook" tabindex="-1">六、为什么 React 要单独为样式设计一个 Hook？ <a class="header-anchor" href="#六、为什么-react-要单独为样式设计一个-hook" aria-label="Permalink to &quot;六、为什么 React 要单独为样式设计一个 Hook？&quot;">​</a></h2><p>React 官方在 <a href="https://github.com/reactjs/rfcs/pull/221" target="_blank" rel="noreferrer">RFC 提案</a> 中解释：</p><blockquote><p>为了支持“并发渲染”，必须在渲染阶段确保样式能与组件同步。 如果样式插入在 DOM 更新之后（例如在 <code>useLayoutEffect</code>），可能导致样式闪烁。</p></blockquote><p>举个例子👇</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setDark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setDark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d)}&gt;切换主题&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ThemeBox</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dark</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{dark} /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ThemeBox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">dark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  useInsertionEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    style.textContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`.box { background: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dark</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;#000&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;#fff&quot;} }\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    document.head.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(style);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.head.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(style);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, [dark]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;box&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>当主题切换时，样式会在 DOM 更新前就注入， <strong>React 能保证新样式与新组件一同呈现，避免了闪烁。</strong></p><h2 id="七、在框架中的实际应用" tabindex="-1">七、在框架中的实际应用 <a class="header-anchor" href="#七、在框架中的实际应用" aria-label="Permalink to &quot;七、在框架中的实际应用&quot;">​</a></h2><p>许多 CSS-in-JS 库都在内部使用了它：</p><table tabindex="0"><thead><tr><th>库</th><th>是否使用 useInsertionEffect</th><th>用途</th></tr></thead><tbody><tr><td>Emotion</td><td>✅ 是</td><td>动态插入 <code>&lt;style&gt;</code> 标签</td></tr><tr><td>Styled-components v6+</td><td>✅ 是</td><td>确保 SSR 与样式顺序一致</td></tr><tr><td>Jotai / Zustand</td><td>❌ 否</td><td>状态管理库，不涉及样式</td></tr><tr><td>Tailwind CSS</td><td>❌ 否</td><td>使用编译时静态类名</td></tr></tbody></table><p>💡 对于我们普通开发者，几乎不需要手动写它， 但理解它能帮你理解 CSS-in-JS 框架如何“无闪烁渲染样式”。</p>`,33))])}const F=n(k,[["render",d]]);export{b as __pageData,F as default};
