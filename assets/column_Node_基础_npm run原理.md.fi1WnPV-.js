import{_ as n,C as e,c as t,o as l,j as a,G as p,aQ as r,a as o}from"./chunks/framework.DEi4YP2n.js";const d="/assets/run-1.CvsACzpy.png",y=JSON.parse('{"title":"npm run 原理","description":"","frontmatter":{},"headers":[],"relativePath":"column/Node/基础/npm run原理.md","filePath":"column/Node/基础/npm run原理.md","lastUpdated":1760582846000}'),h={name:"column/Node/基础/npm run原理.md"};function c(k,s,u,g,b,E){const i=e("ArticleMetadata");return l(),t("div",null,[s[0]||(s[0]=a("h1",{id:"npm-run-原理",tabindex:"-1"},[o("npm run 原理 "),a("a",{class:"header-anchor",href:"#npm-run-原理","aria-label":'Permalink to "npm run 原理"'},"​")],-1)),p(i),s[1]||(s[1]=r(`<p>当你运行 <code>npm run xxx</code> 时，npm 会执行 <code>package.json</code> 中 <code>scripts</code> 字段定义的名为 <code>xxx</code> 的脚本。这个过程涉及下面多个步骤：</p><hr><h3 id="_1-查找脚本定义" tabindex="-1"><strong>1. 查找脚本定义</strong> <a class="header-anchor" href="#_1-查找脚本定义" aria-label="Permalink to &quot;**1. 查找脚本定义**&quot;">​</a></h3><p>npm 首先会在当前项目的 <code>package.json</code> 文件的 <code>scripts</code> 字段中查找 <code>xxx</code> 对应的命令：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;echo &#39;Hello World&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 要执行的命令</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webpack --config webpack.config.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>如果 <code>xxx</code> 不存在，npm 会报错：<code>Missing script: &quot;xxx&quot;</code>。</li></ul><hr><h3 id="_2-环境准备" tabindex="-1"><strong>2. 环境准备</strong> <a class="header-anchor" href="#_2-环境准备" aria-label="Permalink to &quot;**2. 环境准备**&quot;">​</a></h3><ul><li><p><strong>PATH 环境变量增强</strong>：<br> npm 会临时将 <code>node_modules/.bin</code> 添加到 <code>PATH</code> 中，这意味着：</p><ul><li>你可以直接运行安装在项目依赖中的 CLI 工具（如 <code>webpack</code>、<code>eslint</code>），而无需写完整路径（如 <code>./node_modules/.bin/webpack</code>）。</li><li>示例：<code>npm run build</code> 中的 <code>webpack</code> 命令会自动从 <code>node_modules/.bin</code> 查找。</li></ul></li><li><p><strong>环境变量注入</strong>：<br> npm 会注入一些额外的环境变量，例如：</p><ul><li><code>npm_package_name</code>：当前项目的包名（来自 <code>package.json</code> 的 <code>name</code> 字段）。</li><li><code>npm_package_version</code>：当前版本号。</li><li>可通过 <code>process.env.npm_package_name</code> 在脚本中访问。</li></ul></li></ul><hr><h3 id="_3-执行脚本" tabindex="-1"><strong>3. 执行脚本</strong> <a class="header-anchor" href="#_3-执行脚本" aria-label="Permalink to &quot;**3. 执行脚本**&quot;">​</a></h3><ul><li><p><strong>Shell 执行</strong>：<br> npm 默认在系统的默认 Shell（如 Bash、CMD/PowerShell）中执行脚本命令。</p><ul><li>在 Unix 系统（Linux/macOS）中，实际执行的是 <code>sh -c &quot;echo &#39;Hello World&#39;&quot;</code>。</li><li>在 Windows 中，会通过 <code>cmd.exe /C</code> 执行。</li></ul></li><li><p><strong>顺序执行多条命令</strong>：<br> 如果脚本包含 <code>&amp;&amp;</code> 或 <code>;</code>，npm 会按顺序执行：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint . &amp;&amp; jest&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>先运行 <code>eslint .</code>，如果成功（退出码为 0），再运行 <code>jest</code>。</li></ul></li></ul><hr><h3 id="_4-生命周期脚本-如果适用" tabindex="-1"><strong>4. 生命周期脚本（如果适用）</strong> <a class="header-anchor" href="#_4-生命周期脚本-如果适用" aria-label="Permalink to &quot;**4. 生命周期脚本（如果适用）**&quot;">​</a></h3><p>如果 <code>xxx</code> 是 npm 内置的生命周期脚本（如 <code>start</code>、<code>test</code>、<code>preinstall</code>、<code>postinstall</code> 等），npm 会自动触发相关的 <code>prexxx</code> 和 <code>postxxx</code> 钩子。<br> 例如：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;prestart&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;echo &#39;准备启动...&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动在 start 前执行</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node server.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;poststart&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;echo &#39;服务已启动&#39;&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 自动在 start 后执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>运行 <code>npm run start</code> 时，实际执行顺序为：<br><code>prestart</code> → <code>start</code> → <code>poststart</code>。</p><p><strong>如下：</strong></p><p><img src="`+d+`" alt="npm run 原理" loading="lazy"></p><hr><h3 id="_5-输出与错误处理" tabindex="-1"><strong>5. 输出与错误处理</strong> <a class="header-anchor" href="#_5-输出与错误处理" aria-label="Permalink to &quot;**5. 输出与错误处理**&quot;">​</a></h3><ul><li><strong>输出流</strong>：<br> 脚本的 <code>stdout</code> 和 <code>stderr</code> 会直接打印到终端。</li><li><strong>退出码</strong>： <ul><li>如果脚本成功执行（退出码为 0），npm 会静默退出。</li><li>如果脚本失败（非零退出码），npm 会报错并停止后续命令（在 <code>&amp;&amp;</code> 链中）。</li></ul></li></ul><hr><h3 id="_6-常见场景示例" tabindex="-1"><strong>6. 常见场景示例</strong> <a class="header-anchor" href="#_6-常见场景示例" aria-label="Permalink to &quot;**6. 常见场景示例**&quot;">​</a></h3><h4 id="场景-1-运行开发服务器" tabindex="-1"><strong>场景 1：运行开发服务器</strong> <a class="header-anchor" href="#场景-1-运行开发服务器" aria-label="Permalink to &quot;**场景 1：运行开发服务器**&quot;">​</a></h4><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 直接调用 vite（来自 node_modules/.bin）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>运行 <code>npm run dev</code> 等价于直接执行 <code>./node_modules/.bin/vite</code>。</p><h4 id="场景-2-组合命令" tabindex="-1"><strong>场景 2：组合命令</strong> <a class="header-anchor" href="#场景-2-组合命令" aria-label="Permalink to &quot;**场景 2：组合命令**&quot;">​</a></h4><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;deploy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm run build &amp;&amp; rsync -av dist/ user@server:/path/to/deploy&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>先执行 <code>npm run build</code>，成功后通过 <code>rsync</code> 部署。</li></ul><h4 id="场景-3-跨平台兼容" tabindex="-1"><strong>场景 3：跨平台兼容</strong> <a class="header-anchor" href="#场景-3-跨平台兼容" aria-label="Permalink to &quot;**场景 3：跨平台兼容**&quot;">​</a></h4><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;clean&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rm -rf dist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Unix</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;clean:win&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rmdir /s /q dist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Windows</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;clean:all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm run clean || npm run clean:win&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>使用 <code>||</code> 实现跨平台回退。</li></ul><hr><h3 id="_7-高级技巧" tabindex="-1"><strong>7. 高级技巧</strong> <a class="header-anchor" href="#_7-高级技巧" aria-label="Permalink to &quot;**7. 高级技巧**&quot;">​</a></h3><h4 id="传递参数" tabindex="-1"><strong>传递参数</strong> <a class="header-anchor" href="#传递参数" aria-label="Permalink to &quot;**传递参数**&quot;">​</a></h4><p>通过 <code>--</code> 向脚本传递参数：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --fix</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>对应的 <code>package.json</code>：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;lint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint .&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>实际执行：<code>eslint . --fix</code>。</p><h4 id="环境变量覆盖" tabindex="-1"><strong>环境变量覆盖</strong> <a class="header-anchor" href="#环境变量覆盖" aria-label="Permalink to &quot;**环境变量覆盖**&quot;">​</a></h4><p>临时覆盖环境变量：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">production</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>脚本中可通过 <code>process.env.NODE_ENV</code> 读取。</p><h4 id="静默运行" tabindex="-1"><strong>静默运行</strong> <a class="header-anchor" href="#静默运行" aria-label="Permalink to &quot;**静默运行**&quot;">​</a></h4><p>禁止输出 npm 日志（仅输出脚本内容）：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --silent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><h3 id="_8-与直接命令的区别" tabindex="-1"><strong>8. 与直接命令的区别</strong> <a class="header-anchor" href="#_8-与直接命令的区别" aria-label="Permalink to &quot;**8. 与直接命令的区别**&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>对比项</strong></th><th><code>npm run xxx</code></th><th>直接命令行执行（如 <code>vite</code>）</th></tr></thead><tbody><tr><td><strong>PATH 解析</strong></td><td>自动识别 <code>node_modules/.bin</code></td><td>需全局安装或写完整路径</td></tr><tr><td><strong>环境变量</strong></td><td>注入 npm 相关变量（如版本号）</td><td>仅系统环境变量</td></tr><tr><td><strong>跨平台</strong></td><td>依赖 Shell，需处理兼容性</td><td>直接依赖系统 Shell</td></tr><tr><td><strong>生命周期钩子</strong></td><td>支持 <code>pre/post</code> 钩子</td><td>无</td></tr></tbody></table><hr><h3 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><ul><li><code>npm run xxx</code> 的本质是执行 <code>package.json</code> 中定义的 Shell 命令，并为其提供项目上下文（如 <code>node_modules/.bin</code> 路径和环境变量）。</li><li><strong>核心优势</strong>：标准化项目操作（如构建、测试），隐藏技术细节，提升团队协作一致性。</li><li><strong>最佳实践</strong>：将常用操作（如启动、构建）封装到 <code>scripts</code> 中，而非依赖文档说明。</li></ul>`,54))])}const F=n(h,[["render",c]]);export{y as __pageData,F as default};
