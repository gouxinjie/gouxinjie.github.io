import{_ as n,C as e,c as l,o as p,j as a,G as t,aQ as r,a as h}from"./chunks/framework.DEi4YP2n.js";const d="/assets/redirect-1.BY1Za89e.gif",w=JSON.parse('{"title":"Nginx 实现域名跳转的几种方式","description":"","frontmatter":{},"headers":[],"relativePath":"column/Network/Nginx/开启域名跳转.md","filePath":"column/Network/Nginx/开启域名跳转.md","lastUpdated":1759136986000}'),c={name:"column/Network/Nginx/开启域名跳转.md"};function o(k,s,u,g,b,m){const i=e("ArticleMetadata");return p(),l("div",null,[s[0]||(s[0]=a("h1",{id:"nginx-实现域名跳转的几种方式",tabindex:"-1"},[h("Nginx 实现域名跳转的几种方式 "),a("a",{class:"header-anchor",href:"#nginx-实现域名跳转的几种方式","aria-label":'Permalink to "Nginx 实现域名跳转的几种方式"'},"​")],-1)),t(i),s[1]||(s[1]=r(`<nav class="table-of-contents"><ul><li><a href="#_1-301-永久重定向-推荐-seo-场景">1. 301 永久重定向（推荐 SEO 场景）</a></li><li><a href="#_2-302-临时重定向-推荐活动页-短链场景">2. 302 临时重定向（推荐活动页/短链场景）</a></li><li><a href="#_3-强制-https-跳转">3. 强制 HTTPS 跳转</a></li><li><a href="#_4-去掉或强制-www">4. 去掉或强制 www</a><ul><li><a href="#去掉-www-→-跳到裸域名">去掉 www → 跳到裸域名</a></li><li><a href="#强制加-www">强制加 www</a></li></ul></li><li><a href="#_5-正则匹配更复杂的跳转">5. 正则匹配更复杂的跳转</a></li><li><a href="#_6-总结">6. 总结</a></li><li><a href="#_7-常见问题">7. 常见问题</a><ul><li><a href="#_1-301-和-302-的区别">1. 301 和 302 的区别</a></li><li><a href="#_2-return-302-https-event-new-com-request-uri-是否是固定写法">2. return 302 https://event.new.com$request_uri; 是否是固定写法</a></li></ul></li></ul></nav><p>在日常项目中，我们经常会遇到这样的需求或情况：</p><ul><li>访问 <code>http://abc.com</code> 时，强制跳到 <code>https://www.abc.com</code>，上面域名发生变化。</li><li>旧域名 <code>old.com</code> 迁移到 <code>new.com</code>，用户访问旧域名时需要自动跳转。</li><li>为了 SEO 统一入口，<code>abc.com</code> 和 <code>www.abc.com</code> 最终都要跳到同一个主域名。</li></ul><p>对于域名跳转，我们可以在 <strong>Web 服务器层实现</strong> 也可以在 <strong>应用层中</strong>实现。下面我主要讲解在<code>Web 服务层 Nginx</code>中的实现方式。</p><p>这些场景在 <strong>Nginx</strong> 中都可以很优雅地实现，如下：</p><h2 id="_1-301-永久重定向-推荐-seo-场景" tabindex="-1">1. 301 永久重定向（推荐 SEO 场景） <a class="header-anchor" href="#_1-301-永久重定向-推荐-seo-场景" aria-label="Permalink to &quot;1. 301 永久重定向（推荐 SEO 场景）&quot;">​</a></h2><p>如果网站更换了域名，或者需要强制统一入口，可以用 <code>301</code> 永久重定向。</p><div class="language-nginx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">old.com;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 永久重定向到新域名，并保留路径和参数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 301</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https://new.com$request_uri;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>📌 说明：</p><ul><li><code>301</code>：告诉浏览器和搜索引擎，这是永久跳转，搜索引擎会更新索引。</li><li><code>$request_uri</code>：保留原路径和查询参数，比如 <code>/about?from=123</code>。</li></ul><p><strong>示例效果</strong>：访问 <code>http://old.com/about</code> → 自动跳到 <code>https://new.com/about</code></p><p><strong>如下图演示所示：</strong></p><p>我图中的演示是本地项目跳百度链接的 demo，实际项目中可以根据实际情况进行配置。</p><p><img src="`+d+`" alt="301 永久重定向示例" loading="lazy"></p><p>我本地项目的配置：</p><div class="language-nginx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localhost;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 永久重定向到新域名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  301</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https://www.baidu.com;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_2-302-临时重定向-推荐活动页-短链场景" tabindex="-1">2. 302 临时重定向（推荐活动页/短链场景） <a class="header-anchor" href="#_2-302-临时重定向-推荐活动页-短链场景" aria-label="Permalink to &quot;2. 302 临时重定向（推荐活动页/短链场景）&quot;">​</a></h2><p>如果只是临时跳转（例如活动推广、临时域名），可以使用 <code>302</code>。</p><div class="language-nginx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">promo.old.com;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 临时跳转，不会影响搜索引擎索引</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 302</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https://event.new.com$request_uri;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>📌 说明：</p><ul><li><code>302</code>：临时跳转，搜索引擎不会更新索引。</li><li>常用于：活动页、营销短链。</li></ul><h2 id="_3-强制-https-跳转" tabindex="-1">3. 强制 HTTPS 跳转 <a class="header-anchor" href="#_3-强制-https-跳转" aria-label="Permalink to &quot;3. 强制 HTTPS 跳转&quot;">​</a></h2><p>为了保证安全，通常会把所有 HTTP 请求跳转到 HTTPS。</p><div class="language-nginx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">www.abc.com;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 301</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https://www.abc.com$request_uri;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>📌 效果：访问 <code>http://www.abc.com/login</code> → 自动跳到 <code>https://www.abc.com/login</code></p><h2 id="_4-去掉或强制-www" tabindex="-1">4. 去掉或强制 <code>www</code> <a class="header-anchor" href="#_4-去掉或强制-www" aria-label="Permalink to &quot;4. 去掉或强制 \`www\`&quot;">​</a></h2><p>很多公司会要求所有请求统一成 <code>www.abc.com</code> 或 <code>abc.com</code>，这样可以避免 SEO 重复收录。</p><h3 id="去掉-www-→-跳到裸域名" tabindex="-1">去掉 <code>www</code> → 跳到裸域名 <a class="header-anchor" href="#去掉-www-→-跳到裸域名" aria-label="Permalink to &quot;去掉 \`www\` → 跳到裸域名&quot;">​</a></h3><div class="language-nginx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">www.abc.com;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 301</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https://abc.com$request_uri;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="强制加-www" tabindex="-1">强制加 <code>www</code> <a class="header-anchor" href="#强制加-www" aria-label="Permalink to &quot;强制加 \`www\`&quot;">​</a></h3><div class="language-nginx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">abc.com;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 301</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https://www.abc.com$request_uri;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_5-正则匹配更复杂的跳转" tabindex="-1">5. 正则匹配更复杂的跳转 <a class="header-anchor" href="#_5-正则匹配更复杂的跳转" aria-label="Permalink to &quot;5. 正则匹配更复杂的跳转&quot;">​</a></h2><p>有时候旧域名和新域名的路径不一样，可以用正则匹配。</p><div class="language-nginx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">old.com;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /oldpath/(.*) </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 301</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https://new.com/newpath/$1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>📌 效果：访问 <code>http://old.com/oldpath/123</code> → 跳到 <code>https://new.com/newpath/123</code></p><h2 id="_6-总结" tabindex="-1">6. 总结 <a class="header-anchor" href="#_6-总结" aria-label="Permalink to &quot;6. 总结&quot;">​</a></h2><p>在日常项目中，推荐优先使用 <strong>Nginx 配置跳转</strong>，因为：</p><ul><li>配置简单，性能高，不会增加应用层压力。</li><li><code>301/302</code> 语义明确，对 SEO 和用户体验都更友好。</li><li>可以灵活控制是否保留路径和参数。</li></ul><p><strong>常见实践</strong>：</p><ul><li><strong>SEO &amp; 域名统一</strong> → 用 <code>301</code></li><li><strong>活动页 &amp; 临时跳转</strong> → 用 <code>302</code></li><li><strong>安全要求</strong> → 强制 HTTPS</li></ul><h2 id="_7-常见问题" tabindex="-1">7. 常见问题 <a class="header-anchor" href="#_7-常见问题" aria-label="Permalink to &quot;7. 常见问题&quot;">​</a></h2><h3 id="_1-301-和-302-的区别" tabindex="-1">1. 301 和 302 的区别 <a class="header-anchor" href="#_1-301-和-302-的区别" aria-label="Permalink to &quot;1. 301 和 302 的区别&quot;">​</a></h3><p>从 <strong>用户体验</strong> 来看：</p><ul><li>浏览器访问时，都会立即跳转到新地址，看起来没什么差别（所以你测试时感觉一样）。</li></ul><p>从 <strong>底层逻辑</strong> 来看：</p><ul><li><p><strong>301 永久重定向</strong></p><ul><li>告诉浏览器/搜索引擎：这个资源以后都在新地址了。</li><li>浏览器可能会 <strong>缓存跳转规则</strong>，下次再访问旧域名时，直接跳过请求。</li><li>搜索引擎会更新索引，把权重转移到新域名。</li></ul></li><li><p><strong>302 临时重定向</strong></p><ul><li>告诉浏览器/搜索引擎：这是临时跳转，原地址以后还可能恢复。</li><li>浏览器一般不会长期缓存规则。</li><li>搜索引擎不会把权重转移到新域名。</li></ul></li></ul><p>📌 总结：</p><ul><li><strong>SEO 场景（换域名/统一入口）</strong> → 用 <strong>301</strong>。</li><li><strong>临时活动 / 营销页</strong> → 用 <strong>302</strong>。</li><li><strong>用户体验</strong>基本一样，主要区别在 <strong>缓存 &amp; 搜索引擎</strong>。</li></ul><h3 id="_2-return-302-https-event-new-com-request-uri-是否是固定写法" tabindex="-1">2. <code>return 302 https://event.new.com$request_uri;</code> 是否是固定写法 <a class="header-anchor" href="#_2-return-302-https-event-new-com-request-uri-是否是固定写法" aria-label="Permalink to &quot;2. \`return 302 https://event.new.com$request_uri;\` 是否是固定写法&quot;">​</a></h3><p>这不是唯一写法，但这是最常见、最简洁的写法。</p><ul><li><code>return 302</code> → 表示返回一个 <strong>302 临时重定向</strong> 状态码。</li><li><code>https://event.new.com</code> → 目标域名。</li><li><code>$request_uri</code> → 变量，代表原始请求的路径和参数。</li></ul><h4 id="举个例子" tabindex="-1">举个例子 <a class="header-anchor" href="#举个例子" aria-label="Permalink to &quot;举个例子&quot;">​</a></h4><p>用户请求：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://promo.old.com/sale?from=wechat</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Nginx 配置：</p><div class="language-nginx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 302</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https://event.new.com$request_uri;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>跳转结果：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://event.new.com/sale?from=wechat</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="只跳到首页-不保留路径参数" tabindex="-1">只跳到首页（不保留路径参数） <a class="header-anchor" href="#只跳到首页-不保留路径参数" aria-label="Permalink to &quot;只跳到首页（不保留路径参数）&quot;">​</a></h4><div class="language-nginx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 302</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https://event.new.com;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>👉 无论用户访问什么路径，都直接跳到 <code>https://event.new.com</code> 首页。</p><h4 id="路径改写-比如-old-→-new" tabindex="-1">路径改写（比如 old → new） <a class="header-anchor" href="#路径改写-比如-old-→-new" aria-label="Permalink to &quot;路径改写（比如 old → new）&quot;">​</a></h4><div class="language-nginx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /oldpath/(.*) </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 302</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https://event.new.com/newpath/$1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>👉 <code>http://old.com/oldpath/123</code> → <code>https://event.new.com/newpath/123</code></p><p>✅ 所以：</p><ul><li><code>return 302 https://event.new.com$request_uri;</code> 只是最常见的写法（保留路径和参数）。</li><li>你完全可以根据项目需要，改成只跳首页、改写路径、或者换成 301。</li></ul>`,66))])}const y=n(c,[["render",o]]);export{w as __pageData,y as default};
