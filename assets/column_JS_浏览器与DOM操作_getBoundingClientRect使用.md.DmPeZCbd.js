import{_ as a,C as n,c as e,o as l,j as i,G as p,aQ as h,a as d}from"./chunks/framework.DEi4YP2n.js";const k="/assets/getBoundingClientRect.BSd5XqI8.png",r="/assets/getBoundingClientRect-2.CHOm5QRA.png",C=JSON.parse('{"title":"getBoundingClientRect()方法的使用","description":"","frontmatter":{},"headers":[],"relativePath":"column/JS/浏览器与DOM操作/getBoundingClientRect使用.md","filePath":"column/JS/浏览器与DOM操作/getBoundingClientRect使用.md","lastUpdated":1758174811000}'),o={name:"column/JS/浏览器与DOM操作/getBoundingClientRect使用.md"};function g(c,s,E,y,m,b){const t=n("ArticleMetadata");return l(),e("div",null,[s[0]||(s[0]=i("h1",{id:"getboundingclientrect-方法的使用",tabindex:"-1"},[d("getBoundingClientRect()方法的使用 "),i("a",{class:"header-anchor",href:"#getboundingclientrect-方法的使用","aria-label":'Permalink to "getBoundingClientRect()方法的使用"'},"​")],-1)),p(t),s[1]||(s[1]=h('<p>介绍一下此方法的一些属性，以及具体的使用场景和一些需要注意的问题；</p><h2 id="_1-属性" tabindex="-1">1，属性 <a class="header-anchor" href="#_1-属性" aria-label="Permalink to &quot;1，属性&quot;">​</a></h2><p>此方法返回元素的大小及其相对于视口的位置；返回的是一个对象： 包括 <code>left、top、right、bottom、x、y、width 和 height</code> 这几个属性；</p><table tabindex="0"><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>Element.getBoundingClientRect().top</code></td><td>元素上边距离页面上边的距离</td></tr><tr><td><code>Element.getBoundingClientRect().left</code></td><td>元素左边距离页面左边的距离</td></tr><tr><td><code>Element.getBoundingClientRect().right</code></td><td>元素右边距离页面左边的距离</td></tr><tr><td><code>Element.getBoundingClientRect().bottom</code></td><td>元素下边距离页面上边的距离</td></tr><tr><td><code>Element.getBoundingClientRect().x</code></td><td>元素左边距离页面左边的距离</td></tr><tr><td><code>Element.getBoundingClientRect().y</code></td><td>元素右边距离页面左边的距离</td></tr><tr><td><code>Element.getBoundingClientRect().width </code></td><td>元素自身的宽度</td></tr><tr><td><code>Element.getBoundingClientRect().height </code></td><td>元素自身的高度</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">注意</p><ol><li>对象中的width和height属性是包含了内边距（padding）和边框（border）的宽度的，而不仅仅是内容部分的宽度和高度。</li><li>当页面过高且滚动的时候，元素不在视口的可视区域时 是会出现负值的。</li><li>空边框盒（没有内容的边框）会被忽略。那么这个矩形给该元素返回的width、height 值为 0，left、top值为第一个CSS盒子（按内容顺序）的 top-left值。</li></ol></div><p><strong>如图所示:</strong><img src="'+k+'" alt="在这里插入图片描述" width="500" loading="lazy"></p><h2 id="_2-使用场景" tabindex="-1">2，使用场景 <a class="header-anchor" href="#_2-使用场景" aria-label="Permalink to &quot;2，使用场景&quot;">​</a></h2><p>由图可知这是一个吸顶的菜单栏，当内容向上滚动时，总况趋势滚动到页面的上半部分时，吸顶菜单相对应的项要高亮起来，当机构趋势模块滚动到页面上半部分时，吸顶菜单的机构趋势也要高亮起来；</p><p><img src="'+r+`" alt="得到" width="350" loading="lazy"></p><p><strong>思路：</strong></p><ol><li>第一首先要监听滚动条，每一滑动都要判断距离页面上面的距离；</li><li>判断总况趋势顶部距离上边视口的高度如果小于<code>200</code>且总况趋势底部距离上边的距离大于0，就高亮总况趋势；</li></ol><p>主要代码如下： tabItem 是通过 this.$ref 获取的每一项内容模块（页面紫色和淡黄色的部分）；</p><p>实际情况还是要根据业务要求来实现，这只是记录一种思路；</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 记录选中的当前项</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tabItems.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClientRect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tabItems[i].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBoundingClientRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().top;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 此行是为了向上滚动出现负数的情况 处理上半部分</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handleTop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClientRect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClientRect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClientRect;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 获取元素容器下边 距离页面上边的距离</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handleBottom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tabItems[i].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBoundingClientRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().bottom;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // console.log(&quot;下面距离上面的高度：&quot;,handleBottom);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // handleTop &lt;= 200是为了控制上半部分  handleBottom &gt;0是为了控制向上滑动的过程中下面也需要判断</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (handleTop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handleBottom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.act_index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//退出所有的循环</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,14))])}const A=a(o,[["render",g]]);export{C as __pageData,A as default};
