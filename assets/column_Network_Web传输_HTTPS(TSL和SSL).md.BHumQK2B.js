import{_ as n,C as t,c as e,o as p,j as i,G as l,aQ as h,a as r}from"./chunks/framework.DEi4YP2n.js";const k="/assets/https-1.2trCNVki.png",d="/assets/https-2.CLLwdH-6.png",o="/assets/https-3.Dq1SV6cm.png",c="/assets/https-4.Dn9i0MdY.png",F="/assets/https-5.C1vaW3h3.png",g="/assets/https-6.DNLL1hgN.png",E="/assets/https-7.COUaVT2e.png",y="/assets/https-8.CqvCo1YX.png",b="/assets/https-9.Di3ZxycR.png",u="/assets/https-10.DgymzWPs.png",C="/assets/https-11.Cvo75DSs.png",m="/assets/https-12.Dng1OE9C.png",B="/assets/https-13.CNHyFGlA.png",S="/assets/https-14.DqN114Wj.png",_="/assets/https-15.CPkNFpun.png",D=JSON.parse('{"title":"HTTPS(TSL 和 SSL)","description":"","frontmatter":{},"headers":[],"relativePath":"column/Network/Web传输/HTTPS(TSL和SSL).md","filePath":"column/Network/Web传输/HTTPS(TSL和SSL).md","lastUpdated":1758527591000}'),q={name:"column/Network/Web传输/HTTPS(TSL和SSL).md"};function v(f,s,L,T,x,A){const a=t("ArticleMetadata");return p(),e("div",null,[s[0]||(s[0]=i("h1",{id:"https-tsl-和-ssl",tabindex:"-1"},[r("HTTPS(TSL 和 SSL) "),i("a",{class:"header-anchor",href:"#https-tsl-和-ssl","aria-label":'Permalink to "HTTPS(TSL 和 SSL)"'},"​")],-1)),l(a),s[1]||(s[1]=h('<nav class="table-of-contents"><ul><li><a href="#一、https-协议">一、HTTPS 协议</a></li><li><a href="#二、ssl-tls-协议">二、SSL/TLS 协议</a></li><li><a href="#三、三种加密方式">三、三种加密方式</a><ul><li><a href="#_1-对称加密-aes、des">1. 对称加密（AES、DES）</a></li><li><a href="#_2-非对称加密-rsa、dsa">2. 非对称加密（RSA、DSA）</a></li><li><a href="#_3-哈希算法-散列函数加密">3. 哈希算法（散列函数加密）</a></li></ul></li><li><a href="#四、使用-https">四、使用 HTTPS</a><ul><li><a href="#_4-1-openssl-安装和配置">4.1 openSSL 安装和配置</a></li><li><a href="#_4-2-openssl-生成私钥和证书">4.2 openSSL 生成私钥和证书</a></li><li><a href="#_4-3-nodejs-接口测试-https-后端服务">4.3 Nodejs 接口测试 https（后端服务）</a></li><li><a href="#_4-4-nginx-配置-https-前端服务">4.4 Nginx 配置 https（前端服务）</a></li></ul></li><li><a href="#五、什么是哈希算法">五、什么是哈希算法</a><ul><li><a href="#_1-核心特征">1. 核心特征</a></li><li><a href="#_2-常见算法">2. 常见算法</a></li><li><a href="#_3-前端-网络中的典型用途">3. 前端/网络中的典型用途</a></li><li><a href="#_4-不是加密">4. 不是加密</a></li></ul></li></ul></nav><h2 id="一、https-协议" tabindex="-1">一、HTTPS 协议 <a class="header-anchor" href="#一、https-协议" aria-label="Permalink to &quot;一、HTTPS 协议&quot;">​</a></h2><p><code>HTTPS，全称为 Hypertext Transfer Protocol Secure</code>，是一种通过加密通道传输数据的安全协议。它是 <code>HTTP</code> 协议的安全版本，用于在 Web 浏览器和 Web 服务器之间进行安全的数据传输。<code>HTTPS</code> 在传输过程中使用了<code> SSL（Secure Sockets Layer）或 TLS（Transport Layer Security）</code>协议来加密数据，确保敏感信息在传输过程中不会被窃取或篡改。</p><p><strong>http 缺点:</strong></p><p>1、通信使用明文(不加密)，内容可能会被盗用<br> 2、不验证通信方的身份，因此有可能遭遇伪装<br> 3、无法证明报文的完整性，所以有可能已遭篡改</p><p><strong>https 优点:</strong></p><p>1、信息加密<br> 2、完整性校验<br> 3、身份验证</p><p><strong>身份验证</strong></p><p>HTTPS = http + TLS/SSL</p><h2 id="二、ssl-tls-协议" tabindex="-1">二、SSL/TLS 协议 <a class="header-anchor" href="#二、ssl-tls-协议" aria-label="Permalink to &quot;二、SSL/TLS 协议&quot;">​</a></h2><p><code>SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）</code>是用于在计算机网络中提供加密通信的安全协议。</p><p>SSL：由网景公司(Netscape)于 1994 年开发，现已淘汰（最新版本 SSL 3.0 于 2015 年被弃用） TLS：是 SSL 的标准化版本，由 IETF 开发（是 SSL 的后续版本）</p><p>TLS 1.0 (1999) → TLS 1.1 (2006) → TLS 1.2 (2008) → TLS 1.3 (2018)</p><p><strong>所以说现在使用最多的是 TLS 协议（SSL 只是名声比较大）</strong></p><div class="tip custom-block github-alert"><p class="custom-block-title">面试题：SSL/TLS 是在 TCP 那一层做的加密呢？答案：应用层的下面，传输层的上面 ；也可以把它理解为一个安全层</p><p></p></div><p><code>SSL/TLS</code> 使用了三种加密方式，分别是：</p><ol><li>对称加密</li><li>非对称加密</li><li>哈希算法（散列函数加密）</li></ol><h2 id="三、三种加密方式" tabindex="-1">三、三种加密方式 <a class="header-anchor" href="#三、三种加密方式" aria-label="Permalink to &quot;三、三种加密方式&quot;">​</a></h2><p>这里只介绍加密的基本概念，如何使用见:<a href="/column/Project/性能与架构/前端常用加密方式.html#前端常用加密方式使用">常用加密方式使用</a></p><h3 id="_1-对称加密-aes、des" tabindex="-1">1. 对称加密（AES、DES） <a class="header-anchor" href="#_1-对称加密-aes、des" aria-label="Permalink to &quot;1. 对称加密（AES、DES）&quot;">​</a></h3><p><strong>比喻</strong>：就像你和朋友共用一个密码锁保险箱，你们都有相同的钥匙，你用钥匙打开保险箱，朋友也用钥匙打开保险箱，这样就可以安全地交换信息了。</p><h3 id="_2-非对称加密-rsa、dsa" tabindex="-1">2. 非对称加密（RSA、DSA） <a class="header-anchor" href="#_2-非对称加密-rsa、dsa" aria-label="Permalink to &quot;2. 非对称加密（RSA、DSA）&quot;">​</a></h3><p><strong>比喻</strong>：就像你和朋友分别有两把钥匙，一把是公钥，一把是私钥。你用公钥加密的信息，只有用私钥才能解密。朋友用公钥加密的信息，只有用私钥才能解密。这样就可以安全地交换信息了。</p><p>公钥可以对外公开，私钥必须保密。</p><h3 id="_3-哈希算法-散列函数加密" tabindex="-1">3. 哈希算法（散列函数加密） <a class="header-anchor" href="#_3-哈希算法-散列函数加密" aria-label="Permalink to &quot;3. 哈希算法（散列函数加密）&quot;">​</a></h3><p><strong>比喻</strong>：就像你和朋友都有一个密码本，你写的每一条信息都有一个对应的密码，这个密码就是哈希值。你把哈希值写在密码本上，朋友可以根据哈希值找到对应的信息。这样就可以安全地交换信息了。</p><p><strong>哈希算法的特点</strong></p><ol><li>输入任意长度的消息，输出固定长度的哈希值。</li><li>不同的输入会得到不同的哈希值。</li><li>相同的输入会得到相同的哈希值。</li><li>不能根据哈希值反推输入的消息。</li></ol><h2 id="四、使用-https" tabindex="-1">四、使用 HTTPS <a class="header-anchor" href="#四、使用-https" aria-label="Permalink to &quot;四、使用 HTTPS&quot;">​</a></h2><h3 id="_4-1-openssl-安装和配置" tabindex="-1">4.1 openSSL 安装和配置 <a class="header-anchor" href="#_4-1-openssl-安装和配置" aria-label="Permalink to &quot;4.1 openSSL 安装和配置&quot;">​</a></h3><p><a href="https://slproweb.com/products/Win32OpenSSL.html" target="_blank" rel="noreferrer">openSSL 下载地址</a>, 下载后安装即可。</p><p><img src="'+k+'" alt="openSSL安装" loading="lazy"></p><p><strong>取消勾选付费：</strong></p><p><img src="'+d+'" alt="openSSL安装" loading="lazy"></p><p><strong>打开 OpenSSL</strong></p><p>找到 OpenSSL 安装目录下的【start.bat】脚本双击启动，打开 OpenSSL 命令行窗口。</p><p><img src="'+o+'" alt="openSSL安装" loading="lazy"></p><p><strong>配置全局环境变量</strong></p><p><img src="'+c+'" alt="openSSL安装" loading="lazy"></p><p>cmd 验证：按【win+R】键打开运行窗口 → 输入【cmd】→ 点击【确定】打开命令提示符 → 输入 OpenSSL → 然后就可以使用 OpenSSL 了 <img src="'+F+`" alt="openSSL安装" loading="lazy"></p><h3 id="_4-2-openssl-生成私钥和证书" tabindex="-1">4.2 openSSL 生成私钥和证书 <a class="header-anchor" href="#_4-2-openssl-生成私钥和证书" aria-label="Permalink to &quot;4.2 openSSL 生成私钥和证书&quot;">​</a></h3><p>在 <code>SSL/TLS </code>加密通信中，一般需要使用三个文件来完成证书相关操作，即：</p><p>1、私钥文件（例如 &quot;private-key.pem&quot;），用于对加密数据进行解密操作。<br> 2、证书签名请求文件（例如 &quot;certificate.csr&quot;），用于向 CA 申请 SSL/TLS 证书签名。<br> 3、<code>SSL/TLS</code> 证书文件（例如 &quot;certificate.pem&quot;），用于对客户端发送的请求进行验证，以确保通信安全可靠。</p><h4 id="_1-生成私钥" tabindex="-1">1. 生成私钥 <a class="header-anchor" href="#_1-生成私钥" aria-label="Permalink to &quot;1. 生成私钥&quot;">​</a></h4><p>在 OpenSSL 命令行窗口中输入以下命令，即可生成一个 2048 位的 RSA 私钥文件（private-key.pem）：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> genpkey</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -algorithm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RSA</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> private-key.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -aes256</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下面是命令参数介绍</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OpenSSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 命令行工具的名称。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">genpkey:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 生成私钥的命令。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-algorithm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RSA:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 指定生成</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RSA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 私钥。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> private-key.pem:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 将生成的私钥保存为</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> private-key.pem</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文件。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-aes256:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 为私钥添加</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> AES</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 256</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 位加密，以保护私钥文件不被未经授权的人访问。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Enter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PEM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pass</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> phrase</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123456</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 密码短语生成pem文件的时候需要</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>注意</strong>: 主动输入的密码短语一定要记住，不能忘记；这里我输入的是<code>123456</code></p><p>如下： <img src="`+g+`" alt="openSSL安装" loading="lazy"></p><h4 id="_2-生成-csr-证书签名" tabindex="-1">2. 生成 csr 证书签名 <a class="header-anchor" href="#_2-生成-csr-证书签名" aria-label="Permalink to &quot;2. 生成 csr 证书签名&quot;">​</a></h4><p>在 OpenSSL 命令行窗口中输入以下命令，即可生成一个<code>certificate.csr</code>：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> private-key.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> certificate.csr</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下面是命令参数介绍</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;req&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表示使用</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X.509</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 证书请求管理器</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Certificate </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Request</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Management</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) 功能模块。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;-new&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表示生成新的证书签名请求。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;-key private-key.pem&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表示使用指定的私钥文件</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;private-key.pem&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 来加密证书签名请求中的密钥对。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;-out certificate.csr&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表示输出生成的证书签名请求到文件</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;certificate.csr&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 中。该文件中包含了申请者提供的一些证书请求信息，例如公钥、授权主体的身份信息等。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>如下</strong>：</p><p><img src="`+E+`" alt="certificate" loading="lazy"></p><p><strong>填写的信息字段说明：</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Country</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (2 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">letter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) []:CN   国家</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">State</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Province</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (full </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) []:BJ 省份</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Locality</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (eg, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">city</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) []:BJ 城市</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Organization</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (eg, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">company</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)GXJ 组织或者是个人</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Organizational</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Unit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (eg, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">section</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) []:XMKJ 机构名称</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Common</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (eg, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">fully</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> qualified</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) []:localhost 域名</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []: 邮箱地址</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Please</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> following</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;extra&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> attributes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> with</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> certificate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> request</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">A</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> challenge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []:  密码加盐 QWER1234</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="_3-生成-pem-证书文件" tabindex="-1">3. 生成 pem 证书文件 <a class="header-anchor" href="#_3-生成-pem-证书文件" aria-label="Permalink to &quot;3. 生成 pem 证书文件&quot;">​</a></h4><p>在 OpenSSL 命令行窗口中输入以下命令，即可生成一个<code>certificate.csr</code>：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> certificate.csr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -signkey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> private-key.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> certificate.pem</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下面是命令参数介绍</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;x509&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表示使用</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X.509</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 证书管理器功能模块。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;-req&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表示从输入文件（这里为</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;certificate.csr&quot;）中读取证书签名请求数据。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;-in certificate.csr&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 指定要读取的证书签名请求文件名。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;-signkey private-key.pem&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 指定使用指定的私钥文件</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;private-key.pem&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 来进行签名操作。一般情况下，签名证书的私钥应该是和之前生成</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CSR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 的私钥对应的。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;-out certificate.pem&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表示将签名后的证书输出到文件</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;certificate.pem&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 中。该文件中包含了签名后的证书信息，包括签名算法、有效期、公钥、授权主体的身份信息等。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Enter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pass</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> phrase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> private-key.pem:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 密码短语</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>如下：</strong></p><p><img src="`+y+'" alt="certificate" loading="lazy"></p><p>至此我们生成了三个文件：就可以使用<code>https</code>了</p><p>1、private-key.pem：私钥文件，用于对加密数据进行解密操作。<br> 2、certificate.csr：证书签名请求文件，用于向 CA 申请 SSL/TLS 证书签名。<br> 3、certificate.pem：<code>SSL/TLS</code> 证书文件，用于对客户端发送的请求进行验证，以确保通信安全可靠。</p><p><img src="'+b+'" alt="certificate" loading="lazy"></p><h3 id="_4-3-nodejs-接口测试-https-后端服务" tabindex="-1">4.3 Nodejs 接口测试 https（后端服务） <a class="header-anchor" href="#_4-3-nodejs-接口测试-https-后端服务" aria-label="Permalink to &quot;4.3 Nodejs 接口测试 https（后端服务）&quot;">​</a></h3><p>项目目录如下:</p><p><img src="'+u+`" alt="certificate" loading="lazy"></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">https</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      key: fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;private-key.pem&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      cert: fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;certificate.pem&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //密码短语</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      passphrase: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123456&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello HTTPS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">443</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;server is running&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>然后启动服务：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>直接访问 <a href="https://localhost" target="_blank" rel="noreferrer">https://localhost</a></strong></p><p><img src="`+C+'" alt="certificate" loading="lazy"></p><p>可以看到，访问成功了。</p><h3 id="_4-4-nginx-配置-https-前端服务" tabindex="-1">4.4 Nginx 配置 https（前端服务） <a class="header-anchor" href="#_4-4-nginx-配置-https-前端服务" aria-label="Permalink to &quot;4.4 Nginx 配置 https（前端服务）&quot;">​</a></h3><p>先下载<a href="https://nginx.org/en/download.html" target="_blank" rel="noreferrer">nginx</a></p><p><img src="'+m+'" alt="certificate" loading="lazy"></p><p><strong>注意：</strong> 如果在 windows 使用 nginx 配置 https 私钥不能设置密码。所以私钥命令使用（<code>openssl genrsa -out nginx.key 2048</code>）。</p><p>在 <code>nginx.cof</code> 的同目录下面使用 <code>cmd </code>命令行生成以下三个文件，分别是：</p><p>1、<code>nginx.key</code>：生成私钥文件。<br> 2、<code>nginx.csr</code>：生成签名文件。<br> 3、<code>nginx.crt</code>：证书文件。</p><h4 id="_1-生成私钥-1" tabindex="-1">1. 生成私钥 <a class="header-anchor" href="#_1-生成私钥-1" aria-label="Permalink to &quot;1. 生成私钥&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> genrsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2048</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-生成签名文件" tabindex="-1">2. 生成签名文件 <a class="header-anchor" href="#_2-生成签名文件" aria-label="Permalink to &quot;2. 生成签名文件&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.csr</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>如下：</strong></p><p><img src="'+B+'" alt="certificate" loading="lazy"></p><h4 id="_3-生成证书文件" tabindex="-1">3. 生成证书文件 <a class="header-anchor" href="#_3-生成证书文件" aria-label="Permalink to &quot;3. 生成证书文件&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.csr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -signkey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.crt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>如下：</strong></p><p><img src="'+S+`" alt="certificate" loading="lazy"></p><h4 id="_4-在-nginx-配置文件" tabindex="-1">4. 在 nginx 配置文件 <a class="header-anchor" href="#_4-在-nginx-配置文件" aria-label="Permalink to &quot;4. 在 nginx 配置文件&quot;">​</a></h4><p>只配置 <code>https</code> 证书，也就是监听端口为<code>443</code>的。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       listen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       443</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       server_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  localhost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       ssl_certificate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      nginx.crt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       ssl_certificate_key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  nginx.key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       ssl_session_cache</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    shared:SSL:1m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       ssl_session_timeout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  5m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #    ssl_prefer_server_ciphers  on;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">           root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">           index</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  index.html</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.htm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>配置完成后运行 <code>nginx</code> 服务。</p><p><strong>如下：</strong></p><p><img src="`+_+'" alt="certificate" loading="lazy"></p><p><code>https</code> 访问成功。</p><h2 id="五、什么是哈希算法" tabindex="-1">五、什么是哈希算法 <a class="header-anchor" href="#五、什么是哈希算法" aria-label="Permalink to &quot;五、什么是哈希算法&quot;">​</a></h2><p>一句话 ：<code>哈希算法（Hash Function）</code>是把<strong>任意长度的输入</strong>通过确定的数学变换，映射成<strong>固定长度的、看似随机的输出</strong>（哈希值 / 摘要 / 指纹）的规则。</p><hr><h3 id="_1-核心特征" tabindex="-1">1. 核心特征 <a class="header-anchor" href="#_1-核心特征" aria-label="Permalink to &quot;1. 核心特征&quot;">​</a></h3><table tabindex="0"><thead><tr><th>特征</th><th>解释</th><th>例子</th></tr></thead><tbody><tr><td><strong>确定性</strong></td><td>同一输入永远得到同一输出</td><td><code>&quot;hello&quot;</code> → <code>2cf24dba…</code> 每次一样</td></tr><tr><td><strong>定长输出</strong></td><td>输出长度固定，与输入大小无关</td><td>SHA-256 永远 256 bit</td></tr><tr><td><strong>不可逆</strong></td><td>从输出无法反推输入（单向函数）</td><td>知道 <code>5d41402a…</code> 算不回 <code>&quot;hello&quot;</code></td></tr><tr><td><strong>雪崩效应</strong></td><td>输入轻微改动，输出天差地别</td><td><code>&quot;hello&quot;</code> vs <code>&quot;hallo&quot;</code> → 几乎全变</td></tr><tr><td><strong>抗碰撞</strong></td><td>难以找到两个输入产生同一输出</td><td>理想状态下几乎不可能</td></tr></tbody></table><hr><h3 id="_2-常见算法" tabindex="-1">2. 常见算法 <a class="header-anchor" href="#_2-常见算法" aria-label="Permalink to &quot;2. 常见算法&quot;">​</a></h3><table tabindex="0"><thead><tr><th>算法</th><th>输出长度</th><th>场景</th><th>状态</th></tr></thead><tbody><tr><td>MD5</td><td>128 bit</td><td>旧校验/分片</td><td>❌ 已不安全</td></tr><tr><td>SHA-1</td><td>160 bit</td><td>Git、老 TLS</td><td>❌ 已不安全</td></tr><tr><td>SHA-256</td><td>256 bit</td><td>区块链、HTTPS、JWT</td><td>✅ 主流</td></tr><tr><td>SHA-3 / BLAKE3</td><td>可变</td><td>新一代</td><td>✅ 更安全</td></tr><tr><td>MurmurHash</td><td>32/64/128 bit</td><td>哈希表、分片</td><td>✅ 高性能、非加密</td></tr></tbody></table><hr><h3 id="_3-前端-网络中的典型用途" tabindex="-1">3. 前端/网络中的典型用途 <a class="header-anchor" href="#_3-前端-网络中的典型用途" aria-label="Permalink to &quot;3. 前端/网络中的典型用途&quot;">​</a></h3><ul><li><strong>缓存校验</strong>：文件指纹 <code>app.4e5c67.js</code> 判断是否重新下载</li><li><strong>密码存储</strong>：<code>bcrypt(password + salt)</code> 保存摘要而不是明文</li><li><strong>数据结构</strong>：JavaScript 对象、<code>Map</code>、<code>Set</code> 内部哈希表</li><li><strong>分片上传</strong>：按文件内容哈希生成 <code>etag</code> 秒传/断点续传</li><li><strong>URL 签名</strong>：<code>?sign=SHA256(secret+path+exp)</code> 防篡改</li></ul><hr><h3 id="_4-不是加密" tabindex="-1">4. 不是加密 <a class="header-anchor" href="#_4-不是加密" aria-label="Permalink to &quot;4. 不是加密&quot;">​</a></h3><p>哈希 ≠ 加密。加密是可逆的（需要密钥），哈希是单向的。<br> 因此“解密哈希”是伪概念；正确说法应是“暴力破解”或“查彩虹表”。</p><p>哈希算法是数字世界的<strong>指纹机</strong>：给任何数据拍一张不可逆、唯一且定长的“指纹照”，用来校验、索引、签名、去重、存密码。</p>',110))])}const H=n(q,[["render",v]]);export{D as __pageData,H as default};
