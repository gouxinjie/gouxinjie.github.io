import{_ as r,C as s,c as d,o as a,j as e,G as l,aQ as o,b as k,a as t,w as n,aS as c}from"./chunks/framework.DEi4YP2n.js";const A=JSON.parse('{"title":"前端本地开发构建和更新的过程","description":"","frontmatter":{},"headers":[],"relativePath":"column/ProblemNotes/日常笔记/前端本地开发构建和更新的过程.md","filePath":"column/ProblemNotes/日常笔记/前端本地开发构建和更新的过程.md","lastUpdated":1760582846000}'),E={name:"column/ProblemNotes/日常笔记/前端本地开发构建和更新的过程.md"};function u(b,i,g,m,B,y){const p=s("ArticleMetadata"),h=s("Mermaid");return a(),d("div",null,[i[1]||(i[1]=e("h1",{id:"前端本地开发构建和更新的过程",tabindex:"-1"},[t("前端本地开发构建和更新的过程 "),e("a",{class:"header-anchor",href:"#前端本地开发构建和更新的过程","aria-label":'Permalink to "前端本地开发构建和更新的过程"'},"​")],-1)),l(p),i[2]||(i[2]=o(`<nav class="table-of-contents"><ul><li><a href="#一、开发环境启动时发生了什么">一、开发环境启动时发生了什么？</a><ul><li><a href="#_1-node-进程启动">1. Node 进程启动</a></li><li><a href="#_2-依赖预构建-仅-vite">2. 依赖预构建（仅 Vite）</a></li><li><a href="#_3-启动本地服务">3. 启动本地服务</a></li></ul></li><li><a href="#二、浏览器请求资源时发生了什么">二、浏览器请求资源时发生了什么？</a><ul><li><a href="#_1-html-响应">1. HTML 响应</a></li><li><a href="#_2-模块请求">2. 模块请求</a></li><li><a href="#_3-依赖加载">3. 依赖加载</a></li></ul></li><li><a href="#三、更新代码时发生了什么-hmr-流程">三、更新代码时发生了什么？（HMR 流程）</a><ul><li><a href="#_1-文件系统监听">1. 文件系统监听</a></li><li><a href="#_2-增量编译">2. 增量编译</a></li><li><a href="#_3-hmr-消息推送">3. HMR 消息推送</a></li><li><a href="#_4-浏览器执行模块热替换">4. 浏览器执行模块热替换</a></li></ul></li><li><a href="#四、生产构建时的不同点">四、生产构建时的不同点</a></li><li><a href="#五、与-webpack-对比">五、与 webpack 对比</a></li><li><a href="#六、流程图">六、流程图</a></li></ul></nav><h2 id="一、开发环境启动时发生了什么" tabindex="-1">一、开发环境启动时发生了什么？ <a class="header-anchor" href="#一、开发环境启动时发生了什么" aria-label="Permalink to &quot;一、开发环境启动时发生了什么？&quot;">​</a></h2><p>当你运行 <code>npm run dev</code> 的时候，本质上经历了以下几个阶段：</p><h3 id="_1-node-进程启动" tabindex="-1">1. Node 进程启动 <a class="header-anchor" href="#_1-node-进程启动" aria-label="Permalink to &quot;1. Node 进程启动&quot;">​</a></h3><ul><li>Vite/webpack 的 CLI 命令启动一个 Node 进程。</li><li>Node 读取 <code>vite.config.js</code> 或 <code>webpack.config.js</code> 配置。</li><li>创建一个 <strong>Dev Server</strong>（底层一般用 <code>http</code> + <code>koa</code>/<code>express</code>）。</li></ul><h3 id="_2-依赖预构建-仅-vite" tabindex="-1">2. 依赖预构建（仅 Vite） <a class="header-anchor" href="#_2-依赖预构建-仅-vite" aria-label="Permalink to &quot;2. 依赖预构建（仅 Vite）&quot;">​</a></h3><ul><li><p>Vite 会用 <code>esbuild</code> 把 <code>node_modules</code> 里的依赖（react、react-dom、lodash…）快速预编译成 ESM 格式。</p></li><li><p>为什么要预构建？</p><ul><li><code>node_modules</code> 里通常是 CommonJS，浏览器不能直接跑。</li><li>避免浏览器发太多 <code>import</code> 请求，合并成少量 bundle。</li></ul></li><li><p>结果会缓存到 <code>node_modules/.vite/</code>。</p></li></ul><h3 id="_3-启动本地服务" tabindex="-1">3. 启动本地服务 <a class="header-anchor" href="#_3-启动本地服务" aria-label="Permalink to &quot;3. 启动本地服务&quot;">​</a></h3><ul><li><p>服务监听在 <code>http://localhost:5173</code>（端口可配）。</p></li><li><p>提供：</p><ul><li>静态文件服务（HTML、图片、字体）。</li><li>模块转换服务（JSX/TS → JS）。</li><li>HMR WebSocket 服务（实时更新通知）。</li></ul></li></ul><h2 id="二、浏览器请求资源时发生了什么" tabindex="-1">二、浏览器请求资源时发生了什么？ <a class="header-anchor" href="#二、浏览器请求资源时发生了什么" aria-label="Permalink to &quot;二、浏览器请求资源时发生了什么？&quot;">​</a></h2><p>当你打开 <code>http://localhost:5173</code>：</p><h3 id="_1-html-响应" tabindex="-1">1. HTML 响应 <a class="header-anchor" href="#_1-html-响应" aria-label="Permalink to &quot;1. HTML 响应&quot;">​</a></h3><ul><li><p>浏览器先请求 <code>/index.html</code>。</p></li><li><p>Dev Server 拦截并可能注入一些运行时代码（如 HMR 脚本）。</p></li><li><p>浏览器解析到：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/src/main.jsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h3 id="_2-模块请求" tabindex="-1">2. 模块请求 <a class="header-anchor" href="#_2-模块请求" aria-label="Permalink to &quot;2. 模块请求&quot;">​</a></h3><ul><li><p>浏览器会去请求 <code>/src/main.jsx</code>。</p></li><li><p>Dev Server 发现这是源码文件 → 走插件链处理：</p><ul><li>解析 JSX → <code>React.createElement</code></li><li>如果是 TS → 去掉类型注解</li><li>替换 <code>import.meta.env</code> → 注入环境变量</li></ul></li><li><p>返回一个浏览器能执行的 ESM 脚本。</p></li></ul><p>例如你写的：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Vite 转换后可能变成：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/node_modules/.vite/deps/react.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;h1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3-依赖加载" tabindex="-1">3. 依赖加载 <a class="header-anchor" href="#_3-依赖加载" aria-label="Permalink to &quot;3. 依赖加载&quot;">​</a></h3><ul><li>如果脚本里有 <code>import React from &#39;react&#39;</code>，浏览器会发请求 <code>/node_modules/.vite/deps/react.js</code>。</li><li>这个文件是 Vite <strong>预构建</strong>好的，直接返回。</li></ul><p>这样，整个应用就在浏览器里运行起来了。</p><h2 id="三、更新代码时发生了什么-hmr-流程" tabindex="-1">三、更新代码时发生了什么？（HMR 流程） <a class="header-anchor" href="#三、更新代码时发生了什么-hmr-流程" aria-label="Permalink to &quot;三、更新代码时发生了什么？（HMR 流程）&quot;">​</a></h2><p>当你修改 <code>App.jsx</code> 里的内容，比如：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; → </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hello World</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>会发生：</p><h3 id="_1-文件系统监听" tabindex="-1">1. 文件系统监听 <a class="header-anchor" href="#_1-文件系统监听" aria-label="Permalink to &quot;1. 文件系统监听&quot;">​</a></h3><ul><li>Dev Server 内部用 <code>chokidar</code> 监听文件变动。</li><li>一旦 <code>App.jsx</code> 变了 → 触发编译。</li></ul><h3 id="_2-增量编译" tabindex="-1">2. 增量编译 <a class="header-anchor" href="#_2-增量编译" aria-label="Permalink to &quot;2. 增量编译&quot;">​</a></h3><ul><li>Vite 用 <code>esbuild</code> 或 babel 插件只重新编译变动的文件。</li><li>不会重新打整个包（这是 webpack 慢的原因）。</li></ul><h3 id="_3-hmr-消息推送" tabindex="-1">3. HMR 消息推送 <a class="header-anchor" href="#_3-hmr-消息推送" aria-label="Permalink to &quot;3. HMR 消息推送&quot;">​</a></h3><ul><li><p>Dev Server 通过 <strong>WebSocket</strong> 向浏览器发送消息：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;update&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/src/App.jsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h3 id="_4-浏览器执行模块热替换" tabindex="-1">4. 浏览器执行模块热替换 <a class="header-anchor" href="#_4-浏览器执行模块热替换" aria-label="Permalink to &quot;4. 浏览器执行模块热替换&quot;">​</a></h3><ul><li><p>浏览器的 Vite runtime 收到消息。</p></li><li><p>它会请求 <code>/src/App.jsx</code> 最新编译结果。</p></li><li><p>只替换该模块，并触发 React Fast Refresh：</p><ul><li>UI 会更新</li><li>组件 state 不会丢失</li></ul></li></ul><h2 id="四、生产构建时的不同点" tabindex="-1">四、生产构建时的不同点 <a class="header-anchor" href="#四、生产构建时的不同点" aria-label="Permalink to &quot;四、生产构建时的不同点&quot;">​</a></h2><p>运行：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>流程和开发完全不同：</p><ol><li><p><strong>全量打包</strong></p><ul><li>Vite 内部调用 Rollup，把所有模块打成 bundle。</li><li>生成 hash 文件名（<code>app.abc123.js</code>），防止缓存污染。</li></ul></li><li><p><strong>代码优化</strong></p><ul><li>Tree-shaking（移除没用的代码）。</li><li>Scope hoisting（减少闭包层级）。</li><li>压缩（Terser/Esbuild）。</li></ul></li><li><p><strong>产物输出</strong></p><ul><li><p><code>dist/</code> 目录：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>dist/</span></span>
<span class="line"><span>├── index.html</span></span>
<span class="line"><span>├── assets/</span></span>
<span class="line"><span>│   ├── index-xxxx.js</span></span>
<span class="line"><span>│   ├── vendor-xxxx.js</span></span>
<span class="line"><span>│   └── style-xxxx.css</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul></li></ol><h2 id="五、与-webpack-对比" tabindex="-1">五、与 webpack 对比 <a class="header-anchor" href="#五、与-webpack-对比" aria-label="Permalink to &quot;五、与 webpack 对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>Vite</th><th>webpack</th></tr></thead><tbody><tr><td>开发启动</td><td>秒级（原生 ESM + esbuild）</td><td>慢（需要先打 bundle）</td></tr><tr><td>更新速度</td><td>增量更新，几乎秒级</td><td>HMR 需要 rebuild，慢</td></tr><tr><td>依赖处理</td><td>esbuild 预构建</td><td>babel/ts-loader 全量编译</td></tr><tr><td>打包器</td><td>Rollup</td><td>webpack 本身</td></tr><tr><td>插件生态</td><td>新但增长快</td><td>成熟，功能强大</td></tr></tbody></table><h2 id="六、流程图" tabindex="-1">六、流程图 <a class="header-anchor" href="#六、流程图" aria-label="Permalink to &quot;六、流程图&quot;">​</a></h2>`,42)),(a(),k(c,null,{default:n(()=>[l(h,{id:"mermaid-411",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5B%E5%BC%80%E5%8F%91%E8%80%85%E4%BF%9D%E5%AD%98%E6%96%87%E4%BB%B6%5D%20--%3E%20B(%E6%96%87%E4%BB%B6%E7%9B%91%E5%90%AC%E5%99%A8%E6%A3%80%E6%B5%8B%E5%88%B0%E5%8F%98%E5%8C%96)%3B%0A%20%20%20%20B%20--%3E%20C%7B%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E5%A2%9E%E9%87%8F%E7%BC%96%E8%AF%91%7D%3B%0A%20%20%20%20C%20--%3E%20D%5BVite%3A%20%E6%8C%89%E9%9C%80%E7%BC%96%E8%AF%91%5D%3B%0A%20%20%20%20C%20--%3E%20E%5BWebpack%3A%20%E5%BF%AB%E9%80%9F%E9%87%8D%E5%BB%BA%5D%3B%0A%20%20%20%20D%20%26%20E%20--%3E%20F%5B%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%9A%E8%BF%87%20WebSocket%20%E6%8E%A8%E9%80%81%E6%9B%B4%E6%96%B0%5D%3B%0A%20%20%20%20F%20--%3E%20G%5B%E6%B5%8F%E8%A7%88%E5%99%A8%20HMR%20%E8%BF%90%E8%A1%8C%E6%97%B6%E6%8E%A5%E6%94%B6%E6%9B%B4%E6%96%B0%5D%3B%0A%20%20%20%20G%20--%3E%20H%7B%E6%89%A7%E8%A1%8C%20HMR%7D%3B%0A%20%20%20%20H%20--%20%E6%88%90%E5%8A%9F%20--%3E%20I%5B%E6%9B%BF%E6%8D%A2%E6%A8%A1%E5%9D%97%EF%BC%8C%20%E4%BF%9D%E6%8C%81%E7%8A%B6%E6%80%81%EF%BC%8C%20UI%20%E6%97%A0%E5%88%B7%E6%96%B0%E6%9B%B4%E6%96%B0%5D%3B%0A%20%20%20%20H%20--%20%E5%A4%B1%E8%B4%A5%20--%3E%20J%5B%E8%BF%9B%E8%A1%8C%E6%95%B4%E9%A1%B5%E9%87%8D%E8%BD%BD%5D%3B%0A"})]),fallback:n(()=>[...i[0]||(i[0]=[t(" Loading... ",-1)])]),_:1}))])}const v=r(E,[["render",u]]);export{A as __pageData,v as default};
