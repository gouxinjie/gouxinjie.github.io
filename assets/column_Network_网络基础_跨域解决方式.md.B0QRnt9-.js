import{_ as n,C as t,c as l,o as e,j as i,G as p,aQ as h,a as r}from"./chunks/framework.DEi4YP2n.js";const y=JSON.parse('{"title":"跨域解决方式","description":"","frontmatter":{},"headers":[],"relativePath":"column/Network/网络基础/跨域解决方式.md","filePath":"column/Network/网络基础/跨域解决方式.md","lastUpdated":1758271646000}'),k={name:"column/Network/网络基础/跨域解决方式.md"};function d(o,s,c,g,E,b){const a=t("ArticleMetadata");return e(),l("div",null,[s[0]||(s[0]=i("h1",{id:"跨域解决方式",tabindex:"-1"},[r("跨域解决方式 "),i("a",{class:"header-anchor",href:"#跨域解决方式","aria-label":'Permalink to "跨域解决方式"'},"​")],-1)),p(a),s[1]||(s[1]=h(`<h2 id="一、什么是-跨域" tabindex="-1"><strong>一、什么是&quot;跨域&quot;？</strong> <a class="header-anchor" href="#一、什么是-跨域" aria-label="Permalink to &quot;**一、什么是&quot;跨域&quot;？**&quot;">​</a></h2><p>当浏览器向 <strong>不同源（Origin）</strong> 的服务器发起请求时，就会触发跨域限制。判断&quot;同源&quot;需同时满足以下三项：</p><ol><li><strong>协议相同</strong>（HTTP/HTTPS）</li><li><strong>域名相同</strong>（www.example.com）</li><li><strong>端口相同</strong>（80/443）</li></ol><p>❌ <strong>以下均为跨域示例</strong>：</p><ul><li><code>http://a.com</code> → <code>https://a.com</code>（协议不同）</li><li><code>https://a.com</code> → <code>https://api.a.com</code>（子域名不同）</li><li><code>https://a.com:80</code> → <code>https://a.com:8080</code>（端口不同）</li></ul><h2 id="二、为什么浏览器要限制跨域" tabindex="-1"><strong>二、为什么浏览器要限制跨域？</strong> <a class="header-anchor" href="#二、为什么浏览器要限制跨域" aria-label="Permalink to &quot;**二、为什么浏览器要限制跨域？**&quot;">​</a></h2><h3 id="_1-核心原因-安全防御" tabindex="-1"><strong>1. 核心原因：安全防御</strong> <a class="header-anchor" href="#_1-核心原因-安全防御" aria-label="Permalink to &quot;**1. 核心原因：安全防御**&quot;">​</a></h3><p>同源策略是为了防止恶意网站：</p><ul><li><strong>窃取用户数据</strong><br> 例：攻击者在页面嵌入脚本，偷偷访问用户的银行网站（假设用户已登录）。</li><li><strong>CSRF 攻击</strong><br> 利用用户 Cookie 伪造请求（如转账操作）。</li></ul><h3 id="_2-历史背景" tabindex="-1"><strong>2. 历史背景</strong> <a class="header-anchor" href="#_2-历史背景" aria-label="Permalink to &quot;**2. 历史背景**&quot;">​</a></h3><ul><li>早期 Web 没有同源策略，导致 XSS/CSRF 攻击泛滥</li><li>1995 年由 Netscape 浏览器首次引入，现成所有浏览器的标准</li></ul><h2 id="三、哪些操作会触发跨域限制" tabindex="-1"><strong>三、哪些操作会触发跨域限制？</strong> <a class="header-anchor" href="#三、哪些操作会触发跨域限制" aria-label="Permalink to &quot;**三、哪些操作会触发跨域限制？**&quot;">​</a></h2><h3 id="_1-受同源策略限制的操作" tabindex="-1"><strong>1. 受同源策略限制的操作</strong> <a class="header-anchor" href="#_1-受同源策略限制的操作" aria-label="Permalink to &quot;**1. 受同源策略限制的操作**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>操作类型</th><th>示例</th><th>是否跨域限制</th></tr></thead><tbody><tr><td>AJAX 请求/Fetch 请求</td><td><code>fetch(&#39;https://api.com/data&#39;)</code></td><td>✅ 受限</td></tr><tr><td>Web 字体</td><td><code>@font-face</code>加载外部字体</td><td>✅ 受限</td></tr><tr><td>Cookie/LocalStorage</td><td>读取其他域的存储</td><td>✅ 受限</td></tr><tr><td>drawImage()</td><td>绘制其他域的图片</td><td>✅ 受限</td></tr><tr><td>WebGL 贴图</td><td>加载其他域的 3D 模型</td><td>✅ 受限</td></tr></tbody></table><h3 id="_2-不受限的跨域资源" tabindex="-1"><strong>2. 不受限的跨域资源</strong> <a class="header-anchor" href="#_2-不受限的跨域资源" aria-label="Permalink to &quot;**2. 不受限的跨域资源**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>资源类型</th><th>原因</th></tr></thead><tbody><tr><td><code>&lt;img&gt;</code>/<code>&lt;script&gt;</code>/<code>&lt;link&gt;</code></td><td>历史遗留，但要求服务端不返回敏感数据</td></tr><tr><td>跨域 CSS</td><td>需确保<code>Content-Type: text/css</code></td></tr></tbody></table><h2 id="四、跨域问题的技术本质" tabindex="-1"><strong>四、跨域问题的技术本质</strong> <a class="header-anchor" href="#四、跨域问题的技术本质" aria-label="Permalink to &quot;**四、跨域问题的技术本质**&quot;">​</a></h2><h3 id="_1-浏览器的双重验证" tabindex="-1"><strong>1. 浏览器的双重验证</strong> <a class="header-anchor" href="#_1-浏览器的双重验证" aria-label="Permalink to &quot;**1. 浏览器的双重验证**&quot;">​</a></h3><p>当发起跨域请求时：</p><ol><li><p><strong>预检请求（Preflight）</strong><br> 对复杂请求（如带自定义头的 POST），浏览器先发<code>OPTIONS</code>请求询问服务器是否允许跨域。</p><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OPTIONS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://your-site.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Request-Method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POST</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong>服务端响应 CORS 头</strong><br> 服务器必须返回明确的许可头：</p><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Allow-Origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://your-site.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Allow-Methods</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POST, GET</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ol><h3 id="_2-常见错误场景" tabindex="-1"><strong>2. 常见错误场景</strong> <a class="header-anchor" href="#_2-常见错误场景" aria-label="Permalink to &quot;**2. 常见错误场景**&quot;">​</a></h3><ul><li><strong>后端未配置 CORS 头</strong>：返回数据但被浏览器拦截</li><li><strong>证书不匹配</strong>：HTTPS 页面请求 HTTP 接口</li><li><strong>复杂请求未处理预检</strong>：如带<code>Authorization</code>头的 API</li></ul><h2 id="五、为什么移动端-postman-没有跨域问题" tabindex="-1"><strong>五、为什么移动端/Postman 没有跨域问题？</strong> <a class="header-anchor" href="#五、为什么移动端-postman-没有跨域问题" aria-label="Permalink to &quot;**五、为什么移动端/Postman 没有跨域问题？**&quot;">​</a></h2><ul><li><strong>浏览器是唯一执行者</strong><br> 同源策略是浏览器行为，Postman/cURL/手机 App 直接发送 HTTP 请求，不受限制。</li><li><strong>Native App 无同源策略</strong><br> 安卓/iOS 应用可自由请求任意 API（但需自行处理安全问题）。</li></ul><h2 id="六、解决跨域的四种方式" tabindex="-1"><strong>六、解决跨域的四种方式</strong> <a class="header-anchor" href="#六、解决跨域的四种方式" aria-label="Permalink to &quot;**六、解决跨域的四种方式**&quot;">​</a></h2><h3 id="_6-1-jsonp-仅限-get-请求" tabindex="-1">6.1 JSONP（仅限 GET 请求） <a class="header-anchor" href="#_6-1-jsonp-仅限-get-请求" aria-label="Permalink to &quot;6.1 JSONP（仅限 GET 请求）&quot;">​</a></h3><p><strong>原理</strong>：利用 <code>&lt;script&gt;</code> 标签不受同源策略限制的特性，通过动态创建脚本实现跨域请求。<br><strong>特点</strong>：</p><ul><li>仅支持 <strong>GET</strong> 请求。</li><li>需要服务端配合返回回调函数包裹的数据（如 <code>callback(data)</code>）。</li></ul><p><strong>示例代码</strong>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> jsonp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callbackName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  script.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}?callback=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">callbackName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(script);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  window[callbackName] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(script);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jsonp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://api.example.com/data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;handleData&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>适用场景</strong>：老旧浏览器兼容、简单数据获取。</p><h3 id="_6-2-前端代理-开发环境常用" tabindex="-1">6.2 前端代理（开发环境常用） <a class="header-anchor" href="#_6-2-前端代理-开发环境常用" aria-label="Permalink to &quot;6.2 前端代理（开发环境常用）&quot;">​</a></h3><p><strong>原理</strong>：在开发环境中，前端服务器（如 Vite/Webpack）代理请求到后端，绕过浏览器同源限制。<br><strong>特点</strong>：</p><ul><li>仅用于开发环境。</li><li>无需后端配合，前端配置即可。</li></ul><p><strong>配置示例（Vite）</strong>：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  server: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    proxy: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;/api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        target: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://api.example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        changeOrigin: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        rewrite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><strong>适用场景</strong>：本地开发调试。</p><h3 id="_6-3-后端配置-cors-生产环境推荐" tabindex="-1">6.3 后端配置 CORS（生产环境推荐） <a class="header-anchor" href="#_6-3-后端配置-cors-生产环境推荐" aria-label="Permalink to &quot;6.3 后端配置 CORS（生产环境推荐）&quot;">​</a></h3><p><strong>原理</strong>：服务端通过设置响应头 <code>Access-Control-Allow-Origin</code> 允许指定域名的跨域请求。<br><strong>关键响应头</strong>：</p><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Allow-Origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  // 允许所有域名（或指定域名）</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Allow-Methods</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GET,POST,PUT  // 允许的请求方法</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Allow-Headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Content-Type  // 允许的请求头</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Allow-Credentials</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> true  // 允许携带Cookie（需前端配合）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>后端示例（Node.js）</strong>：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Access-Control-Allow-Origin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://your-frontend.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Access-Control-Allow-Methods&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET,POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>适用场景</strong>：生产环境跨域请求。</p><h3 id="_6-4-nginx-反向代理-生产环境高效方案" tabindex="-1">6.4 Nginx 反向代理（生产环境高效方案） <a class="header-anchor" href="#_6-4-nginx-反向代理-生产环境高效方案" aria-label="Permalink to &quot;6.4 Nginx 反向代理（生产环境高效方案）&quot;">​</a></h3><p><strong>原理</strong>：通过 Nginx 配置反向代理，将跨域请求转发到目标服务器，并添加 CORS 头。<br><strong>配置示例</strong>：</p><div class="language-nginx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">your-frontend.com;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /api </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://api.example.com;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    add_header </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Origin&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;https://your-frontend.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    add_header </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Methods&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;GET,POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    add_header </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Headers&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>优势</strong>：</p><ul><li>高性能，无需修改后端代码。</li><li>可统一管理跨域策略。</li></ul><p><strong>适用场景</strong>：生产环境多服务跨域。</p><h3 id="_6-5-对比总结" tabindex="-1">6.5 对比总结 <a class="header-anchor" href="#_6-5-对比总结" aria-label="Permalink to &quot;6.5 对比总结&quot;">​</a></h3><table tabindex="0"><thead><tr><th>方案</th><th>适用场景</th><th>请求类型</th><th>是否需要后端配合</th><th>安全性</th></tr></thead><tbody><tr><td><strong>JSONP</strong></td><td>老旧项目兼容</td><td>GET</td><td>是</td><td>低</td></tr><tr><td><strong>前端代理</strong></td><td>开发环境</td><td>所有</td><td>否</td><td>中</td></tr><tr><td><strong>后端 CORS</strong></td><td>生产环境</td><td>所有</td><td>是</td><td>高</td></tr><tr><td><strong>Nginx 代理</strong></td><td>生产环境</td><td>所有</td><td>否（运维配置）</td><td>高</td></tr></tbody></table>`,51))])}const F=n(k,[["render",d]]);export{y as __pageData,F as default};
