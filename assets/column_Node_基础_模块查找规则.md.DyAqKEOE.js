import{_ as i,C as o,c as n,o as d,j as s,G as t,aQ as p,a as l}from"./chunks/framework.DEi4YP2n.js";const r="/assets/find.DuSjfGbF.png",j=JSON.parse('{"title":"Node模块的引入路径查找规则","description":"","frontmatter":{},"headers":[],"relativePath":"column/Node/基础/模块查找规则.md","filePath":"column/Node/基础/模块查找规则.md","lastUpdated":1758617659000}'),c={name:"column/Node/基础/模块查找规则.md"};function h(m,e,u,k,g,b){const a=o("ArticleMetadata");return d(),n("div",null,[e[0]||(e[0]=s("h1",{id:"node模块的引入路径查找规则",tabindex:"-1"},[l("Node模块的引入路径查找规则 "),s("a",{class:"header-anchor",href:"#node模块的引入路径查找规则","aria-label":'Permalink to "Node模块的引入路径查找规则"'},"​")],-1)),t(a),e[1]||(e[1]=p('<hr><p>在前端项目中，使用 <code>npm,yarn 或 pnpm</code> 管理依赖时，模块的引入路径查找规则是由 <code>Node.js </code>的模块解析机制决定的。下</p><p>当你在代码中使用<code>import 或 require</code>语句引入模块时，<code>Node.js</code> 会按照以下顺序查找模块：</p><h2 id="一、基本查找规则" tabindex="-1">一、基本查找规则 <a class="header-anchor" href="#一、基本查找规则" aria-label="Permalink to &quot;一、基本查找规则&quot;">​</a></h2><p>1，核心模块(内置)： 如果模块名是<code>Node.js核心模块（如fs、path、http等）</code>，则直接使用核心模块。</p><p>2，相对路径： 如果模块名以<code>./或../</code>开头，则将其视为相对路径，解析为相对于当前文件的路径。</p><p>3，绝对路径： 如果模块名以<code>/</code>开头，则将其视为绝对路径，解析为文件系统中的绝对路径。</p><p>4，第三方模块：</p><p>如果模块名不是以上三种情况，则将其视为一个包名，<code>Node.js会在node_modules</code>目录中查找该包(下面会介绍)</p><h2 id="二、第三方模块的查找步骤" tabindex="-1">二、第三方模块的查找步骤 <a class="header-anchor" href="#二、第三方模块的查找步骤" aria-label="Permalink to &quot;二、第三方模块的查找步骤&quot;">​</a></h2><p>如果写入的路径不是以相对路径或者绝对路径开始的，直接写的<code>element-plus</code>:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ElementPlus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;element-plus&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此时，我们引入的是一个第三方模块时，<code>Node.js</code>会按照以下步骤查找模块：</p><p><strong>1，逐级向上查找：</strong></p><p><code>Node.js</code>会从当前文件所在目录开始，逐级向上查找<code>node_modules</code>目录，直到找到匹配的包或到达文件系统的根目录。</p><p><strong>2，读取package.json：</strong></p><p>如果在任何一级目录中找到了<code>node_modules</code>目录，并且该目录包含所需的包，则<code>Node.j</code>s会读取该包的<code>package.json</code>文件，以确定包的入口文件（通常是main字段指定的文件）。</p><p>如下图<code>element-plus</code>的入口文件：</p><p><img src="'+r+'" alt="" loading="lazy"></p><p>main配置选项：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可以看到, <code>element-plus</code>的入口文件是lib/index.js。当我们在页面中引入<code>import ElementPlus from &#39;element-plus</code> 时，它会首先进入lib/index.js 这里面；</p><blockquote><p>那如果没有package.json文件或main字段为空呢？会默认使用index.js文件作为入口文件.</p></blockquote><p><strong>3, 默认入口文件：</strong></p><p>如果没有package.json文件或main字段，Node.js会默认使用index.js文件作为入口文件。</p><hr><p>上面这几部查找过程是递归的，会向上一级目录逐层查找，直到根目录，如果还没找到，则抛出错误：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code" tabindex="0"><code><span class="line highlighted warning"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Cannot find </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;element-plus&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>官方介绍</strong>：<br><a href="https://nodejs.org/api/modules.html#loading-from-node_modules-folders" target="_blank" rel="noreferrer">https://nodejs.org/api/modules.html#loading-from-node_modules-folders</a></p>',29))])}const E=i(c,[["render",h]]);export{j as __pageData,E as default};
