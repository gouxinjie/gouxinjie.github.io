import{_ as p,C as t,c as l,o as r,j as a,G as d,aQ as h,a as i}from"./chunks/framework.DEi4YP2n.js";const e="/assets/pip-1.T0fdndvx.png",o="/assets/pip-3.CxWFUyra.png",c="/assets/pip-4.CHfMOGpd.png",C=JSON.parse('{"title":"pip 和 requirements.txt 详解","description":"","frontmatter":{},"headers":[],"relativePath":"column/Python/基础/pip包管理工具.md","filePath":"column/Python/基础/pip包管理工具.md","lastUpdated":1758696843000}'),u={name:"column/Python/基础/pip包管理工具.md"};function b(k,s,g,m,v,F){const n=t("ArticleMetadata");return r(),l("div",null,[s[0]||(s[0]=a("h1",{id:"pip-和-requirements-txt-详解",tabindex:"-1"},[a("code",null,"pip"),i(" 和 "),a("code",null,"requirements.txt"),i(" 详解 "),a("a",{class:"header-anchor",href:"#pip-和-requirements-txt-详解","aria-label":'Permalink to "`pip` 和 `requirements.txt` 详解"'},"​")],-1)),d(n),s[1]||(s[1]=h('<nav class="table-of-contents"><ul><li><a href="#一、什么是-pip">一、什么是 pip</a><ul><li><a href="#常用命令">常用命令</a></li></ul></li><li><a href="#二、什么是-requirements-txt">二、什么是 requirements.txt</a><ul><li><a href="#_1-创建-requirements-txt">1. 创建 requirements.txt</a></li><li><a href="#_2-使用-requirements-txt">2. 使用 requirements.txt</a></li><li><a href="#_3-版本控制写法">3. 版本控制写法</a></li></ul></li><li><a href="#三、为什么要用-requirements-txt">三、为什么要用 requirements.txt</a></li><li><a href="#四、常见实践">四、常见实践</a></li><li><a href="#五、pip-依赖存放位置">五、pip 依赖存放位置</a><ul><li><a href="#_1-全局安装-没有虚拟环境时">1. 全局安装（没有虚拟环境时）</a></li><li><a href="#_2-虚拟环境-推荐">2. 虚拟环境（推荐）</a></li><li><a href="#_3-为什么项目文件夹里看不到">3. 为什么项目文件夹里看不到</a></li></ul></li></ul></nav><p><img src="https://images.unsplash.com/photo-1555949963-ff9fe0c870eb?ixlib=rb-4.0.3&amp;auto=format&amp;fit=crop&amp;w=1200&amp;q=80" alt="" width="80%" loading="lazy"></p><p>在 <code>Python</code> 项目开发中,我们经常会用到第三方库，比如 <code>requests</code>、<code>flask</code>、<code>numPy</code> 等。如果不加管理，项目可能会出现“我的环境能跑，你的环境报错”的问题。</p><p>这时就需要了解两个核心工具：<strong><code>pip</code></strong> 和 <strong><code>requirements.txt</code></strong>。</p><h2 id="一、什么是-pip" tabindex="-1">一、什么是 <code>pip</code> <a class="header-anchor" href="#一、什么是-pip" aria-label="Permalink to &quot;一、什么是 `pip`&quot;">​</a></h2><p><code>pip</code> 是 <code>Python</code> 的官方包管理工具（Package Installer for Python）。它可以用来 <strong>安装、卸载和管理 Python 包</strong>。</p><p><a href="#五、pip-依赖存放位置"><code>pip</code>安装依赖存放位置</a></p><h3 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h3><ol><li><p><strong>安装包</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装最新版本的 <code>requests</code>。</p><p>如果需要指定版本：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.31.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>卸载包</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uninstall</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>查看已安装包</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>查看某个包的详细信息</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>会显示版本、安装路径、依赖等。</p></li><li><p><strong>更新包</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --upgrade</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>冻结（导出）当前环境依赖</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> freeze</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>输出类似：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Flask==2.2.5</span></span>\n<span class="line"><span>requests==2.31.0</span></span>\n<span class="line"><span>SQLAlchemy==2.0.23</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><h2 id="二、什么是-requirements-txt" tabindex="-1">二、什么是 <code>requirements.txt</code> <a class="header-anchor" href="#二、什么是-requirements-txt" aria-label="Permalink to &quot;二、什么是 `requirements.txt`&quot;">​</a></h2><p><code>requirements.txt</code> 是一个纯文本文件，用来记录项目所需的依赖库及其版本。它通常和 <code>pip</code> 配合使用，作用类似于 <strong>“项目依赖清单”</strong>。</p><h3 id="_1-创建-requirements-txt" tabindex="-1">1. 创建 <code>requirements.txt</code> <a class="header-anchor" href="#_1-创建-requirements-txt" aria-label="Permalink to &quot;1. 创建 `requirements.txt`&quot;">​</a></h3><p>最常见的方法是用：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> freeze</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>生成的文件内容可能是：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Flask==2.2.5</span></span>\n<span class="line"><span>requests==2.31.0</span></span>\n<span class="line"><span>SQLAlchemy==2.0.23</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这样别人拿到项目后，可以快速在新环境里安装所有依赖。</p><h3 id="_2-使用-requirements-txt" tabindex="-1">2. 使用 <code>requirements.txt</code> <a class="header-anchor" href="#_2-使用-requirements-txt" aria-label="Permalink to &quot;2. 使用 `requirements.txt`&quot;">​</a></h3><p>安装依赖：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样会一键安装文件里列出的所有包及对应版本。</p><h3 id="_3-版本控制写法" tabindex="-1">3. 版本控制写法 <a class="header-anchor" href="#_3-版本控制写法" aria-label="Permalink to &quot;3. 版本控制写法&quot;">​</a></h3><p>在 <code>requirements.txt</code> 里，你可以指定包的版本范围：</p><ul><li><p><strong>固定版本</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>requests==2.31.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>必须安装 2.31.0。</p></li><li><p><strong>大于等于某个版本</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Flask&gt;=2.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>小于某个版本</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Django&lt;4.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>范围</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SQLAlchemy&gt;=1.4,&lt;2.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><p>这样能避免兼容性问题。</p><h2 id="三、为什么要用-requirements-txt" tabindex="-1">三、为什么要用 <code>requirements.txt</code> <a class="header-anchor" href="#三、为什么要用-requirements-txt" aria-label="Permalink to &quot;三、为什么要用 `requirements.txt`&quot;">​</a></h2><ol><li><p><strong>保证环境一致</strong> 开发、测试、生产环境都使用同样的依赖版本，避免“本地能跑，线上报错”的情况。</p></li><li><p><strong>方便协作</strong> 团队成员只需要 <code>pip install -r requirements.txt</code> 就能快速搭建环境。</p></li><li><p><strong>便于部署</strong> 部署到服务器或容器时，也可以一键安装依赖。</p></li></ol><h2 id="四、常见实践" tabindex="-1">四、常见实践 <a class="header-anchor" href="#四、常见实践" aria-label="Permalink to &quot;四、常见实践&quot;">​</a></h2><ol><li><p><strong>虚拟环境配合 <code>requirements.txt</code></strong> 通常我们会先创建一个虚拟环境，再在其中安装依赖并生成 <code>requirements.txt</code>。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> venv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> venv</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> venv/bin/activate</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # Linux/Mac</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">venv\\Scripts\\activate</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # Windows</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这样不同项目之间不会冲突。</p></li><li><p><strong>分层依赖</strong> 有些项目会维护多个依赖文件，比如：</p><ul><li><code>requirements.txt</code>（基础依赖）</li><li><code>requirements-dev.txt</code>（开发调试用，比如 pytest, black）</li><li><code>requirements-prod.txt</code>（生产环境依赖）</li></ul></li></ol><h2 id="五、pip-依赖存放位置" tabindex="-1">五、pip 依赖存放位置 <a class="header-anchor" href="#五、pip-依赖存放位置" aria-label="Permalink to &quot;五、pip 依赖存放位置&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title"><code>pip</code>和安装的依赖都存放到了哪里，本地项目文件夹并没有？</p><p>这是个很常见的疑问 👍。<br> 你用 pip install xxx 安装依赖后，默认情况下 不会安装到你的项目文件夹，而是安装到 Python 的 site-packages 目录 下。具体情况取决于你是用 系统 Python 还是 虚拟环境。</p></div><h3 id="_1-全局安装-没有虚拟环境时" tabindex="-1">1. 全局安装（没有虚拟环境时） <a class="header-anchor" href="#_1-全局安装-没有虚拟环境时" aria-label="Permalink to &quot;1. 全局安装（没有虚拟环境时）&quot;">​</a></h3><p>如果你直接执行：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>那么包会被安装到 <strong>全局 Python 解释器的 site-packages</strong> 目录。</p><p>你可以通过下面的命令找到位置：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> site</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>输出里会有类似：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sys.path = [</span></span>\n<span class="line"><span>    &#39;...&#39;,</span></span>\n<span class="line"><span>    &#39;/usr/local/lib/python3.11/site-packages&#39;,</span></span>\n<span class="line"><span>]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>最后这一项就是 <code>pip</code> 安装依赖的路径。</p><p><strong>如图：</strong></p><p><img src="'+e+'" alt="pip-1.png" loading="lazy"></p><p>或者更直接：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>如图：</strong></p><p><img src="'+e+'" alt="pip-2.png" loading="lazy"></p><p>输出里会有：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Location: /usr/local/lib/python3.11/site-packages</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>文件资源管理位置：</strong></p><p><img src="'+o+`" alt="pip-3.png" loading="lazy"></p><h3 id="_2-虚拟环境-推荐" tabindex="-1">2. 虚拟环境（推荐） <a class="header-anchor" href="#_2-虚拟环境-推荐" aria-label="Permalink to &quot;2. 虚拟环境（推荐）&quot;">​</a></h3><p>通常开发时我们不会全局安装，而是用 <strong>虚拟环境</strong> 隔离依赖。</p><p>例如：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> venv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> venv</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> venv/bin/activate</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Linux/Mac</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">venv\\Scripts\\activate</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # Windows 下激活虚拟环境 不要忘记了</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requests</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>此时依赖会装到：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;项目目录&gt;/venv/lib/python3.11/site-packages</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>（Windows 下是 <code>venv\\Lib\\site-packages</code>）</p><p><strong>如图：</strong></p><p><img src="`+c+'" alt="pip-4.png" loading="lazy"></p><p>这样依赖就会跟随项目，而不是全局共享。</p><h3 id="_3-为什么项目文件夹里看不到" tabindex="-1">3. 为什么项目文件夹里看不到 <a class="header-anchor" href="#_3-为什么项目文件夹里看不到" aria-label="Permalink to &quot;3. 为什么项目文件夹里看不到&quot;">​</a></h3><p>因为 <code>pip</code> 安装不会把包散落到你的源码目录，而是集中放在 <strong>site-packages</strong>，Python 运行时通过 <code>sys.path</code> 去找到这些包。如果你需要“记录”依赖，可以用：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> freeze</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>下次在新的环境里可以：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>',65))])}const x=p(u,[["render",b]]);export{C as __pageData,x as default};
