import{_ as n,C as e,c as t,o as l,j as a,G as r,aQ as p,a as o}from"./chunks/framework.DEi4YP2n.js";const d="/assets/jwt.Cf2M_sCT.png",h="/assets/JWT-1.BAY2h8JK.png",k="/assets/JWT-2.Dbxn-XYs.png",F=JSON.parse('{"title":"理解 JWT token","description":"","frontmatter":{},"headers":[],"relativePath":"column/Network/Web传输/JWT鉴权.md","filePath":"column/Network/Web传输/JWT鉴权.md","lastUpdated":1757766995000}'),c={name:"column/Network/Web传输/JWT鉴权.md"};function g(u,s,b,E,m,y){const i=e("ArticleMetadata");return l(),t("div",null,[s[0]||(s[0]=a("h1",{id:"理解-jwt-token",tabindex:"-1"},[o("理解 JWT token "),a("a",{class:"header-anchor",href:"#理解-jwt-token","aria-label":'Permalink to "理解 JWT token"'},"​")],-1)),r(i),s[1]||(s[1]=p('<h2 id="_1-什么是-jwt" tabindex="-1"><strong>1. 什么是 JWT？</strong> <a class="header-anchor" href="#_1-什么是-jwt" aria-label="Permalink to &quot;**1. 什么是 JWT？**&quot;">​</a></h2><p><code>JWT（JSON Web Token）</code>是一种开放标准（RFC 7519），用于在各方之间安全传输 <code>JSON</code> 格式的信息。它由三部分组成，以点（<code>.</code>）分隔：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Header.Payload.Signature</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><a href="https://jwt.io/introduction" target="_blank" rel="noreferrer">点击进入官网</a></p><p><img src="'+d+`" alt="jwt" loading="lazy"></p><h2 id="_2-jwt-的详细结构" tabindex="-1"><strong>2. JWT 的详细结构</strong> <a class="header-anchor" href="#_2-jwt-的详细结构" aria-label="Permalink to &quot;**2. JWT 的详细结构**&quot;">​</a></h2><h3 id="_2-1-header-头部" tabindex="-1"><strong>2.1 Header（头部）</strong> <a class="header-anchor" href="#_2-1-header-头部" aria-label="Permalink to &quot;**2.1 Header（头部）**&quot;">​</a></h3><p><code>Header</code> 通常包含两部分信息：</p><ul><li><strong>令牌类型（typ）</strong>：固定为<code>JWT</code></li><li><strong>签名算法（alg）</strong>：如<code>HS256</code>（HMAC SHA-256）或<code>RS256</code>（RSA SHA-256）</li></ul><p><strong>示例</strong>：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;alg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HS256&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;typ&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;JWT&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>Base64Url 编码后</strong>：<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h3 id="_2-2-payload-负载" tabindex="-1"><strong>2.2 Payload（负载）</strong> <a class="header-anchor" href="#_2-2-payload-负载" aria-label="Permalink to &quot;**2.2 Payload（负载）**&quot;">​</a></h3><p><code>Payload</code> 包含声明（Claims），即用户数据和其他元信息。声明分为三类：</p><ol><li><p><strong>注册声明（Registered Claims）</strong>（可选但建议使用）：</p><ul><li><code>iss</code>（Issuer）：签发者</li><li><code>sub</code>（Subject）：主题（用户 ID）</li><li><code>aud</code>（Audience）：接收方</li><li><code>exp</code>（Expiration Time）：过期时间（Unix 时间戳）</li><li><code>nbf</code>（Not Before）：生效时间</li><li><code>iat</code>（Issued At）：签发时间</li></ul></li><li><p><strong>公共声明（Public Claims）</strong>：</p><ul><li>自定义但需避免冲突（建议使用命名空间，如<code>example.com/role</code>）</li></ul></li><li><p><strong>私有声明（Private Claims）</strong>：</p><ul><li>自定义数据（如<code>userId</code>、<code>role</code>）</li></ul></li></ol><p><strong>示例</strong>：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;sub&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1234567890&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John Doe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;iat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1516239022</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1516242622</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><strong>Base64Url 编码后</strong>：<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMiwiZXhwIjoxNTE2MjQyNjIyfQ</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h3 id="_2-3-signature-签名" tabindex="-1"><strong>2.3 Signature（签名）</strong> <a class="header-anchor" href="#_2-3-signature-签名" aria-label="Permalink to &quot;**2.3 Signature（签名）**&quot;">​</a></h3><p>签名用于验证 <code>Token</code> 的完整性和来源。计算方式为：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>HMACSHA256(</span></span>
<span class="line"><span>  base64UrlEncode(header) + &quot;.&quot; +</span></span>
<span class="line"><span>  base64UrlEncode(payload),</span></span>
<span class="line"><span>  secretKey</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><strong>密钥（<code>secretKey</code>）</strong>：仅服务端知晓（如 HS256）或私钥（如 RS256）</li></ul><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-4-完整-jwt-示例" tabindex="-1"><strong>2.4 完整 JWT 示例</strong> <a class="header-anchor" href="#_2-4-完整-jwt-示例" aria-label="Permalink to &quot;**2.4 完整 JWT 示例**&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMiwiZXhwIjoxNTE2MjQyNjIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_3-jwt-vs-传统-cookie-session" tabindex="-1"><strong>3. JWT vs 传统 Cookie-Session</strong> <a class="header-anchor" href="#_3-jwt-vs-传统-cookie-session" aria-label="Permalink to &quot;**3. JWT vs 传统 Cookie-Session**&quot;">​</a></h2><h3 id="_3-1-传统-cookie-session-机制" tabindex="-1"><strong>3.1 传统 Cookie-Session 机制</strong> <a class="header-anchor" href="#_3-1-传统-cookie-session-机制" aria-label="Permalink to &quot;**3.1 传统 Cookie-Session 机制**&quot;">​</a></h3><p>（1）客户端向服务器发送用户名、密码等认证信息。</p><p>（2）服务器通过验证后，服务器端生成一个 sessionId 返回给客户端，并将 sessionId 保存起来</p><p>（3）客户端自动把返回的 sessionId 存储在 cookie 中。</p><p>（4）后续客户端没发一次请求，都会在请求头携带 cookie，将 sessioId 传给服务端。</p><p>（5）服务器检查 sessionId 是否存在，如果存在执行相关业务。</p><p><img src="`+h+'" alt="传统 Cookie-Session 机制" width="80%" loading="lazy"></p><p><strong>特点</strong>：</p><p>（1）服务端需要存储 <code>Session（内存/Redis）</code>；每个用户信息都存储在服务端，随着用户量的增加，服务器的开销会增大。<br> （2）<code>session </code>存储在服务端中，在分布式系统中，这种方式将会失效，为了保证各个服务器中的 <code>session </code>存储的信息一致，需要引入额外的中间件，比如：<code>redis</code> 等。 （3）对于非浏览器客户端不适用，原因在于 <code>session</code> 依赖 <code>cookie</code>，移动端可能没有 <code>cookie</code>。<br> （4）不安全，<code>session </code>基于<code> cookie</code> ，如果 <code>cookie</code> 信息被截获，很容易进行 CSRF（跨域请求伪造攻击）</p><h3 id="_3-2-jwt-工作流程" tabindex="-1"><strong>3.2 JWT 工作流程</strong> <a class="header-anchor" href="#_3-2-jwt-工作流程" aria-label="Permalink to &quot;**3.2 JWT 工作流程**&quot;">​</a></h3><p>(1) 客户端向服务器发送用户名和密码或其他认证凭据。</p><p>(2) 服务器验证凭据，如果有效，则创建一个 <code>JWT</code> 并将其返回给客户端。</p><p>(3) 客户端将 <code>JWT</code> 存储在本地存储<code>（如 localStorage 或 sessionStorage）或 cookie</code> 中。</p><p>(4) 客户端在每次请求时将 <code>JWT</code> 放在 <code>HTTP</code> 请求头中的 <code>Authorization</code> 字段中（通常格式为 Bearer <code>&lt;token&gt;</code>）。</p><p>(5) 服务器从请求头中提取 <code>JWT</code> 并验证其签名。如果签名有效，服务器会解码 <code>JWT</code> 并检查其有效性和其他声明。如果一切正常，服务器处理请求并返回响应。</p><p><img src="'+k+`" alt="JWT 工作流程" width="80%" loading="lazy"></p><p><strong>特点</strong>：</p><ul><li><strong>无状态</strong>：服务端不存储 Token</li><li><strong>自包含</strong>：用户信息直接编码在 Token 中</li><li><strong>跨域友好</strong>：可通过 HTTP Header 传输</li></ul><h2 id="_4-jwt-的优缺点" tabindex="-1"><strong>4. JWT 的优缺点</strong> <a class="header-anchor" href="#_4-jwt-的优缺点" aria-label="Permalink to &quot;**4. JWT 的优缺点**&quot;">​</a></h2><h3 id="_4-1-优势" tabindex="-1"><strong>4.1 优势</strong> <a class="header-anchor" href="#_4-1-优势" aria-label="Permalink to &quot;**4.1 优势**&quot;">​</a></h3><ul><li><strong>无状态 &amp; 可扩展性</strong>：适合分布式系统和微服务架构</li><li><strong>跨域/跨平台支持</strong>：适合移动端 APP、第三方 API 集成</li><li><strong>安全性增强</strong>：签名防篡改（但需注意加密算法选择）</li><li><strong>性能优化</strong>：减少数据库/Session 存储查询</li></ul><h3 id="_4-2-局限性" tabindex="-1"><strong>4.2 局限性</strong> <a class="header-anchor" href="#_4-2-局限性" aria-label="Permalink to &quot;**4.2 局限性**&quot;">​</a></h3><ul><li><strong>Token 无法主动失效</strong>：一旦签发，在过期前始终有效</li><li><strong>存储安全风险</strong>：前端存储（LocalStorage）易受 XSS 攻击</li><li><strong>数据膨胀</strong>：频繁携带完整 Payload</li><li><strong>需要密钥管理</strong>：签名密钥泄露会导致系统安全崩溃</li></ul><h2 id="_5-如何选择" tabindex="-1"><strong>5. 如何选择？</strong> <a class="header-anchor" href="#_5-如何选择" aria-label="Permalink to &quot;**5. 如何选择？**&quot;">​</a></h2><h3 id="_5-1-使用-jwt-的场景" tabindex="-1"><strong>5.1 使用 JWT 的场景</strong> <a class="header-anchor" href="#_5-1-使用-jwt-的场景" aria-label="Permalink to &quot;**5.1 使用 JWT 的场景**&quot;">​</a></h3><ul><li>前后端分离架构（如 React/Vue + REST API）</li><li>跨域/跨服务认证（微服务、第三方集成）</li><li>移动端 APP 认证</li></ul><p><strong>示例代码（前端存储 JWT）</strong>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 登录后存储Token</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> login</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username, password);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jwt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, res.token);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 请求时携带</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/protected&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  headers: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Authorization: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Bearer \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localStorage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getItem</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jwt&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_5-2-使用-cookie-session-的场景" tabindex="-1"><strong>5.2 使用 Cookie-Session 的场景</strong> <a class="header-anchor" href="#_5-2-使用-cookie-session-的场景" aria-label="Permalink to &quot;**5.2 使用 Cookie-Session 的场景**&quot;">​</a></h3><ul><li>传统服务端渲染应用（如 PHP/Laravel）</li><li>需要严格会话控制的系统（如银行网站）</li><li>对 XSS 防护要求极高的场景</li></ul><p><strong>安全 Cookie 设置（Express 示例）</strong>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sessionId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, token, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  httpOnly: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  secure: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sameSite: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  maxAge: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_6-总结" tabindex="-1"><strong>6. 总结</strong> <a class="header-anchor" href="#_6-总结" aria-label="Permalink to &quot;**6. 总结**&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>JWT</th><th>Cookie-Session</th></tr></thead><tbody><tr><td><strong>状态管理</strong></td><td>无状态</td><td>有状态</td></tr><tr><td><strong>存储位置</strong></td><td>LocalStorage/Header</td><td>Cookie</td></tr><tr><td><strong>跨域支持</strong></td><td>友好</td><td>需 CORS 配置</td></tr><tr><td><strong>主动失效</strong></td><td>困难</td><td>容易</td></tr><tr><td><strong>XSS 风险</strong></td><td>较高</td><td>可防护（HttpOnly）</td></tr><tr><td><strong>CSRF 风险</strong></td><td>无</td><td>需防护</td></tr><tr><td><strong>适用场景</strong></td><td>API/移动端</td><td>传统 Web 应用</td></tr></tbody></table>`,61))])}const v=n(c,[["render",g]]);export{F as __pageData,v as default};
