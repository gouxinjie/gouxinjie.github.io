import{_ as n,C as e,c as l,o as r,j as s,G as t,aQ as p,a as h}from"./chunks/framework.DEi4YP2n.js";const b=JSON.parse('{"title":"markRaw：标记为非响应式对象","description":"","frontmatter":{},"headers":[],"relativePath":"column/Vue/响应式API进阶/markRaw.md","filePath":"column/Vue/响应式API进阶/markRaw.md","lastUpdated":1759201926000}'),k={name:"column/Vue/响应式API进阶/markRaw.md"};function d(o,a,c,u,m,E){const i=e("ArticleMetadata");return r(),l("div",null,[a[0]||(a[0]=s("h1",{id:"markraw-标记为非响应式对象",tabindex:"-1"},[h("markRaw：标记为非响应式对象 "),s("a",{class:"header-anchor",href:"#markraw-标记为非响应式对象","aria-label":'Permalink to "markRaw：标记为非响应式对象"'},"​")],-1)),t(i),a[1]||(a[1]=p(`<nav class="table-of-contents"><ul><li><a href="#_1-markraw-的作用">1. markRaw 的作用</a></li><li><a href="#_2-markraw-的用法">2. markRaw 的用法</a></li><li><a href="#_3-markraw-的应用场景">3. markRaw 的应用场景</a></li><li><a href="#_4-注意事项">4. 注意事项</a></li><li><a href="#_5-示例-在-vue-组件中使用-markraw">5. 示例：在 Vue 组件中使用 markRaw</a></li></ul></nav><p>在 <strong>Vue 3</strong> 中，<code>markRaw</code> 也是一个来自 <code>@vue/reactivity</code> 包的函数，它与 <code>reactive</code> 和 <code>ref</code> 类似，但它的作用是 <strong>标记某个对象为非响应式</strong>，即使这个对象被传递给 Vue 的响应式系统，Vue 也不会将其转化为响应式对象。</p><h3 id="_1-markraw-的作用" tabindex="-1">1. <code>markRaw</code> 的作用 <a class="header-anchor" href="#_1-markraw-的作用" aria-label="Permalink to &quot;1. \`markRaw\` 的作用&quot;">​</a></h3><p><code>markRaw</code> 用于标记一个对象，使其不会被 Vue 的响应式系统代理。这意味着它不会被 <code>Proxy</code> 包装，也不会响应数据变化，因此 Vue 不会在该对象上追踪依赖和触发更新。<code>markRaw</code> 对某个对象进行标记后，Vue 在处理该对象时会跳过它，不会做任何响应式的代理。</p><h3 id="_2-markraw-的用法" tabindex="-1">2. <code>markRaw</code> 的用法 <a class="header-anchor" href="#_2-markraw-的用法" aria-label="Permalink to &quot;2. \`markRaw\` 的用法&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { markRaw } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将对象标记为非响应式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rawObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> markRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rawObj); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { name: &#39;Vue&#39;, version: 3 }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在上面的例子中，<code>obj</code> 是一个普通的 JavaScript 对象，通过 <code>markRaw</code> 将它标记为非响应式对象。即使将其传递到 Vue 的响应式系统中，它也不会变成响应式对象。</p><h3 id="_3-markraw-的应用场景" tabindex="-1">3. <code>markRaw</code> 的应用场景 <a class="header-anchor" href="#_3-markraw-的应用场景" aria-label="Permalink to &quot;3. \`markRaw\` 的应用场景&quot;">​</a></h3><h4 id="_1-性能优化" tabindex="-1">1. <strong>性能优化</strong> <a class="header-anchor" href="#_1-性能优化" aria-label="Permalink to &quot;1. **性能优化**&quot;">​</a></h4><p>当你有一些 <strong>不需要响应式</strong> 的数据，或者这些数据不参与组件更新时，你可以使用 <code>markRaw</code> 来避免 Vue 追踪这些数据的变化，从而 <strong>提高性能</strong>。这对于一些大型对象或外部库中的数据非常有用，尤其是当你确定这些数据不会改变时。</p><h4 id="_2-与第三方库结合" tabindex="-1">2. <strong>与第三方库结合</strong> <a class="header-anchor" href="#_2-与第三方库结合" aria-label="Permalink to &quot;2. **与第三方库结合**&quot;">​</a></h4><p>有时你可能在使用外部库或组件时，它们并不需要响应式的功能。为了避免 Vue 对这些对象进行不必要的响应式代理，可以通过 <code>markRaw</code> 来标记它们，防止 Vue 进行额外的处理。例如，某些图表库、地图插件等，通常不需要与 Vue 的响应式系统交互。</p><h4 id="_3-避免深度响应式包装" tabindex="-1">3. <strong>避免深度响应式包装</strong> <a class="header-anchor" href="#_3-避免深度响应式包装" aria-label="Permalink to &quot;3. **避免深度响应式包装**&quot;">​</a></h4><p>Vue 的响应式系统通常会递归地将对象的所有嵌套属性都转化为响应式对象。如果你希望某个对象或其嵌套的部分 <strong>保持原样</strong>（不做响应式包装），可以使用 <code>markRaw</code> 来标记。</p><h4 id="_4-减少不必要的性能开销" tabindex="-1">4. <strong>减少不必要的性能开销</strong> <a class="header-anchor" href="#_4-减少不必要的性能开销" aria-label="Permalink to &quot;4. **减少不必要的性能开销**&quot;">​</a></h4><p>响应式系统需要开销，尤其是在对象很大或数据频繁变化时。如果你知道某些数据不需要响应式支持，可以通过 <code>markRaw</code> 来减少 Vue 对这些对象的追踪。</p><h3 id="_4-注意事项" tabindex="-1">4. 注意事项 <a class="header-anchor" href="#_4-注意事项" aria-label="Permalink to &quot;4. 注意事项&quot;">​</a></h3><ul><li><code>markRaw</code> 不会递归地将对象的嵌套属性转为非响应式，如果对象嵌套了响应式对象，那么它们仍然会被 Vue 处理为响应式。</li><li><code>markRaw</code> 只能用于对象，而不能用于基础类型（如字符串、数字、布尔值等）。</li><li>标记为非响应式后，<code>markRaw</code> 标记的对象 <strong>不会被 Vue 的响应式系统追踪</strong>，因此它不会触发视图更新。</li></ul><h3 id="_5-示例-在-vue-组件中使用-markraw" tabindex="-1">5. 示例：在 Vue 组件中使用 <code>markRaw</code> <a class="header-anchor" href="#_5-示例-在-vue-组件中使用-markraw" aria-label="Permalink to &quot;5. 示例：在 Vue 组件中使用 \`markRaw\`&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineComponent, markRaw, reactive } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 创建一个响应式对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      user: { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      settings: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ theme: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dark&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, language: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 markRaw</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // \`settings\` 不会是响应式对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state.settings); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { theme: &#39;dark&#39;, language: &#39;en&#39; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      state</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>在这个例子中，<code>settings</code> 被标记为非响应式对象，Vue 不会对它进行响应式处理。即使 <code>state</code> 是响应式的，<code>settings</code> 仍然是普通对象。</p>`,21))])}const y=n(k,[["render",d]]);export{b as __pageData,y as default};
