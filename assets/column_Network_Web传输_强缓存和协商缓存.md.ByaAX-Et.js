import{_ as n,C as t,c as e,o as l,j as i,G as p,aQ as h,a as r}from"./chunks/framework.DEi4YP2n.js";const k="/assets/cache.DAW79IoZ.png",d="/assets/cache-1.CgaGGePq.png",m=JSON.parse('{"title":"强缓存与协商缓存：提升 Web 性能的关键策略","description":"","frontmatter":{},"headers":[],"relativePath":"column/Network/Web传输/强缓存和协商缓存.md","filePath":"column/Network/Web传输/强缓存和协商缓存.md","lastUpdated":1757667512000}'),o={name:"column/Network/Web传输/强缓存和协商缓存.md"};function c(E,s,g,y,b,F){const a=t("ArticleMetadata");return l(),e("div",null,[s[0]||(s[0]=i("h1",{id:"强缓存与协商缓存-提升-web-性能的关键策略",tabindex:"-1"},[r("强缓存与协商缓存：提升 Web 性能的关键策略 "),i("a",{class:"header-anchor",href:"#强缓存与协商缓存-提升-web-性能的关键策略","aria-label":'Permalink to "强缓存与协商缓存：提升 Web 性能的关键策略"'},"​")],-1)),p(a),s[1]||(s[1]=h(`<p>在 Web 性能优化中，缓存机制是减少网络请求、加快页面加载速度的核心技术之一。其中，<code>强缓存（Strong Cache）</code>和<code>协商缓存（304 Not Modified）</code>是 HTTP 缓存策略的两种主要方式。</p><h2 id="_1-什么是-http-缓存" tabindex="-1"><strong>1. 什么是 HTTP 缓存？</strong> <a class="header-anchor" href="#_1-什么是-http-缓存" aria-label="Permalink to &quot;**1. 什么是 HTTP 缓存？**&quot;">​</a></h2><p><code>HTTP</code> 缓存是指浏览器或代理服务器将请求过的资源（如 <code>HTML、CSS、JS、</code>图片等）存储起来，后续请求相同的资源时可以直接从本地或就近缓存获取，而不必重新从服务器下载。缓存机制分为两类：</p><ul><li><strong>强缓存</strong>：直接使用本地缓存，不发送请求到服务器。</li><li><strong>协商缓存</strong>：向服务器验证缓存是否可用，若可用则返回 304 状态码，否则返回新资源。</li></ul><p><strong>浏览器缓存机制</strong></p><p>1，浏览器在发送请求前先判断是否命中强缓存<br> 2，命中则不发送请求直接使用缓存，否则进行下一步<br> 3，浏览器发送请求后会由服务器判断是否命中协商缓存<br> 4，命中则从缓存获取资源，否则进行下一步<br> 5，浏览器直接使用服务器返回的资源并更新缓存</p><h2 id="_2-强缓存-strong-cache" tabindex="-1"><strong>2. 强缓存（Strong Cache）</strong> <a class="header-anchor" href="#_2-强缓存-strong-cache" aria-label="Permalink to &quot;**2. 强缓存（Strong Cache）**&quot;">​</a></h2><p>强缓存是指浏览器在请求资源时，先检查本地缓存是否有效，如果有效则直接使用缓存，<strong>不发送 HTTP 请求</strong>到服务器。强缓存由以下两个<code>HTTP</code>头部控制，分别是 <code>Cache-Control和Expires：</code></p><table tabindex="0"><thead><tr><th>HTTP Header</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>Cache-Control</code></td><td>控制缓存行为（优先级高于<code>Expires</code>）</td><td><code>Cache-Control: max-age=3600</code></td></tr><tr><td><code>Expires</code></td><td>指定资源的过期时间（HTTP/1.0，受本地时间影响）</td><td><code>Expires: Wed, 21 Oct 2025 07:28:00 GMT</code></td></tr></tbody></table><h3 id="_2-1-cache-control和expires-区别" tabindex="-1">2.1 <code>Cache-Control和Expires</code> 区别 <a class="header-anchor" href="#_2-1-cache-control和expires-区别" aria-label="Permalink to &quot;2.1 \`Cache-Control和Expires\` 区别&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;"><code>Expires</code></th><th style="text-align:left;"><code>Cache-Control</code></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>HTTP 版本</strong></td><td style="text-align:left;">HTTP/1.0</td><td style="text-align:left;">HTTP/1.1</td></tr><tr><td style="text-align:left;"><strong>优先级</strong></td><td style="text-align:left;"><strong>低</strong> (如果两者同时存在，<code>Cache-Control</code> 的 <code>max-age</code> 会覆盖 <code>Expires</code>)</td><td style="text-align:left;"><strong>高</strong></td></tr><tr><td style="text-align:left;"><strong>值类型</strong></td><td style="text-align:left;"><strong>绝对时间</strong> (一个具体的 GMT 时间点，如 <code>Wed, 21 Oct 2026 07:28:00 GMT</code>)</td><td style="text-align:left;"><strong>相对时间</strong> (相对于当前时间的秒数，如 <code>max-age=300</code>)</td></tr><tr><td style="text-align:left;"><strong>控制粒度</strong></td><td style="text-align:left;">粗糙，只能设置一个过期时间</td><td style="text-align:left;">精细，提供多种指令进行复杂控制</td></tr><tr><td style="text-align:left;"><strong>主要指令</strong></td><td style="text-align:left;">无</td><td style="text-align:left;"><code>max-age</code>, <code>no-cache</code>, <code>no-store</code>, <code>public</code>, <code>private</code>, <code>must-revalidate</code>, <code>s-maxage</code> 等</td></tr><tr><td style="text-align:left;"><strong>客户端时间敏感</strong></td><td style="text-align:left;"><strong>是</strong>。如果用户本地时间不正确，会导致缓存提前失效或意外延长。</td><td style="text-align:left;"><strong>否</strong>。使用相对时间，不受客户端时间设置影响。</td></tr><tr><td style="text-align:left;"><strong>适用场景</strong></td><td style="text-align:left;">主要用于向后兼容旧的客户端和代理服务器。</td><td style="text-align:left;"><strong>现代Web开发的标准和首选</strong>，功能强大且可靠。</td></tr></tbody></table><p>在现代Web开发中，应优先使用 <code>Cache-Control</code> 的 <code>max-age</code> 指令来控制强缓存。<code>Expires</code> 通常仅作为降级方案或为了兼容性而存在。</p><h3 id="_2-2-cache-control-常见指令" tabindex="-1"><strong>2.2 <code>Cache-Control</code> 常见指令</strong> <a class="header-anchor" href="#_2-2-cache-control-常见指令" aria-label="Permalink to &quot;**2.2 \`Cache-Control\` 常见指令**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td><code>max-age=3600</code></td><td>资源缓存有效期为 3600 秒（1 小时）</td></tr><tr><td><code>no-cache</code></td><td>允许被客户端和代理服务器缓存，但在使用缓存时需要经过协商缓存来验证决定</td></tr><tr><td><code>no-store</code></td><td>所有内容都不会被缓存，即不使用强制缓存也不使用协商缓存每次请求都会下载完整的资源</td></tr><tr><td><code>public</code></td><td>允许被客户端和代理服务器缓存</td></tr><tr><td><code>private</code></td><td>仅允许浏览器缓存，不允许代理服务器缓存</td></tr></tbody></table><div class="warning custom-block github-alert"><p class="custom-block-title">Cache-Control 注意点</p><p><code>no-cache</code> 名字存在误导，其并不是不缓存数据，只是在使用缓存时需要经过协商缓存来验证决定<br><code>max-age=0 和 no-cache</code> 效果一致</p></div><h3 id="_2-3-强缓存生效流程" tabindex="-1"><strong>2.3 强缓存生效流程</strong> <a class="header-anchor" href="#_2-3-强缓存生效流程" aria-label="Permalink to &quot;**2.3 强缓存生效流程**&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">状态码 (Status)</th><th style="text-align:left;">Size 列显示</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>200</strong></td><td style="text-align:left;"><strong>(from memory cache)</strong></td><td style="text-align:left;"><strong>从内存缓存加载</strong>。资源直接从浏览器内存中读取，<strong>未向服务器发送任何请求</strong>，速度极快（0-1ms）。通常用于页面导航、同一页面的资源复用。</td></tr><tr><td style="text-align:left;"><strong>200</strong></td><td style="text-align:left;"><strong>(from disk cache)</strong></td><td style="text-align:left;"><strong>从磁盘缓存加载</strong>。资源从硬盘中读取，<strong>未向服务器发送任何请求</strong>，速度比内存缓存稍慢，但依然极快。通常用于关闭标签页后再次打开时的加载。</td></tr></tbody></table><h3 id="_2-4-适用场景" tabindex="-1"><strong>2.4 适用场景</strong> <a class="header-anchor" href="#_2-4-适用场景" aria-label="Permalink to &quot;**2.4 适用场景**&quot;">​</a></h3><ul><li>静态资源（JS/CSS/图片等）长期不变，如<code>main.[hash].js</code>。</li><li>希望减少服务器请求，提升加载速度。</li></ul><h3 id="_2-5-实战演示" tabindex="-1"><strong>2.5 实战演示</strong> <a class="header-anchor" href="#_2-5-实战演示" aria-label="Permalink to &quot;**2.5 实战演示**&quot;">​</a></h3><p>使用 <code>node express</code> 创建一个静态资源服务器，并设置强缓存。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 导入 express 模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> express</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;express&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 创建一个 Express 应用实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> express</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. 定义端口号</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3003</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4. 定义一个最简单的路由，并添加强缓存</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当用户以 GET 方法访问根路径 &#39;/&#39; 时，执行这个处理函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 设置 CORS 响应头</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 允许来自任何源的请求（生产环境应替换为具体的源，如 &#39;http://localhost:3000&#39;）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Access-Control-Allow-Origin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 允许客户端携带的请求头（根据你的前端需求调整）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Access-Control-Allow-Headers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Content-Type, Authorization&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 允许的HTTP方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Access-Control-Allow-Methods&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET, POST, PUT, DELETE, OPTIONS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 设置 Cache-Control 头，启用强缓存，有效期设置为 30 秒）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // &#39;public&#39; 表示响应可以被任何中间件（如CDN、代理服务器）和浏览器缓存</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // &#39;max-age=30&#39; 表示资源在客户端缓存 30 秒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cache-Control&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;public, max-age=30&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // （可选）设置 Expires 头，为兼容旧浏览器提供绝对过期时间</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 设置一个 5 分钟后的时间点</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // const expiresDate = new Date(Date.now() + 30 * 1000).toUTCString();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // res.set(&#39;Expires&#39;, expiresDate);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World from Express! 🚀&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5. 启动服务器，监听指定端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`✅ Express server is running at http://localhost:\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PORT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>浏览器请求如下：</p><p><img src="`+k+`" alt="" loading="lazy"></p><div class="important custom-block github-alert"><p class="custom-block-title">可以看出</p><p>第一次请求时，服务器正常返回资源。资源大小是447b。<br> 第二次请求时，资源大小是0b,说明使用了强缓存。<br> 第三次请求时，服务器正常返回资源。资源大小是367b。 因为缓存时间30秒到了，资源被重新请求。<br> 第四次请求时，资源大小是0b,说明正常使用了强缓存。</p></div><h2 id="_3-协商缓存-304-not-modified" tabindex="-1"><strong>3. 协商缓存（304 Not Modified）</strong> <a class="header-anchor" href="#_3-协商缓存-304-not-modified" aria-label="Permalink to &quot;**3. 协商缓存（304 Not Modified）**&quot;">​</a></h2><h3 id="_3-1-工作原理" tabindex="-1"><strong>3.1 工作原理</strong> <a class="header-anchor" href="#_3-1-工作原理" aria-label="Permalink to &quot;**3.1 工作原理**&quot;">​</a></h3><p>协商缓存是指浏览器携带缓存标识（如<code>Last-Modified</code>或<code>ETag</code>）向服务器发起请求，服务器检查资源是否变化：</p><ul><li><strong>未变化</strong> → 返回 <code>304 Not Modified</code>，浏览器继续使用缓存。</li><li><strong>已变化</strong> → 返回 <code>200 OK</code> 和新资源。</li></ul><p>协商缓存由以下两组 HTTP 头部控制：</p><table tabindex="0"><thead><tr><th>请求头/响应头</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>Last-Modified</code>（响应头）</td><td>资源最后修改时间</td><td><code>Last-Modified: Wed, 21 Oct 2025 07:28:00 GMT</code></td></tr><tr><td><code>If-Modified-Since</code>（请求头）</td><td>浏览器发送<code>Last-Modified</code>值给服务器验证</td><td><code>If-Modified-Since: Wed, 21 Oct 2025 07:28:00 GMT</code></td></tr><tr><td><code>ETag</code>（响应头）</td><td>资源的唯一标识（如哈希值）</td><td><code>ETag: &quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;</code></td></tr><tr><td><code>If-None-Match</code>（请求头）</td><td>浏览器发送<code>ETag</code>值给服务器验证</td><td><code>If-None-Match: &quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;</code></td></tr></tbody></table><p><strong>Last-Modified 和 If-Modified-Since</strong></p><p><code>Last-Modified</code> 表示资源的最后修改时间，值为 GMT(格林威治)格式时间字符串，精确到秒 。</p><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>浏览器第一次请求时，服务器会在响应头中返回请求资源的上次更新时间 <code>Last-Modified</code> ,当浏览器再次请求时，会在请求头中携带 <code>If-Modified-Since </code>值为上次请求返回的 <code>Last-Modified </code> . 服务器收到请求后，会根据请求头中的 <code>If-Modified-Since</code> 和该资源在服务器的最后被修改时间做对比<br> 大于 <code>If-Modified-Since</code> 重新返回资源文件，状态码为 200<br> 小于 <code>If-Modified-Since</code> 资源无更新继续使用缓存文件，状态码为 304</p></div><p><strong>ETag 和 If-None-Match</strong></p><p><code>ETag</code> 是服务器通过算法对资源内容计算出的一个唯一标识（文件 hash）其有强弱之分。</p><p>强 <code>Etag（&quot;&lt;etag_value&gt;&quot;）</code>资源发生任何改变都会立刻更新。<br> 弱 <code>Etag（W/&quot;&lt;etag_value&gt;&quot;）</code>资源发生改变时，会更新。</p><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>浏览器第一次请求时，服务器会在响应头中返回当前资源文件的一个唯一标识 <code>ETag</code>,当浏览器再次请求时，会在请求头中携带<code> If-None-Match</code> 值为上次请求返回的<code> ETag</code></p><p>通过接收的 ETag 和服务器重新生成的 ETag 进行对比<br> 不一致 重新返回资源文件，状态码为 200<br> 一致 资源无更新继续使用缓存文件，状态码为 304</p></div><h3 id="_3-2-协商缓存生效流程" tabindex="-1"><strong>3.2 协商缓存生效流程</strong> <a class="header-anchor" href="#_3-2-协商缓存生效流程" aria-label="Permalink to &quot;**3.2 协商缓存生效流程**&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>浏览器请求资源 → 携带 \`If-None-Match\`/\`If-Modified-Since\` → 服务器检查资源是否变化 →</span></span>
<span class="line"><span>   → 未变化（304 Not Modified） → 使用缓存</span></span>
<span class="line"><span>   → 已变化（200 OK） → 返回新资源</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3-3-etag-vs-last-modified" tabindex="-1"><strong>3.3 <code>ETag</code> vs <code>Last-Modified</code></strong> <a class="header-anchor" href="#_3-3-etag-vs-last-modified" aria-label="Permalink to &quot;**3.3 \`ETag\` vs \`Last-Modified\`**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>对比项</th><th><code>ETag</code></th><th><code>Last-Modified</code></th></tr></thead><tbody><tr><td>精确度</td><td>更高（基于内容哈希）</td><td>较低（基于时间）</td></tr><tr><td>性能</td><td>计算<code>ETag</code>可能消耗服务器资源</td><td>仅记录时间，开销小</td></tr><tr><td>适用场景</td><td>频繁修改的小文件（如 JSON API）</td><td>不常修改的大文件（如图片）</td></tr></tbody></table><h3 id="_3-4-适用场景" tabindex="-1"><strong>3.4 适用场景</strong> <a class="header-anchor" href="#_3-4-适用场景" aria-label="Permalink to &quot;**3.4 适用场景**&quot;">​</a></h3><ul><li>频繁更新的资源（如用户数据 API）。</li><li>需要确保用户获取最新版本，但又希望减少带宽消耗。</li></ul><h3 id="_3-5-实战演示" tabindex="-1"><strong>3.5 实战演示</strong> <a class="header-anchor" href="#_3-5-实战演示" aria-label="Permalink to &quot;**3.5 实战演示**&quot;">​</a></h3><p>使用 <code>node express</code> 创建一个静态资源服务器，并设置协商缓存。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 导入 express 模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> express</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;express&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> crypto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;crypto&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 用于生成ETag</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cors&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 引入 cors 模块</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 创建一个 Express 应用实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> express</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. 定义端口号</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3003</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4. 使用 CORS 中间件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 允许所有来源（对于开发和测试很方便，生产环境应指定具体来源）:cite[2]:cite[6]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模拟一个会变化的内容</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dynamicContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello World from Express! 🚀&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4. 定义一个路由，并设置为协商缓存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ！！！关键区别：移除或缩短强缓存时间 ！！！</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 设置为 no-cache 或很短的 max-age，表示每次使用前必须向服务器验证</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 方案A: 完全禁用强缓存，每次都验证</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cache-Control&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;no-cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 方案B: 设置一个很短的强缓存时间，之后再进行验证（更常见的做法）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // res.set(&#39;Cache-Control&#39;, &#39;max-age=0, must-revalidate&#39;);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // -------------------- 方法1: 使用 ETag / If-None-Match --------------------</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 为当前响应内容生成一个唯一标识符（ETag）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 这里使用内容的简单哈希作为示例。生产环境可以用更复杂的算法。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> currentETag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crypto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createHash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;md5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dynamicContent).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 设置 ETag 响应头</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ETag&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, currentETag);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 检查客户端请求是否携带了 If-None-Match 头，且值匹配当前的ETag</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> clientETag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.headers[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;if-none-match&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (clientETag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientETag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentETag) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 如果匹配，说明内容没有变化，返回 304 Not Modified</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;✅ ETag 匹配，返回 304&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">304</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // -------------------- 方法2: 使用 Last-Modified / If-Modified-Since (备用) --------------------</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 假设这个资源是在特定时间被创建的（这里用固定时间模拟）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> lastModifiedDate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2023-10-01T00:00:00Z&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUTCString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Last-Modified&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lastModifiedDate);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 检查客户端请求是否携带了 If-Modified-Since 头</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> clientModifiedSince</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.headers[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;if-modified-since&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // (为了演示，这里假设资源从未被修改过，所以总是返回304 if header exists)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (clientModifiedSince) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ℹ️  收到 If-Modified-Since，假设未修改&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">304</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 如果验证未通过（即内容已变化或客户端无缓存），则返回最新内容和200状态码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`🚀 返回新内容，版本: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">contentVersion</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dynamicContent);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5. 添加一个路由来模拟内容变更（用于测试）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/update-content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  contentVersion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dynamicContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Hello World from Express! 🚀 (Updated v\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">contentVersion</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">})\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Content has been updated to version \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">contentVersion</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 6. 启动服务器，监听指定端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`✅ Express server with Negotiation Cache is running at http://localhost:\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PORT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`👉 测试接口: http://localhost:\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PORT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/cache\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`👉 更新内容: http://localhost:\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PORT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/update-content\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br></div></div><p><img src="`+d+'" alt="" loading="lazy"></p><p><strong>如图所示，测试结果如下：</strong></p><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>首次访问 (GET /cache)： 状态码: 200; 响应头: 包含 ETag 和 Last-Modified; 响应体: 完整内容</p><p>再次访问 (GET /cache); 请求头: 自动包含 If-None-Match (值为之前的ETag) 和 If-Modified-Since 状态码: 304 Not Modified</p><p>更新内容后访问 (先访问 /update-content，再访问 /cache)：状态码: 200 OK;响应体: 返回新的内容 Hello World from Express! 🚀 (Updated v2)</p><p>因为内容变了，ETag也随之改变，客户端的旧 If-None-Match 不再匹配。</p></div><h2 id="_4-用户行为对缓存的影响对比表" tabindex="-1"><strong>4. 用户行为对缓存的影响对比表</strong> <a class="header-anchor" href="#_4-用户行为对缓存的影响对比表" aria-label="Permalink to &quot;**4. 用户行为对缓存的影响对比表**&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">用户行为</th><th style="text-align:left;"><strong>强缓存是否有效</strong></th><th style="text-align:left;"><strong>协商缓存是否有效</strong></th><th style="text-align:left;"><strong>缓存查找优先级</strong></th><th style="text-align:left;"><strong>发送的请求头特点</strong></th><th style="text-align:left;"><strong>结果</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>地址栏输入</strong><br><strong>或页面跳转</strong></td><td style="text-align:left;"><strong>是</strong></td><td style="text-align:left;"><strong>是</strong> (如果强缓存过期)</td><td style="text-align:left;">1. <strong>Memory Cache</strong><br>2. <strong>Disk Cache</strong><br>3. 网络请求</td><td style="text-align:left;">正常发送。<br>如果缓存未过期，<strong>不发送任何请求</strong>。</td><td style="text-align:left;"><strong>最优体验</strong>。<br>若缓存新鲜，直接使用 (<code>200 from disk cache</code>)，<strong>无网络请求</strong>。</td></tr><tr><td style="text-align:left;"><strong>普通刷新 (F5 / 刷新按钮)</strong></td><td style="text-align:left;"><strong>否</strong> (被跳过)</td><td style="text-align:left;"><strong>是</strong></td><td style="text-align:left;">1. <strong>Memory Cache</strong><br>2. <strong>Disk Cache</strong><br>3. 网络请求</td><td style="text-align:left;">会携带 <code>If-Modified-Since</code>、<code>If-None-Match</code> 等<strong>验证字段</strong>。</td><td style="text-align:left;"><strong>协商缓存生效</strong>。<br>服务器验证缓存，返回 <code>304</code> 或 <code>200</code>。<strong>有一次网络请求</strong>。</td></tr><tr><td style="text-align:left;"><strong>强制刷新</strong><br><strong>(Ctrl + F5 / Cmd + Shift + R)</strong></td><td style="text-align:left;"><strong>否</strong> (被跳过)</td><td style="text-align:left;"><strong>否</strong> (被跳过)</td><td style="text-align:left;"><strong>跳过所有缓存</strong>，直接发送网络请求。</td><td style="text-align:left;">携带 <code>Cache-Control: no-cache</code><br>和 <code>Pragma: no-cache</code>，<strong>忽略本地任何缓存</strong>。</td><td style="text-align:left;"><strong>完全不用缓存</strong>。<br>服务器必须返回最新内容 (<code>200 OK</code>)。</td></tr></tbody></table>',52))])}const C=n(o,[["render",c]]);export{m as __pageData,C as default};
