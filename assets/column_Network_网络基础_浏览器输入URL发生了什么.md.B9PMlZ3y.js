import{_ as s,c as i,o as t,aQ as n}from"./chunks/framework.ZszFOjJI.js";const l="/assets/URL-1.BxYN7LfQ.png",e="/assets/URL-2.2mnT45TV.png",r="/assets/URL-3.Bh_Be-z7.png",h="/assets/URL-4.BbN422F-.png",o="/assets/URL-5.CYsRp4OA.png",_=JSON.parse('{"title":"浏览器输入 URL 后发生的完整过程","description":"","frontmatter":{},"headers":[],"relativePath":"column/Network/网络基础/浏览器输入URL发生了什么.md","filePath":"column/Network/网络基础/浏览器输入URL发生了什么.md"}'),p={name:"column/Network/网络基础/浏览器输入URL发生了什么.md"};function d(c,a,g,k,u,b){return t(),i("div",null,[...a[0]||(a[0]=[n('<h1 id="浏览器输入-url-后发生的完整过程" tabindex="-1">浏览器输入 URL 后发生的完整过程 <a class="header-anchor" href="#浏览器输入-url-后发生的完整过程" aria-label="Permalink to &quot;浏览器输入 URL 后发生的完整过程&quot;">​</a></h1><p>当在浏览器地址栏输入 URL（如<code>https://www.example.com</code>）并按下回车时，背后发生了以下 <code>12</code> 个关键步骤，如下：</p><nav class="table-of-contents"><ul><li><a href="#一、完整流程概览图">一、完整流程概览图</a></li><li><a href="#二、详细步骤解析">二、详细步骤解析</a><ul><li><a href="#_1-url-解析与预处理">1. URL 解析与预处理</a></li><li><a href="#_2-dns-域名解析">2. DNS 域名解析</a></li><li><a href="#_3-建立-tcp-连接-三次握手">3. 建立 TCP 连接（三次握手）</a></li><li><a href="#_4-tls-握手-https-专属">4. TLS 握手（HTTPS 专属）</a></li><li><a href="#_5-发送-http-请求">5. 发送 HTTP 请求</a></li><li><a href="#_6-服务器处理请求">6. 服务器处理请求</a></li><li><a href="#_7-接收-http-响应">7. 接收 HTTP 响应</a></li><li><a href="#_8-浏览器解析与渲染">8. 浏览器解析与渲染</a></li><li><a href="#_9-加载静态资源">9. 加载静态资源</a></li><li><a href="#_10-javascript-执行">10. JavaScript 执行</a></li><li><a href="#_11-页面交互就绪">11. 页面交互就绪</a></li><li><a href="#_12-后续优化行为">12. 后续优化行为</a></li></ul></li></ul></nav><h2 id="一、完整流程概览图" tabindex="-1"><strong>一、完整流程概览图</strong> <a class="header-anchor" href="#一、完整流程概览图" aria-label="Permalink to &quot;**一、完整流程概览图**&quot;">​</a></h2><p><img src="'+l+`" alt="完整流程概览图" width="150"></p><h2 id="二、详细步骤解析" tabindex="-1"><strong>二、详细步骤解析</strong> <a class="header-anchor" href="#二、详细步骤解析" aria-label="Permalink to &quot;**二、详细步骤解析**&quot;">​</a></h2><h3 id="_1-url-解析与预处理" tabindex="-1"><strong>1. URL 解析与预处理</strong> <a class="header-anchor" href="#_1-url-解析与预处理" aria-label="Permalink to &quot;**1. URL 解析与预处理**&quot;">​</a></h3><ul><li><strong>浏览器解析 URL 结构</strong>：<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://www.example.com:443/path?query=1#section</span></span>
<span class="line"><span>└─协议 └──主机名 └─端口 └─路径 └──查询参数 └─锚点</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><strong>自动补全</strong>：<br> 若输入<code>example.com</code>，浏览器自动补全为<code>https://www.example.com</code>（根据历史记录和 HSTS 列表）</li></ul><h3 id="_2-dns-域名解析" tabindex="-1"><strong>2. DNS 域名解析</strong> <a class="header-anchor" href="#_2-dns-域名解析" aria-label="Permalink to &quot;**2. DNS 域名解析**&quot;">​</a></h3><p>浏览器通过 <strong>DNS 查询</strong> 将域名转换为 IP 地址，查询顺序如下：</p><p><img src="`+e+'" alt="域名解析"></p><ul><li><strong>关键点</strong>： <ul><li>DNS 查询使用 UDP 协议（端口 53）</li><li>结果缓存 TTL 由 DNS 服务器设置</li></ul></li></ul><h3 id="_3-建立-tcp-连接-三次握手" tabindex="-1"><strong>3. 建立 TCP 连接（三次握手）</strong> <a class="header-anchor" href="#_3-建立-tcp-连接-三次握手" aria-label="Permalink to &quot;**3. 建立 TCP 连接（三次握手）**&quot;">​</a></h3><p><img src="'+r+'" alt="TCP连接"></p><ul><li><strong>目的</strong>：确保双方收发能力正常</li><li><strong>耗时</strong>：通常 1~3 个 RTT（往返时间）</li></ul><h3 id="_4-tls-握手-https-专属" tabindex="-1"><strong>4. TLS 握手（HTTPS 专属）</strong> <a class="header-anchor" href="#_4-tls-握手-https-专属" aria-label="Permalink to &quot;**4. TLS 握手（HTTPS 专属）**&quot;">​</a></h3><p><img src="'+h+`" alt="TLS握手"></p><ul><li><strong>关键步骤</strong>： <ul><li>证书链验证（CA 机构签名）</li><li>密钥交换（ECDHE/RSA）</li><li>协商对称加密算法（如 AES_256_GCM）</li></ul></li></ul><h3 id="_5-发送-http-请求" tabindex="-1"><strong>5. 发送 HTTP 请求</strong> <a class="header-anchor" href="#_5-发送-http-请求" aria-label="Permalink to &quot;**5. 发送 HTTP 请求**&quot;">​</a></h3><p>浏览器发送的请求头示例：</p><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /index.html </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> www.example.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">User-Agent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Mozilla/5.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html,application/xhtml+xml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Cookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> session_id=abc123</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_6-服务器处理请求" tabindex="-1"><strong>6. 服务器处理请求</strong> <a class="header-anchor" href="#_6-服务器处理请求" aria-label="Permalink to &quot;**6. 服务器处理请求**&quot;">​</a></h3><p>服务器端典型处理流程：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Nginx → 反向代理 → 应用服务器（如Node.js） → 数据库查询 → 生成HTML</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_7-接收-http-响应" tabindex="-1"><strong>7. 接收 HTTP 响应</strong> <a class="header-anchor" href="#_7-接收-http-响应" aria-label="Permalink to &quot;**7. 接收 HTTP 响应**&quot;">​</a></h3><p>服务器返回的响应头示例：</p><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OK</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html; charset=utf-8</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Cache-Control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> max-age=3600</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Set-Cookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> session_id=def456</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_8-浏览器解析与渲染" tabindex="-1"><strong>8. 浏览器解析与渲染</strong> <a class="header-anchor" href="#_8-浏览器解析与渲染" aria-label="Permalink to &quot;**8. 浏览器解析与渲染**&quot;">​</a></h3><h4 id="关键子流程" tabindex="-1"><strong>关键子流程</strong>： <a class="header-anchor" href="#关键子流程" aria-label="Permalink to &quot;**关键子流程**：&quot;">​</a></h4><p><img src="`+o+'" alt="浏览器解析与渲染" width="300"></p><h4 id="优化策略" tabindex="-1"><strong>优化策略</strong>： <a class="header-anchor" href="#优化策略" aria-label="Permalink to &quot;**优化策略**：&quot;">​</a></h4><ul><li><strong>预加载扫描器</strong>：提前发现<code>&lt;img&gt;</code>/<code>&lt;script&gt;</code>资源</li><li><strong>延迟加载</strong>：对非首屏图片使用<code>loading=&quot;lazy&quot;</code></li></ul><h3 id="_9-加载静态资源" tabindex="-1"><strong>9. 加载静态资源</strong> <a class="header-anchor" href="#_9-加载静态资源" aria-label="Permalink to &quot;**9. 加载静态资源**&quot;">​</a></h3><ul><li><strong>并行下载</strong>：现代浏览器支持 6~8 个 TCP 连接并行下载</li><li><strong>优先级控制</strong>： <ul><li>CSS/阻塞 JS &gt; 图片 &gt; 异步脚本</li></ul></li></ul><h3 id="_10-javascript-执行" tabindex="-1"><strong>10. JavaScript 执行</strong> <a class="header-anchor" href="#_10-javascript-执行" aria-label="Permalink to &quot;**10. JavaScript 执行**&quot;">​</a></h3><ul><li><strong>解析阶段</strong>：词法分析 → 语法分析 → 字节码生成</li><li><strong>执行阶段</strong>： <ul><li>同步任务直接执行</li><li>异步任务（如<code>setTimeout</code>）进入事件循环队列</li></ul></li></ul><h3 id="_11-页面交互就绪" tabindex="-1"><strong>11. 页面交互就绪</strong> <a class="header-anchor" href="#_11-页面交互就绪" aria-label="Permalink to &quot;**11. 页面交互就绪**&quot;">​</a></h3><ul><li><strong>触发事件</strong>：<br><code>DOMContentLoaded</code>（DOM 解析完成） → <code>load</code>（所有资源加载完成）</li></ul><h3 id="_12-后续优化行为" tabindex="-1"><strong>12. 后续优化行为</strong> <a class="header-anchor" href="#_12-后续优化行为" aria-label="Permalink to &quot;**12. 后续优化行为**&quot;">​</a></h3><ul><li><strong>预渲染</strong>：Chrome 在后台预加载用户可能访问的下一个页面</li><li><strong>Service Worker 缓存</strong>：支持离线访问（PWA 技术）</li></ul>',40)])])}const T=s(p,[["render",d]]);export{_ as __pageData,T as default};
