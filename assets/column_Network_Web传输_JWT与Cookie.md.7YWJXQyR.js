import{_ as i,C as o,c as t,o as n,j as s,G as l,aQ as r,a as d}from"./chunks/framework.DEi4YP2n.js";const p="/assets/JWT-5.Olopjwgl.png",c="/assets/JWT-3.01gUQnM_.png",h="/assets/JWT-4.DkFT4pJd.png",g="/assets/jwt.Cf2M_sCT.png",W=JSON.parse('{"title":"JWT 与 Cookie 存储的区别与安全性分析","description":"","frontmatter":{},"headers":[],"relativePath":"column/Network/Web传输/JWT与Cookie.md","filePath":"column/Network/Web传输/JWT与Cookie.md","lastUpdated":1759999524000}'),u={name:"column/Network/Web传输/JWT与Cookie.md"};function k(b,a,m,T,C,J){const e=o("ArticleMetadata");return n(),t("div",null,[a[0]||(a[0]=s("h1",{id:"jwt-与-cookie-存储的区别与安全性分析",tabindex:"-1"},[d("JWT 与 Cookie 存储的区别与安全性分析 "),s("a",{class:"header-anchor",href:"#jwt-与-cookie-存储的区别与安全性分析","aria-label":'Permalink to "JWT 与 Cookie 存储的区别与安全性分析"'},"​")],-1)),l(e),a[1]||(a[1]=r('<nav class="table-of-contents"><ul><li><a href="#一、jwt-和-cookie-存储的区别">一、JWT 和 Cookie 存储的区别</a><ul><li><a href="#_1-存储位置">1. 存储位置</a></li><li><a href="#_2-存储大小限制">2. 存储大小限制</a></li><li><a href="#_3-自动发送">3. 自动发送</a></li></ul></li><li><a href="#二、jwt-与-cookie-的安全性对比">二、JWT 与 Cookie 的安全性对比</a><ul><li><a href="#_1-存储安全性">1. 存储安全性</a></li><li><a href="#_2-传输安全性">2. 传输安全性</a></li></ul></li><li><a href="#三、jwt-和-cookie-的安全性对比总结">三、JWT 和 Cookie 的安全性对比总结</a></li><li><a href="#四、使用场景">四、使用场景</a><ul><li><a href="#_1-使用-jwt-的场景">1. 使用 JWT 的场景</a></li><li><a href="#_2-使用-cookie-的场景">2. 使用 Cookie 的场景</a></li></ul></li><li><a href="#五、jwt-详细介绍">五、JWT 详细介绍</a><ul><li><a href="#_1-什么是-jwt">1. 什么是 JWT？</a></li><li><a href="#_2-jwt-的详细结构">2. JWT 的详细结构</a></li><li><a href="#_3-jwt-的优缺点">3. JWT 的优缺点</a></li></ul></li></ul></nav><p>日常项目中，前端和后端通常需要存储和传递一些身份信息，如用户的登录状态。常见的方式包括 <strong>JWT (JSON Web Token)</strong> 和 <strong>Cookie</strong>。这两者在实现用户身份验证时，都有各自的优点与局限，</p><h2 id="一、jwt-和-cookie-存储的区别" tabindex="-1">一、JWT 和 Cookie 存储的区别 <a class="header-anchor" href="#一、jwt-和-cookie-存储的区别" aria-label="Permalink to &quot;一、JWT 和 Cookie 存储的区别&quot;">​</a></h2><h3 id="_1-存储位置" tabindex="-1">1. 存储位置 <a class="header-anchor" href="#_1-存储位置" aria-label="Permalink to &quot;1. 存储位置&quot;">​</a></h3><ul><li><p><strong>JWT</strong>：</p><ul><li><p>通常存储在 <strong><code>localStorage</code></strong> 或 <strong><code>sessionStorage</code></strong> 中。</p><ul><li><strong>localStorage</strong>：适合长期存储，除非手动删除，浏览器会保存数据。</li><li><strong>sessionStorage</strong>：适合会话级存储，当浏览器关闭时数据会自动清除。</li></ul></li><li><p>由于存储在 <strong>JavaScript 中</strong>，JWT 是 <strong>显式存储</strong>，需要开发者手动传递。</p></li></ul></li><li><p><strong>Cookie</strong>：</p><ul><li>存储在浏览器的 <strong>Cookie 存储区</strong>，这是浏览器原生提供的一种存储机制。</li><li>Cookie 会随着每次 HTTP 请求自动发送到服务器，除非设置了 <code>HttpOnly</code> 标志。</li><li>通过设置 <code>Secure</code>、<code>SameSite</code> 等属性，可以进一步控制 Cookie 的传输方式和生命周期。</li></ul></li></ul><h3 id="_2-存储大小限制" tabindex="-1">2. 存储大小限制 <a class="header-anchor" href="#_2-存储大小限制" aria-label="Permalink to &quot;2. 存储大小限制&quot;">​</a></h3><ul><li><p><strong>JWT</strong>：</p><ul><li>每个 JWT 大小一般为 1 KB 左右（但实际大小取决于 payload 的内容）。</li><li>存储在 <code>localStorage</code> 或 <code>sessionStorage</code> 中，一般支持约 <strong>5MB</strong> 的存储限制。</li></ul></li><li><p><strong>Cookie</strong>：</p><ul><li>每个 Cookie 大小约为 <strong>4 KB</strong>。</li><li>每个域名下的 Cookie 数量通常最多限制为 <strong>20 个</strong>。</li></ul></li></ul><p><strong>Cookie 如图所示：</strong></p><p><img src="'+p+'" alt="JWT 与 Cookie 存储对比" loading="lazy"></p><h3 id="_3-自动发送" tabindex="-1">3. 自动发送 <a class="header-anchor" href="#_3-自动发送" aria-label="Permalink to &quot;3. 自动发送&quot;">​</a></h3><ul><li><p><strong>JWT</strong>：</p><ul><li>JWT 需要手动通过 HTTP 头部（<code>Authorization: Bearer &lt;token&gt;</code>）发送。</li><li>浏览器 <strong>不会自动发送 JWT</strong>，因此它不会在跨站请求中暴露。</li></ul></li><li><p><strong>Cookie</strong>：</p><ul><li>浏览器会自动随每个请求发送相同域下的 Cookie，除非设置了 <code>HttpOnly</code> 或 <code>SameSite</code> 标志。</li></ul></li></ul><p><strong>如下：</strong> 可以看到请求表头中包含了 <code>cookie</code> <img src="'+c+'" alt="JWT 请求示例" loading="lazy"></p><p><strong>后端服务也能够获取到：</strong></p><p><img src="'+h+'" alt="JWT 后端获取示例" loading="lazy"></p><h2 id="二、jwt-与-cookie-的安全性对比" tabindex="-1">二、JWT 与 Cookie 的安全性对比 <a class="header-anchor" href="#二、jwt-与-cookie-的安全性对比" aria-label="Permalink to &quot;二、JWT 与 Cookie 的安全性对比&quot;">​</a></h2><h3 id="_1-存储安全性" tabindex="-1">1. 存储安全性 <a class="header-anchor" href="#_1-存储安全性" aria-label="Permalink to &quot;1. 存储安全性&quot;">​</a></h3><h4 id="jwt" tabindex="-1"><strong>JWT</strong>： <a class="header-anchor" href="#jwt" aria-label="Permalink to &quot;**JWT**：&quot;">​</a></h4><ul><li><p><strong>XSS 攻击</strong>：由于 JWT 存储在 <code>localStorage</code> 或 <code>sessionStorage</code> 中，它们 <strong>不受同源策略保护</strong>，且可以通过 JavaScript 访问。这使得 JWT 容易受到 <strong>XSS（跨站脚本攻击）</strong> 的威胁。攻击者如果能够注入恶意脚本，就可以窃取存储在 <code>localStorage</code> 或 <code>sessionStorage</code> 中的 JWT。</p></li><li><p><strong>解决方案</strong>：</p><ul><li>对应用进行 <strong>严格的 XSS 防护</strong>，使用 CSP（内容安全策略）和适当的输入输出校验。</li><li>在存储 JWT 时，尽量减少敏感数据的暴露。</li></ul></li></ul><h4 id="cookie" tabindex="-1"><strong>Cookie</strong>： <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;**Cookie**：&quot;">​</a></h4><ul><li><p><strong>XSS 攻击</strong>：Cookie 可以通过设置 <code>HttpOnly</code> 属性来防止 JavaScript 访问，从而降低 XSS 攻击的风险。如果设置了 <code>HttpOnly</code>，即使恶意脚本注入成功，它也无法获取存储在 Cookie 中的身份信息。</p></li><li><p><strong>解决方案</strong>：</p><ul><li>使用 <code>HttpOnly</code> 来保护 Cookie 中的敏感信息。</li><li>在 Cookie 上设置 <code>Secure</code> 属性，确保它只通过 HTTPS 协议传输。</li></ul></li></ul><h3 id="_2-传输安全性" tabindex="-1">2. 传输安全性 <a class="header-anchor" href="#_2-传输安全性" aria-label="Permalink to &quot;2. 传输安全性&quot;">​</a></h3><h4 id="jwt-1" tabindex="-1"><strong>JWT</strong>： <a class="header-anchor" href="#jwt-1" aria-label="Permalink to &quot;**JWT**：&quot;">​</a></h4><ul><li><p><strong>MITM（中间人攻击）</strong>：JWT 本身没有加密功能，如果通过 <strong>HTTP</strong> 协议传输，会存在被中间人攻击的风险。攻击者可以截获并窃取 JWT。因此，必须始终通过 <strong>HTTPS</strong> 来传输 JWT，确保数据在传输过程中被加密。</p></li><li><p><strong>加密</strong>：如果 JWT 的内容包含敏感信息，可以使用 <strong>JWE（JSON Web Encryption）</strong> 来加密它，但通常使用 JWT 主要是签名，而不是加密。</p></li></ul><h4 id="cookie-1" tabindex="-1"><strong>Cookie</strong>： <a class="header-anchor" href="#cookie-1" aria-label="Permalink to &quot;**Cookie**：&quot;">​</a></h4><ul><li><p><strong>MITM（中间人攻击）</strong>：如果 Cookie 没有设置 <code>Secure</code> 标志，攻击者可以在不安全的 HTTP 连接下拦截 Cookie。设置 <code>Secure</code> 可以确保 Cookie 只在 HTTPS 协议下发送，从而降低被截获的风险。</p></li><li><p><strong>CSRF（跨站请求伪造）</strong>：由于 Cookie 会自动随每个请求发送，如果没有采取防护措施，容易受到 <strong>CSRF 攻击</strong>。可以通过设置 <code>SameSite</code> 属性来防止 Cookie 被跨站请求发送。</p></li></ul><h2 id="三、jwt-和-cookie-的安全性对比总结" tabindex="-1">三、JWT 和 Cookie 的安全性对比总结 <a class="header-anchor" href="#三、jwt-和-cookie-的安全性对比总结" aria-label="Permalink to &quot;三、JWT 和 Cookie 的安全性对比总结&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>特性</strong></th><th><strong>JWT</strong></th><th><strong>Cookie</strong></th></tr></thead><tbody><tr><td><strong>存储位置</strong></td><td><code>localStorage</code> 或 <code>sessionStorage</code></td><td>浏览器的 Cookie 存储区</td></tr><tr><td><strong>自动发送</strong></td><td>需要手动通过 HTTP 头发送（<code>Authorization</code>）</td><td>自动随每个请求发送</td></tr><tr><td><strong>存储安全</strong></td><td>容易受到 XSS 攻击</td><td>可以通过 <code>HttpOnly</code> 防止 XSS 攻击</td></tr><tr><td><strong>传输安全</strong></td><td>需要通过 HTTPS 加密，JWT 本身不加密</td><td>需要设置 <code>Secure</code> 和 <code>SameSite</code> 防止 MITM 和 CSRF</td></tr><tr><td><strong>防护机制</strong></td><td>无内建防护机制，需手动配置</td><td><code>HttpOnly</code>、<code>Secure</code>、<code>SameSite</code> 属性提供内建防护</td></tr><tr><td><strong>使用场景</strong></td><td>前后端分离，跨域认证，无状态认证</td><td>多页 Web 应用，持久会话</td></tr></tbody></table><h2 id="四、使用场景" tabindex="-1">四、使用场景 <a class="header-anchor" href="#四、使用场景" aria-label="Permalink to &quot;四、使用场景&quot;">​</a></h2><h3 id="_1-使用-jwt-的场景" tabindex="-1">1. 使用 JWT 的场景 <a class="header-anchor" href="#_1-使用-jwt-的场景" aria-label="Permalink to &quot;1. 使用 JWT 的场景&quot;">​</a></h3><ul><li><strong>前后端分离</strong>：JWT 非常适合前后端分离的应用场景，前端通过 API 与后端进行交互，后端使用 JWT 进行认证和授权。</li><li><strong>无状态认证</strong>：JWT 是无状态的，后端无需存储会话信息。每个请求都带有完整的身份信息，后端可以直接验证 JWT 的签名。</li><li><strong>跨域认证</strong>：由于 JWT 可以通过 HTTP 头传递，它非常适合跨域认证的场景。</li></ul><h3 id="_2-使用-cookie-的场景" tabindex="-1">2. 使用 Cookie 的场景 <a class="header-anchor" href="#_2-使用-cookie-的场景" aria-label="Permalink to &quot;2. 使用 Cookie 的场景&quot;">​</a></h3><ul><li><strong>传统的 Web 应用</strong>：Cookie 适合在传统的多页 Web 应用中使用，特别是在没有前后端分离的场景下。</li><li><strong>持久会话</strong>：Cookie 适用于需要保持用户在多个请求中的会话信息，特别是在浏览器关闭后，Cookie 可以根据设置的过期时间保持。</li></ul><div class="tip custom-block"><p class="custom-block-title">提示</p><p><strong>JWT</strong> 适合无状态认证和前后端分离的应用，尤其在跨域认证时表现出色。但它的存储安全性相对较弱，容易受到 XSS 攻击。<br><strong>Cookie</strong> 适合传统的 Web 应用，支持 <code>HttpOnly</code> 和 <code>SameSite</code> 属性，可以更好地保护敏感信息，防止 XSS 和 CSRF 攻击。</p></div><h2 id="五、jwt-详细介绍" tabindex="-1">五、JWT 详细介绍 <a class="header-anchor" href="#五、jwt-详细介绍" aria-label="Permalink to &quot;五、JWT 详细介绍&quot;">​</a></h2><h3 id="_1-什么是-jwt" tabindex="-1">1. 什么是 JWT？ <a class="header-anchor" href="#_1-什么是-jwt" aria-label="Permalink to &quot;1. 什么是 JWT？&quot;">​</a></h3><p><code>JWT（JSON Web Token）</code>是一种开放标准（RFC 7519），用于在各方之间安全传输 <code>JSON</code> 格式的信息。它由三部分组成，以点（<code>.</code>）分隔：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Header.Payload.Signature</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><a href="https://jwt.io/introduction" target="_blank" rel="noreferrer">点击进入官网</a></p><p><img src="'+g+`" alt="jwt" loading="lazy"></p><h3 id="_2-jwt-的详细结构" tabindex="-1">2. JWT 的详细结构 <a class="header-anchor" href="#_2-jwt-的详细结构" aria-label="Permalink to &quot;2. JWT 的详细结构&quot;">​</a></h3><h4 id="_2-1-header-头部" tabindex="-1">2.1 Header（头部） <a class="header-anchor" href="#_2-1-header-头部" aria-label="Permalink to &quot;2.1 Header（头部）&quot;">​</a></h4><p><code>Header</code> 通常包含两部分信息：</p><ul><li><strong>令牌类型（typ）</strong>：固定为<code>JWT</code></li><li><strong>签名算法（alg）</strong>：如<code>HS256</code>（HMAC SHA-256）或<code>RS256</code>（RSA SHA-256）</li></ul><p><strong>示例</strong>：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;alg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HS256&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;typ&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;JWT&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>Base64Url 编码后</strong>：<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h4 id="_2-2-payload-负载" tabindex="-1">2.2 Payload（负载） <a class="header-anchor" href="#_2-2-payload-负载" aria-label="Permalink to &quot;2.2 Payload（负载）&quot;">​</a></h4><p><code>Payload</code> 包含声明（Claims），即用户数据和其他元信息。声明分为三类：</p><ol><li><p><strong>注册声明（Registered Claims）</strong>（可选但建议使用）：</p><ul><li><code>iss</code>（Issuer）：签发者</li><li><code>sub</code>（Subject）：主题（用户 ID）</li><li><code>aud</code>（Audience）：接收方</li><li><code>exp</code>（Expiration Time）：过期时间（Unix 时间戳）</li><li><code>nbf</code>（Not Before）：生效时间</li><li><code>iat</code>（Issued At）：签发时间</li></ul></li><li><p><strong>公共声明（Public Claims）</strong>：</p><ul><li>自定义但需避免冲突（建议使用命名空间，如<code>example.com/role</code>）</li></ul></li><li><p><strong>私有声明（Private Claims）</strong>：</p><ul><li>自定义数据（如<code>userId</code>、<code>role</code>）</li></ul></li></ol><p><strong>示例</strong>：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;sub&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1234567890&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John Doe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;iat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1516239022</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1516242622</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><strong>Base64Url 编码后</strong>：<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMiwiZXhwIjoxNTE2MjQyNjIyfQ</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h4 id="_2-3-signature-签名" tabindex="-1">2.3 Signature（签名） <a class="header-anchor" href="#_2-3-signature-签名" aria-label="Permalink to &quot;2.3 Signature（签名）&quot;">​</a></h4><p>签名用于验证 <code>Token</code> 的完整性和来源。计算方式为：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>HMACSHA256(</span></span>
<span class="line"><span>  base64UrlEncode(header) + &quot;.&quot; +</span></span>
<span class="line"><span>  base64UrlEncode(payload),</span></span>
<span class="line"><span>  secretKey</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><strong>密钥（<code>secretKey</code>）</strong>：仅服务端知晓（如 HS256）或私钥（如 RS256）</li></ul><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-4-完整-jwt-示例" tabindex="-1">2.4 完整 JWT 示例 <a class="header-anchor" href="#_2-4-完整-jwt-示例" aria-label="Permalink to &quot;2.4 完整 JWT 示例&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMiwiZXhwIjoxNTE2MjQyNjIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-jwt-的优缺点" tabindex="-1">3. JWT 的优缺点 <a class="header-anchor" href="#_3-jwt-的优缺点" aria-label="Permalink to &quot;3. JWT 的优缺点&quot;">​</a></h3><p><strong>优势</strong></p><ul><li><strong>无状态 &amp; 可扩展性</strong>：适合分布式系统和微服务架构</li><li><strong>跨域/跨平台支持</strong>：适合移动端 APP、第三方 API 集成</li><li><strong>安全性增强</strong>：签名防篡改（但需注意加密算法选择）</li><li><strong>性能优化</strong>：减少数据库/Session 存储查询</li></ul><p><strong>局限性</strong></p><ul><li><strong>Token 无法主动失效</strong>：一旦签发，在过期前始终有效</li><li><strong>存储安全风险</strong>：前端存储（LocalStorage）易受 XSS 攻击</li><li><strong>数据膨胀</strong>：频繁携带完整 Payload</li><li><strong>需要密钥管理</strong>：签名密钥泄露会导致系统安全崩溃</li></ul>`,65))])}const y=i(u,[["render",k]]);export{W as __pageData,y as default};
