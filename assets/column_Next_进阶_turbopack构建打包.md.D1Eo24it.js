import{_ as n,C as e,c as t,o as l,j as a,G as p,aQ as r,a as o}from"./chunks/framework.DEi4YP2n.js";const d="/assets/turbopack-1.B4DFhxq8.png",h="/assets/turbopack-2.DTQdnrTq.png",y=JSON.parse('{"title":"Turbopack：Next.js 的默认开发快速构建工具","description":"","frontmatter":{},"headers":[],"relativePath":"column/Next/进阶/turbopack构建打包.md","filePath":"column/Next/进阶/turbopack构建打包.md","lastUpdated":1759129977000}'),c={name:"column/Next/进阶/turbopack构建打包.md"};function k(u,s,b,g,E,m){const i=e("ArticleMetadata");return l(),t("div",null,[s[0]||(s[0]=a("h1",{id:"turbopack-next-js-的默认开发快速构建工具",tabindex:"-1"},[o("Turbopack：Next.js 的默认开发快速构建工具 "),a("a",{class:"header-anchor",href:"#turbopack-next-js-的默认开发快速构建工具","aria-label":'Permalink to "Turbopack：Next.js 的默认开发快速构建工具"'},"​")],-1)),p(i),s[1]||(s[1]=r('<nav class="table-of-contents"><ul><li><a href="#_1-什么是-turbopack">1. 什么是 Turbopack？</a></li><li><a href="#_2-turbopack-的优势">2. Turbopack 的优势</a></li><li><a href="#_3-turbopack-的基本使用">3. Turbopack 的基本使用</a><ul><li><a href="#构建生产环境">构建生产环境</a></li></ul></li><li><a href="#_4-可配置项">4. 可配置项</a><ul><li><a href="#next-config-js">next.config.js</a></li><li><a href="#开发环境命令">开发环境命令</a></li><li><a href="#缓存控制">缓存控制</a></li></ul></li><li><a href="#_5-多环境构建脚本实践">5. 多环境构建脚本实践</a><ul><li><a href="#工作原理">工作原理</a></li></ul></li><li><a href="#_6-当前的限制">6. 当前的限制</a></li><li><a href="#总结">总结</a></li></ul></nav><p>随着 <strong>Next.js 15</strong> 的到来，<code>Turbopack 已经逐步取代 Webpack</code>，成为 <code>Next.js</code> 默认的开发构建工具。</p><h2 id="_1-什么是-turbopack" tabindex="-1">1. 什么是 Turbopack？ <a class="header-anchor" href="#_1-什么是-turbopack" aria-label="Permalink to &quot;1. 什么是 Turbopack？&quot;">​</a></h2><blockquote><p>Turbopack 是由 <strong>Vercel 团队</strong>基于 Rust 编写的新一代打包器，它是 <strong>Webpack 的继任者</strong>。Webpack 的作者 Tobias Koppers 也是 Turbopack 的核心开发者。</p></blockquote><p><strong>目标：</strong></p><ul><li>提供 <strong>更快的构建速度</strong>（官方测试比 Webpack 快 700 倍，比 Vite 快 10 倍）。</li><li>支持 <strong>增量编译和智能缓存</strong>。</li><li>更好的扩展性，逐步替代 Webpack 生态。</li></ul><p><code>Turbopack 在 Next.js </code>中主要用于 <strong>开发环境</strong>，生产环境仍然可以使用<code> Webpack</code>，但在 <code>Next.js 15 </code>中已逐渐稳定，可作为未来主力。</p><h2 id="_2-turbopack-的优势" tabindex="-1">2. Turbopack 的优势 <a class="header-anchor" href="#_2-turbopack-的优势" aria-label="Permalink to &quot;2. Turbopack 的优势&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>Webpack</th><th>Turbopack</th></tr></thead><tbody><tr><td><strong>编译速度</strong></td><td>全量编译，慢</td><td>🚀 增量编译，极快</td></tr><tr><td><strong>语言实现</strong></td><td>JavaScript</td><td>Rust（更快、更安全）</td></tr><tr><td><strong>缓存机制</strong></td><td>有，但复杂</td><td>更智能的持久缓存</td></tr><tr><td><strong>热更新</strong></td><td>秒级</td><td>毫秒级</td></tr><tr><td><strong>生态支持</strong></td><td>成熟</td><td>不断扩展中</td></tr></tbody></table><p><code>Turbopack</code> 的核心能力是 <strong>增量编译</strong>：修改一个文件时，仅重新编译受影响的依赖，而不是整个项目，从而大幅提升热更新速度。</p><h2 id="_3-turbopack-的基本使用" tabindex="-1">3. Turbopack 的基本使用 <a class="header-anchor" href="#_3-turbopack-的基本使用" aria-label="Permalink to &quot;3. Turbopack 的基本使用&quot;">​</a></h2><p>在<code> Next.js 15</code> 中，开发环境默认使用 <code>Turbopack</code>。常见命令如下：</p><p><strong>启动开发环境（默认 Turbopack）</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --turbopack</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当你看到类似输出：说明正在使用 Turbopack。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Ready in 0.3s with Turbopack</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>如图所示：</strong> <img src="'+d+`" alt="" loading="lazy"></p><h3 id="构建生产环境" tabindex="-1">构建生产环境 <a class="header-anchor" href="#构建生产环境" aria-label="Permalink to &quot;构建生产环境&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>默认仍然使用 Webpack。如果要启用 Turbopack 构建，需要在 <code>next.config.js</code> 中开启实验性配置：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// next.config.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  experimental: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    turbo: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>然后运行：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_4-可配置项" tabindex="-1">4. 可配置项 <a class="header-anchor" href="#_4-可配置项" aria-label="Permalink to &quot;4. 可配置项&quot;">​</a></h2><p><code>Turbopack</code> 目前还处于逐步完善阶段，配置项相对较少，常用配置如下：</p><h3 id="next-config-js" tabindex="-1"><code>next.config.js</code> <a class="header-anchor" href="#next-config-js" aria-label="Permalink to &quot;\`next.config.js\`&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  experimental: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    turbo: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 启用生产构建的 Turbopack</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="开发环境命令" tabindex="-1">开发环境命令 <a class="header-anchor" href="#开发环境命令" aria-label="Permalink to &quot;开发环境命令&quot;">​</a></h3><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;next dev --turbopack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;next build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;next start&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="缓存控制" tabindex="-1">缓存控制 <a class="header-anchor" href="#缓存控制" aria-label="Permalink to &quot;缓存控制&quot;">​</a></h3><p><code>Turbopack</code> 会自动使用 <strong>增量缓存</strong>，开发者无需额外配置。缓存目录一般位于：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.next/cache/turbo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>如图所示：</strong></p><p><img src="`+h+`" alt="turbopack-2" width="400px" loading="lazy"></p><p>可手动删除以强制全量编译：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .next/cache/turbo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_5-多环境构建脚本实践" tabindex="-1">5. 多环境构建脚本实践 <a class="header-anchor" href="#_5-多环境构建脚本实践" aria-label="Permalink to &quot;5. 多环境构建脚本实践&quot;">​</a></h2><p>在真实项目中，往往需要针对不同的环境（开发 / 测试 / 生产）打包不同的配置。通常我们会维护多个 <code>.env</code> 文件：</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>Next.js 的环境机制比较“严格”：</p><p>它只识别 三种模式：development、production、test。</p><p>.env.uat 并不会自动被识别。</p><p>因为 next build 一定会走 production 模式，所以默认只会加载 .env.production（或 .env）。</p></div><ul><li><code>.env.dev</code> → 开发环境变量</li><li><code>.env.uat</code> → 测试环境变量</li><li><code>.env.production</code> → 生产环境变量</li></ul><p>在 <code>package.json</code> 中，我们可以这样配置脚本：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;next dev --turbopack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;next build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;next start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;prebuild:dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cp .env.dev .env.production&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;build:dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pnpm prebuild:dev &amp;&amp; next build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;prebuild:uat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cp .env.uat .env.production&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;build:uat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pnpm prebuild:uat &amp;&amp; next build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;build:prd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;next build&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h3><ul><li><code>prebuild:dev</code>：将 <code>.env.dev</code> 覆盖为 <code>.env.production</code>。</li><li><code>build:dev</code>：执行上一步后再运行 <code>next build</code>，生成 <strong>开发环境包</strong>。</li><li><code>prebuild:uat</code>：将 <code>.env.uat</code> 覆盖为 <code>.env.production</code>。</li><li><code>build:uat</code>：生成 <strong>测试环境包</strong>。</li><li><code>build:prd</code>：默认读取 <code>.env.production</code>，生成 <strong>生产环境包</strong>。</li></ul><p>这种方式保证了 <strong>一套代码 → 多环境构建</strong> 的能力，配合 Turbopack，可快速完成不同环境的打包。</p><p>📌 跨平台注意：在 Windows 下 <code>cp</code> 命令可能不可用，可以用 <a href="https://www.npmjs.com/package/cross-env" target="_blank" rel="noreferrer"><code>cross-env</code></a> 或 <code>copyfiles</code> 来实现跨平台兼容。</p><h2 id="_6-当前的限制" tabindex="-1">6. 当前的限制 <a class="header-anchor" href="#_6-当前的限制" aria-label="Permalink to &quot;6. 当前的限制&quot;">​</a></h2><ul><li><strong>插件生态不完整</strong>：Webpack 上的很多插件暂未支持。</li><li><strong>部分配置不兼容</strong>：自定义 Webpack 配置需要迁移。</li><li><strong>生产环境尚未完全成熟</strong>：Next.js 推荐在生产中逐步试用。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><code>Turbopack 是 Next.js</code> 的未来构建引擎，它通过 <strong>Rust + 增量编译 + 智能缓存</strong> 实现了前所未有的构建性能提升。虽然生态仍在完善，但在开发环境中已经非常好用，未来也会全面替代 Webpack。</p><p><strong>推荐实践路线：</strong></p><ol><li>在开发环境全面使用 Turbopack。</li><li>在测试环境试用 <code>experimental.turbo</code> 的生产构建。</li><li>使用多环境打包脚本（dev/uat/prd），统一管理环境变量。</li></ol>`,54))])}const F=n(c,[["render",k]]);export{y as __pageData,F as default};
