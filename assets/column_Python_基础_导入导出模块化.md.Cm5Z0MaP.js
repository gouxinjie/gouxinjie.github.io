import{_ as n,C as e,c as p,o as l,j as a,G as t,aQ as h,a as r}from"./chunks/framework.DEi4YP2n.js";const E=JSON.parse('{"title":"Python 中的模块与路径管理","description":"","frontmatter":{},"headers":[],"relativePath":"column/Python/基础/导入导出模块化.md","filePath":"column/Python/基础/导入导出模块化.md","lastUpdated":1759115073000}'),d={name:"column/Python/基础/导入导出模块化.md"};function k(o,s,c,y,g,u){const i=e("ArticleMetadata");return l(),p("div",null,[s[0]||(s[0]=a("h1",{id:"python-中的模块与路径管理",tabindex:"-1"},[r("Python 中的模块与路径管理 "),a("a",{class:"header-anchor",href:"#python-中的模块与路径管理","aria-label":'Permalink to "Python 中的模块与路径管理"'},"​")],-1)),t(i),s[1]||(s[1]=h(`<nav class="table-of-contents"><ul><li><a href="#一、创建模块">一、创建模块</a></li><li><a href="#二、导入模块">二、导入模块</a><ul><li><a href="#_2-1-导入整个模块">2.1 导入整个模块</a></li><li><a href="#_2-2-导入模块中的特定部分">2.2 导入模块中的特定部分</a></li><li><a href="#_2-3-为模块起别名">2.3 为模块起别名</a></li><li><a href="#_2-4-导入多个模块部分">2.4 导入多个模块部分</a></li></ul></li><li><a href="#三、python-标准库模块">三、Python 标准库模块</a></li><li><a href="#四、模块搜索路径">四、模块搜索路径</a><ul><li><a href="#_4-1-模块搜索路径顺序">4.1 模块搜索路径顺序</a></li></ul></li><li><a href="#五、如何导入模块时指定路径">五、如何导入模块时指定路径？</a><ul><li><a href="#_5-1-修改-sys-path-添加路径">5.1 修改 sys.path 添加路径</a></li><li><a href="#_5-2-使用相对导入或绝对导入">5.2 使用相对导入或绝对导入</a></li><li><a href="#_5-3-模块的缓存和重复导入">5.3 模块的缓存和重复导入</a></li></ul></li><li><a href="#六、创建包-package">六、创建包（Package）</a></li></ul></nav><p>在 <code>Python</code> 中，<strong>模块</strong>是组织和重用代码的基本单位。通过模块，你可以将相关功能集中在一个文件中，从而使代码更易于管理、维护和扩展。</p><h2 id="一、创建模块" tabindex="-1">一、创建模块 <a class="header-anchor" href="#一、创建模块" aria-label="Permalink to &quot;一、创建模块&quot;">​</a></h2><p>一个模块通常是一个 <code>.py</code> 文件，例如 <code>my_module.py</code>。你可以在 Python 代码中使用 <code>import</code> 语句来引用并使用模块中的功能。</p><p>例如，创建一个名为 <code>math_utils.py</code> 的模块，内容如下：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># math_utils.py</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> subtract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="二、导入模块" tabindex="-1">二、导入模块 <a class="header-anchor" href="#二、导入模块" aria-label="Permalink to &quot;二、导入模块&quot;">​</a></h2><p>一旦创建了模块，你就可以在其他 <code>Python</code> 文件中导入它并使用其中的函数、类或变量。使用 <code>import</code> 语句可以导入整个模块，或导入模块中的特定部分。</p><h3 id="_2-1-导入整个模块" tabindex="-1">2.1 导入整个模块 <a class="header-anchor" href="#_2-1-导入整个模块" aria-label="Permalink to &quot;2.1 导入整个模块&quot;">​</a></h3><p>通过 <code>import</code> 语句导入整个模块，然后通过模块名来访问其中的内容：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># main.py</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> math_utils</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(math_utils.add(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出 8</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(math_utils.subtract(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出 6</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-2-导入模块中的特定部分" tabindex="-1">2.2 导入模块中的特定部分 <a class="header-anchor" href="#_2-2-导入模块中的特定部分" aria-label="Permalink to &quot;2.2 导入模块中的特定部分&quot;">​</a></h3><p>如果只需要模块中的某个函数或类，可以使用 <code>from ... import ...</code> 来导入：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> math_utils </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> add</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(add(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出 8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-3-为模块起别名" tabindex="-1">2.3 为模块起别名 <a class="header-anchor" href="#_2-3-为模块起别名" aria-label="Permalink to &quot;2.3 为模块起别名&quot;">​</a></h3><p>你也可以为导入的模块起一个别名，以便更方便地使用：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> math_utils </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mu</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mu.add(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出 8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-4-导入多个模块部分" tabindex="-1">2.4 导入多个模块部分 <a class="header-anchor" href="#_2-4-导入多个模块部分" aria-label="Permalink to &quot;2.4 导入多个模块部分&quot;">​</a></h3><p>你可以同时导入模块中的多个函数：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> math_utils </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> add, subtract</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(add(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出 8</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(subtract(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出 6</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="三、python-标准库模块" tabindex="-1">三、Python 标准库模块 <a class="header-anchor" href="#三、python-标准库模块" aria-label="Permalink to &quot;三、Python 标准库模块&quot;">​</a></h2><p><code>Python</code> 提供了大量的标准库模块，它们覆盖了广泛的功能，从文件操作到网络通信，再到数学计算。例如：</p><ul><li><strong>math</strong>：提供数学函数，如平方根、三角函数等。</li><li><strong>datetime</strong>：处理日期和时间。</li><li><strong>os</strong>：与操作系统交互，如文件路径、目录操作等。</li><li><strong>sys</strong>：与 Python 解释器交互，如命令行参数、标准输入输出等。</li></ul><p>这些标准库模块可以直接导入并使用，无需额外安装。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> math</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(math.sqrt(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出 4.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> datetime</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> datetime.datetime.now()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(now)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出当前的日期和时间</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="四、模块搜索路径" tabindex="-1">四、模块搜索路径 <a class="header-anchor" href="#四、模块搜索路径" aria-label="Permalink to &quot;四、模块搜索路径&quot;">​</a></h2><p>那么，当你使用 <code>import</code> 语句导入模块时，Python 是如何找到该模块的呢？其实，Python 会按照一定的顺序在一系列目录中查找模块。这些目录路径称为 <strong>模块搜索路径</strong>，它们存储在 <code>sys.path</code> 列表中。</p><h3 id="_4-1-模块搜索路径顺序" tabindex="-1">4.1 模块搜索路径顺序 <a class="header-anchor" href="#_4-1-模块搜索路径顺序" aria-label="Permalink to &quot;4.1 模块搜索路径顺序&quot;">​</a></h3><ol><li><p><strong>当前目录</strong> Python 会首先在当前目录中查找模块。如果你在执行脚本的当前目录下有一个名为 <code>my_module.py</code> 的文件，Python 会优先导入它。</p></li><li><p><strong><code>PYTHONPATH</code> 环境变量</strong> 如果你设置了 <code>PYTHONPATH</code> 环境变量，Python 会在该环境变量指定的路径中查找模块。</p></li><li><p><strong>标准库目录</strong> Python 会在标准库目录中查找内置的模块。例如，<code>os</code>、<code>sys</code>、<code>math</code> 等标准库模块。</p></li><li><p><strong>第三方库目录</strong> Python 会在通过 <code>pip</code> 安装的第三方库的目录中查找模块。常见的第三方库安装位置是 <code>site-packages</code>。</p></li></ol><h4 id="_4-2-查看-sys-path" tabindex="-1">4.2 查看 <code>sys.path</code> <a class="header-anchor" href="#_4-2-查看-sys-path" aria-label="Permalink to &quot;4.2 查看 \`sys.path\`&quot;">​</a></h4><p>你可以通过 <code>sys.path</code> 查看 Python 查找模块的路径：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sys.path)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这将打印出 Python 的模块搜索路径列表，通常包括当前目录、<code>PYTHONPATH</code> 指定的目录、标准库路径等。</p><h2 id="五、如何导入模块时指定路径" tabindex="-1">五、如何导入模块时指定路径？ <a class="header-anchor" href="#五、如何导入模块时指定路径" aria-label="Permalink to &quot;五、如何导入模块时指定路径？&quot;">​</a></h2><p>虽然 Python 会自动根据模块搜索路径查找模块，但有时我们需要从自定义目录或指定路径导入模块。你可以通过以下方法来指定模块路径：</p><h3 id="_5-1-修改-sys-path-添加路径" tabindex="-1">5.1 修改 <code>sys.path</code> 添加路径 <a class="header-anchor" href="#_5-1-修改-sys-path-添加路径" aria-label="Permalink to &quot;5.1 修改 \`sys.path\` 添加路径&quot;">​</a></h3><p>你可以在运行时修改 <code>sys.path</code>，将模块所在的目录添加到搜索路径中：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sys.path.append(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/your/module/directory&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_module</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这样，Python 会在 <code>/path/to/your/module/directory</code> 目录中查找模块。</p><h3 id="_5-2-使用相对导入或绝对导入" tabindex="-1">5.2 使用相对导入或绝对导入 <a class="header-anchor" href="#_5-2-使用相对导入或绝对导入" aria-label="Permalink to &quot;5.2 使用相对导入或绝对导入&quot;">​</a></h3><p>在 Python 包中，你可以使用相对导入和绝对导入来访问不同模块。</p><ul><li><p><strong>绝对导入</strong>：使用完整的路径从根目录导入模块。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_package.my_module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> some_function</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>相对导入</strong>：在包内使用相对路径导入模块。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .my_module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> some_function  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 当前目录的模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ..another_package </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> another_function  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 上级目录的模块</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h3 id="_5-3-模块的缓存和重复导入" tabindex="-1">5.3 模块的缓存和重复导入 <a class="header-anchor" href="#_5-3-模块的缓存和重复导入" aria-label="Permalink to &quot;5.3 模块的缓存和重复导入&quot;">​</a></h3><p>Python 会将导入的模块缓存起来，当同一个模块再次被导入时，Python 会直接使用缓存中的模块，而不会重新执行该模块的代码。你可以通过 <code>sys.modules</code> 查看当前已导入的模块：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sys.modules)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="六、创建包-package" tabindex="-1">六、创建包（Package） <a class="header-anchor" href="#六、创建包-package" aria-label="Permalink to &quot;六、创建包（Package）&quot;">​</a></h2><p>当你有多个相关模块时，可以将它们组织成一个<strong>包</strong>。包是一个包含多个模块的目录，其中必须包含一个 <code>__init__.py</code> 文件（可以是空文件），以告诉 Python 这是一个包。</p><p>例如，创建一个名为 <code>my_package</code> 的包：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>my_package/</span></span>
<span class="line"><span>    __init__.py</span></span>
<span class="line"><span>    module1.py</span></span>
<span class="line"><span>    module2.py</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>你可以使用以下方式导入包中的模块：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_package </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> module1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_package.module2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> function</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,51))])}const m=n(d,[["render",k]]);export{E as __pageData,m as default};
