import{_ as e,C as n,c as t,o as l,j as i,G as p,aQ as h,a as r}from"./chunks/framework.DEi4YP2n.js";const b=JSON.parse('{"title":"vue3 项目中使用 VueUse 工具集","description":"","frontmatter":{},"headers":[],"relativePath":"column/Vue/第三方库使用/VueUse工具集.md","filePath":"column/Vue/第三方库使用/VueUse工具集.md","lastUpdated":1758696843000}'),k={name:"column/Vue/第三方库使用/VueUse工具集.md"};function d(o,s,c,u,g,E){const a=n("ArticleMetadata");return l(),t("div",null,[s[0]||(s[0]=i("h1",{id:"vue3-项目中使用-vueuse-工具集",tabindex:"-1"},[r("vue3 项目中使用 VueUse 工具集 "),i("a",{class:"header-anchor",href:"#vue3-项目中使用-vueuse-工具集","aria-label":'Permalink to "vue3 项目中使用 VueUse 工具集"'},"​")],-1)),p(a),s[1]||(s[1]=h(`<h2 id="一、介绍" tabindex="-1">一、介绍 <a class="header-anchor" href="#一、介绍" aria-label="Permalink to &quot;一、介绍&quot;">​</a></h2><p><code>VueUse 是基于 Vue Composition API </code>的实用函数集合，它提供了一组轻量级但功能强大的工具函数。这些工具函数可以用于处理常见的 <code>JavaScript</code> 任务，如处理状态、处理异步操作等。</p><h2 id="二、安装" tabindex="-1">二、安装 <a class="header-anchor" href="#二、安装" aria-label="Permalink to &quot;二、安装&quot;">​</a></h2><p>可以通过 npm 或 yarn 来安装 <code>VueUse</code></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @vueuse/core</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @vueuse/core</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="三、使用" tabindex="-1">三、使用 <a class="header-anchor" href="#三、使用" aria-label="Permalink to &quot;三、使用&quot;">​</a></h2><p>在 Vue3 项目中使用 <code>VueUse</code> 非常简单。首先，需要导入所需的工具函数并使用它们：</p><h3 id="_3-1-使用-usedebouncefn-进行防抖处理" tabindex="-1">3.1 使用 useDebounceFn 进行防抖处理 <a class="header-anchor" href="#_3-1-使用-usedebouncefn-进行防抖处理" aria-label="Permalink to &quot;3.1 使用 useDebounceFn 进行防抖处理&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> @input=&quot;debounceSearchChange&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useDebounceFn } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@vueuse/core&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> debounceSearchChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useDebounceFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inputChange, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inputChange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.target.value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面代码的意思是，当用户输入时，每 1000 毫秒执行一次 inputChange 函数。</p><h3 id="_3-2-使用-useclipboard-进行文本复制" tabindex="-1">3.2 使用 useClipboard 进行文本复制 <a class="header-anchor" href="#_3-2-使用-useclipboard-进行文本复制" aria-label="Permalink to &quot;3.2 使用 useClipboard 进行文本复制&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">el-button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;primary&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> @click=&quot;clipBoard&quot;&gt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> 点击复制&lt;/el-button&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useDebounceFn, useClipboard } </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@vueuse/core&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { text: copiedText, isSupported, copy, copied } </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">=</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> useClipboard();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">function</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> clipBoard(){</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">  copy(&#39;复制成功&#39;)</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上面代码的意思是，当用于点击复制按钮时，会成功复制 copy 函数里面的值。</p><p>以下是对 <code>text: copiedText, isSupported, copy, 和 copied </code>这几个属性和方法的详细解释：</p><div class="tip custom-block"><p class="custom-block-title">属性解释 1，<strong>text:</strong> copiedText：这是一个响应式引用（ref），用于存储最近一次成功复制到剪贴板的文本内容。</p><p>2，<strong>isSupported:</strong> 这是一个布尔值，表示当前浏览器是否支持 Clipboard API。在执行复制操作之前，你可以检查 isSupported 来确保用户的浏览器支持该功能</p><p>3，<strong>copy</strong>：这是一个异步函数，用于将给定的文本复制到剪贴板。</p><p>4，<strong>copied</strong>：这是一个响应式引用（ref），表示最近一次复制操作的状态。通常用于指示复制操作是否成功。</p></div><h3 id="_3-3-开启全屏模式" tabindex="-1">3.3 开启全屏模式 <a class="header-anchor" href="#_3-3-开启全屏模式" aria-label="Permalink to &quot;3.3 开启全屏模式&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useFullscreen } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@vueuse/core&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isFullscreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">toggle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useFullscreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>isFullscreen</code>:当前是否处于全屏模式。</p><p><code>toggle</code>是一个函数：用于切换全屏模式，如果 <code>isFullscreen</code> 为<code> true</code>，则退出全屏模式；否则进入。</p><h3 id="_3-4-更多使用" tabindex="-1">3.4 更多使用 <a class="header-anchor" href="#_3-4-更多使用" aria-label="Permalink to &quot;3.4 更多使用&quot;">​</a></h3><p><code>VueUse</code> 提供了许多其他有用的工具函数，如<code>useLocalStorage、useSessionStorage、useFetch</code> 等。</p><p>可以在官方文档中找到这些函数的详细信息和使用方法：<a href="https://vueuse.org/" target="_blank" rel="noreferrer">https://vueuse.org/</a></p>`,22))])}const F=e(k,[["render",d]]);export{b as __pageData,F as default};
