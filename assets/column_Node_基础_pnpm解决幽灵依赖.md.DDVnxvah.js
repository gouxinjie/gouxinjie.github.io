import{_ as s,C as n,c as t,o as i,j as a,G as l,aQ as o,a as d}from"./chunks/framework.DEi4YP2n.js";const r="/assets/pnpm.BPeLOD9L.png",c="/assets/pnpm-1.yGNZRRdX.png",m="/assets/pnpm-3.CJLxd36N.png",h="/assets/pnpm-4.kX4ecVRv.png",u="/assets/pnpm-2.BH-gXd7w.png",g="/assets/pnpm-5.BmXWN78Y.png",b="/assets/pnpm-6.C4CS-s3g.png",k="/assets/pnpm-7.CIe0byS4.png",w=JSON.parse('{"title":"pnpm: 解决幽灵依赖","description":"","frontmatter":{},"headers":[],"relativePath":"column/Node/基础/pnpm解决幽灵依赖.md","filePath":"column/Node/基础/pnpm解决幽灵依赖.md","lastUpdated":1757573947000}'),_={name:"column/Node/基础/pnpm解决幽灵依赖.md"};function v(f,e,y,E,q,x){const p=n("ArticleMetadata");return i(),t("div",null,[e[0]||(e[0]=a("h1",{id:"pnpm-解决幽灵依赖",tabindex:"-1"},[d("pnpm: 解决幽灵依赖 "),a("a",{class:"header-anchor",href:"#pnpm-解决幽灵依赖","aria-label":'Permalink to "pnpm: 解决幽灵依赖"'},"​")],-1)),l(p),e[1]||(e[1]=o('<nav class="table-of-contents"><ul><li><a href="#一、前言">一、前言</a></li><li><a href="#二、pnpm-为什么快">二、pnpm 为什么快</a></li><li><a href="#三、节省磁盘空间">三、节省磁盘空间</a></li><li><a href="#四、什么是硬链接和符号链接-软链接">四、什么是硬链接和符号链接(软链接)</a><ul><li><a href="#_4-1-硬链接">4.1 硬链接</a></li><li><a href="#_4-2-软链接-符号链接">4.2 软链接(符号链接)</a></li><li><a href="#_4-3-硬链接与符号链接的对比">4.3 硬链接与符号链接的对比</a></li></ul></li><li><a href="#五、什么是幽灵依赖">五、什么是幽灵依赖</a></li><li><a href="#六、使用-pnpm">六、使用 pnpm</a></li></ul></nav><h2 id="一、前言" tabindex="-1">一、前言 <a class="header-anchor" href="#一、前言" aria-label="Permalink to &quot;一、前言&quot;">​</a></h2><p><code>pnpm</code> - 速度快、节省磁盘空间的软件包管理器。</p><p><a href="https://pnpm.nodejs.cn/" target="_blank" rel="noreferrer">pnpm中文网:</a></p><p><img src="'+r+'" alt="" loading="lazy"></p><h2 id="二、pnpm-为什么快" tabindex="-1">二、pnpm 为什么快 <a class="header-anchor" href="#二、pnpm-为什么快" aria-label="Permalink to &quot;二、pnpm 为什么快&quot;">​</a></h2><p><code>pnpm </code>的第一个特点速度快，是安装速度比较快。这是因为：</p><p><code>pnpm </code>分三个阶段执行安装,如下：</p><p><img src="'+c+'" alt="" loading="lazy"></p><p>(1) <code>依赖解析</code>： 仓库中没有的依赖都被识别并获取到仓库。</p><p>(2) <code>目录结构计算</code>： <code>node_modules</code> 目录结构是根据依赖计算出来的。 <code>pnpm</code> 会根据项目中的依赖关系，计算出一个最优的 <code>node_modules</code> 目录结构。这个结构会确保所有的依赖项都能够被正确地解析和引用，同时避免不必要的嵌套和重复。计算出一个扁平化的 <code>node_modules</code> 目录结构。</p><p>(3) <code>链接依赖项</code>： 在这个阶段，<code>pnpm</code> 会从之前创建的仓库中获取所有已经安装过的依赖项，并将它们链接到 <code>node_modules</code> 目录中。这个过程是通过<strong>硬链接或符号链接</strong>来实现的，具体取决于操作系统和文件系统的特性。</p><p><img src="'+m+'" alt="" loading="lazy"></p><p>可以看到上图，<code>node_modules</code> 里有个 <code>.pnpm</code>. 这个就是 pnpm 在全局范围内存储一份依赖项的副本，并在需要时将它们链接到各个项目中，这也解决了<strong>幽灵依赖</strong>的问题。</p><p>默认情况下，<code>pnpm</code> 使用符号链接将项目的直接依赖项添加到模块目录的根目录中,如下： <img src="'+h+'" alt="" loading="lazy"></p><p>此外，由于链接的是依赖项的副本，因此项目代码无法直接修改这些依赖项。这有助于保持依赖项的完整性，并防止因误操作而导致的依赖项损坏或版本冲突。</p><p>这种方法比传统的三阶段安装过程（解析、获取和将所有依赖项写入 node_modules）快得多。下面是传统的安装： <img src="'+u+'" alt="" loading="lazy"></p><h2 id="三、节省磁盘空间" tabindex="-1">三、节省磁盘空间 <a class="header-anchor" href="#三、节省磁盘空间" aria-label="Permalink to &quot;三、节省磁盘空间&quot;">​</a></h2><p>使用 <code>npm</code> 时，依赖每次被不同的项目使用，都会重复安装一次。</p><p><img src="'+g+'" alt="" loading="lazy"></p><p>而在使用 pnpm 时，依赖会被存储在内容可寻址的存储中，</p><p><strong>所以</strong>：</p><p>(1) 如果你用到了某依赖项的不同版本，只会将不同版本间有差异的文件添加到仓库。</p><blockquote><p>例如，如果某个包有 100 个文件，而它的新版本只改变了其中 1 个文件。那么<code> pnpm update</code> 时只会向存储中心额外添加 1 个新文件，而不会因为仅仅一个文件的改变复制整新版本包的内容。</p></blockquote><p>(2) 所有文件都会存储在硬盘上的某一位置(<code>/node_modules/.pnpm/</code>)。</p><blockquote><p>当软件包被被安装时，包里的文件会硬链接到这一位置，而不会占用额外的磁盘空间。 这允许你跨项目地共享同一版本的依赖。</p></blockquote><p>因此，您在磁盘上节省了大量空间，这与项目和依赖项的数量成正比，并且安装速度要快得多！</p><h2 id="四、什么是硬链接和符号链接-软链接" tabindex="-1">四、什么是硬链接和符号链接(软链接) <a class="header-anchor" href="#四、什么是硬链接和符号链接-软链接" aria-label="Permalink to &quot;四、什么是硬链接和符号链接(软链接)&quot;">​</a></h2><h3 id="_4-1-硬链接" tabindex="-1">4.1 硬链接 <a class="header-anchor" href="#_4-1-硬链接" aria-label="Permalink to &quot;4.1 硬链接&quot;">​</a></h3><p>我们的文件数据都是存在磁盘上，比如我们创建了一个文件 A，然后就给 A 分配了一个磁盘空间，然后文件 A 其实就是一个指针，指向磁盘空间。</p><blockquote><p>然后我们可以通过文件 A 去创建一个硬连接，文件 B，那么通过硬连接创建的话 B 的指针和 A 的指针是一样的，同样指向磁盘空间，这就实现了两个文件，共用一块磁盘空间。</p></blockquote><p>这就是硬链接，在硬连接的模式下，文件 A 干掉以后，并不会影响文件 B。</p><h3 id="_4-2-软链接-符号链接" tabindex="-1">4.2 软链接(符号链接) <a class="header-anchor" href="#_4-2-软链接-符号链接" aria-label="Permalink to &quot;4.2 软链接(符号链接)&quot;">​</a></h3><p>软链接就类似于快捷方式，创建文件 A 时和硬连接一致，但是通过软连接创建文件 B 时，B 的指针就会指向文件 A，而不是磁盘空间，就相当于 B 是 A 的一个快捷方式。</p><blockquote><p>那么这样子有一天 A 文件消失了，B 就不能用了。</p></blockquote><p>这两种链接方式在 pnpm 里都用到了，具体它什么时候用什么链接，具体是如何用的，见官网解释：<a href="https://www.pnpm.cn/symlinked-node-modules-structure%E3%80%82" target="_blank" rel="noreferrer">https://www.pnpm.cn/symlinked-node-modules-structure。</a></p><h3 id="_4-3-硬链接与符号链接的对比" tabindex="-1">4.3 硬链接与符号链接的对比 <a class="header-anchor" href="#_4-3-硬链接与符号链接的对比" aria-label="Permalink to &quot;4.3 硬链接与符号链接的对比&quot;">​</a></h3><p>(1) 关联方式：硬链接提供更紧密的关联，因为它们指向相同的物理数据块和 inode。而符号链接则通过路径名来关联目标文件或目录。</p><p>(2) 灵活性：符号链接提供更大的灵活性，允许链接到不同文件系统的对象，并支持链接到目录。</p><p>(3) 目标文件变动影响：如果目标文件被移动或删除，硬链接仍然有效（因为它们指向的是物理数据块），而符号链接将失效（因为它们指向的是路径）。</p><h2 id="五、什么是幽灵依赖" tabindex="-1">五、什么是幽灵依赖 <a class="header-anchor" href="#五、什么是幽灵依赖" aria-label="Permalink to &quot;五、什么是幽灵依赖&quot;">​</a></h2><p>幽灵依赖：即某个包没有在<code>package.json</code> 被依赖，但是用户却能够引用到这个包。</p><p>引发这个现象的原因是 [<a href="/column/Node/基础/模块查找规则.html">模块查找规则</a>]。</p><p>例如我们项目中使用 npm 安装了 element-plus，element-plus 库却安装了其他的第三方依赖，lodash.js 等等其他的库，就会造成幽灵依赖，如下图：</p><p><img src="'+b+'" alt="" loading="lazy"></p><p>当项目的两个或多个直接依赖间接依赖同一个模块但版本要求不同时，npm 会安装多个版本的该模块。未被项目直接声明的版本就形成了幽灵依赖。</p><blockquote><p>为了减少磁盘空间占用和降低模块加载复杂度，npm 引入了扁平化安装策略。这种策略可能导致某些模块虽然未被项目直接引用，但由于被多个直接依赖共享，从而成为项目依赖树的一部分。</p></blockquote><blockquote><p>直接依赖更新时，它们可能引入新的间接依赖或升级已有间接依赖的版本，这也可能导致幽灵依赖的产生。</p></blockquote><p><strong>缺点：</strong></p><p>1，占用存储空间：未使用的依赖包会增加项目的体积，占用存储空间。对于大型项目或频繁部署的项目来说，这可能会造成不必要的存储资源浪费。</p><p>2，增加构建时间：未使用的依赖包可能会增加构建过程中的解析和处理时间，导致构建过程变慢。这会影响开发人员的开发效率和项目的部署速度。</p><p>3，项目复杂性提升：幽灵依赖的存在使得项目的依赖关系变得更加复杂，难以管理和维护。这可能会导致在后续的开发过程中引入更多的潜在问题。</p><p>4，难以排查的问题：当更新父依赖的版本时，其子依赖的版本也会被更新。一旦子依赖的更新导致当前项目中用到的子依赖 API 失效，那么这个问题将非常难以排查，因为幽灵依赖并未在 package.json 中显式声明。</p><h2 id="六、使用-pnpm" tabindex="-1">六、使用 pnpm <a class="header-anchor" href="#六、使用-pnpm" aria-label="Permalink to &quot;六、使用 pnpm&quot;">​</a></h2><p>1，在全局安装 pnpm（推荐）：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm install </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g pnpm</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2，在项目中安装 pnpm：</p><p>如果你不想在全局范围内安装 pnpm，可以通过以下命令在项目中安装：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm install pnpm</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3, 更新依赖</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pnpm update</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>4, 卸载依赖</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pnpm remove </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;package-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>5, 清除缓存</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pnpm store prune</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装项目的依赖截图： <img src="'+k+'" alt="" loading="lazy"></p><p>更多 pnpm 命令:<a href="https://www.pnpm.cn/cli/add" target="_blank" rel="noreferrer">https://www.pnpm.cn/cli/add</a></p>',67))])}const C=s(_,[["render",v]]);export{w as __pageData,C as default};
