import{_ as t,C as n,c as e,o as p,j as a,G as l,aQ as h,a as d}from"./chunks/framework.DEi4YP2n.js";const r="/assets/created.C7_PE-al.png",y=JSON.parse('{"title":"vue 的生命周期和执行顺序","description":"","frontmatter":{},"headers":[],"relativePath":"column/Vue/组件基础/生命周期.md","filePath":"column/Vue/组件基础/生命周期.md","lastUpdated":1757923618000}'),k={name:"column/Vue/组件基础/生命周期.md"};function o(c,s,E,g,u,b){const i=n("ArticleMetadata");return p(),e("div",null,[s[0]||(s[0]=a("h1",{id:"vue-的生命周期和执行顺序",tabindex:"-1"},[d("vue 的生命周期和执行顺序 "),a("a",{class:"header-anchor",href:"#vue-的生命周期和执行顺序","aria-label":'Permalink to "vue 的生命周期和执行顺序"'},"​")],-1)),l(i),s[1]||(s[1]=h(`<nav class="table-of-contents"><ul><li><a href="#_1-vue-生命周期都有哪些">1，Vue 生命周期都有哪些？</a></li><li><a href="#_2-父子组件生命周期执行顺序">2，父子组件生命周期执行顺序</a></li><li><a href="#_3-vue-中各属性初始化的顺序">3，vue 中各属性初始化的顺序</a></li></ul></nav><h2 id="_1-vue-生命周期都有哪些" tabindex="-1">1，Vue 生命周期都有哪些？ <a class="header-anchor" href="#_1-vue-生命周期都有哪些" aria-label="Permalink to &quot;1，Vue 生命周期都有哪些？&quot;">​</a></h2><table tabindex="0"><thead><tr><th>序号</th><th>生命周期</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>beforecreate</code>创建前</td><td>vue 实例初始化阶段，不可以访问 data,methods； 此时打印出的 this 是 undefined；</td></tr><tr><td>2</td><td><code>created</code>创建后</td><td>vue 实例初始化完成，可以访问 data，methods，但是节点尚未挂载，不能获取 dom 节点；</td></tr><tr><td>3</td><td><code>beforeMount</code>挂载前</td><td>实际上与 created 阶段类似，同样的节点尚未挂载，此时模板已经编译完成，但还没有被渲染至页面中（即为虚拟 dom 加载为真实 dom）注意的是这是在视图渲染前最后一次可以更改数据的机会，不会触发其他的钩子函数；</td></tr><tr><td>4</td><td><code>mounted</code>挂载完成</td><td>这个阶段说说明模板已经被渲染成真实 DOM，实例已经被完全创建好了；</td></tr><tr><td>5</td><td><code>beforeUpdate</code>更新前</td><td>data 里面的数据改动会触发 vue 的响应式数据更新，也就是对比真实 dom 进行渲染的过程；</td></tr><tr><td>6</td><td><code>updated</code>更新完成</td><td>data 中的数据更新完成，dom 节点替换完成 ；</td></tr><tr><td>7</td><td><code>activited</code></td><td>在组件被激活时调⽤（使用了 <code>&lt;keep-alive&gt;</code> 的情况下）；</td></tr><tr><td>8</td><td><code>deactivated</code></td><td>在组件被销毁时调⽤（使用了 <code>&lt;keep-alive&gt;</code> 的情况下）；</td></tr><tr><td>9</td><td><code>beforeDestroy</code>销毁前</td><td>销毁前执行（$destroy 方法被调用的时候就会执行）,一般在这里善后：清除计时器、监听等；</td></tr><tr><td>10</td><td><code>destroyed</code>销毁后</td><td>销毁后 （Dom 元素存在，只是不再受 vue 控制）,卸载 watcher，事件监听，子组件；</td></tr></tbody></table><h2 id="_2-父子组件生命周期执行顺序" tabindex="-1">2，父子组件生命周期执行顺序 <a class="header-anchor" href="#_2-父子组件生命周期执行顺序" aria-label="Permalink to &quot;2，父子组件生命周期执行顺序&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">父beforeCreate</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">父created</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">父beforeMount</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">子beforeCreate</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">子created</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">子beforeMount</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">子mounted</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">父mounted</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>验证如下图</code>：</p><p><img src="`+r+`" alt="在这里插入图片描述" loading="lazy"></p><p><strong>更新过程</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">父beforeUpdate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">子beforeUpdate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">子updated</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">父updated</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>销毁过程</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">父beforeDestroy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">子beforeDestroy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">子destroyed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">父destroyed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>keep-alive</code>可以实现组件缓存，当组件切换时不会对当前组件进行卸载。</p><p><strong>使用 keepAlive 后生命周期变化（重要）：</strong></p><p>首次进入缓存页面：beforeRouteEnter --&gt; created --&gt; mounted --&gt; activated --&gt; deactivated<br> 再次进入缓存页面：beforeRouteEnter --&gt; activated --&gt; deactivated</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>配置了 <code>keepAlive</code> 的页面，在再次进入时不会重新渲染（第一次进来时会触发所有钩子函数），该页面内的组件同理不会再次渲染。<br> 而这可能会导致该组件内的相关操作（那些每次都需要重新渲染页面的操作：如父子组件间的传值）不再生效。 这一点可能会导致一些莫名其妙而又无从查证的 bug；</p></div><h2 id="_3-vue-中各属性初始化的顺序" tabindex="-1">3，vue 中各属性初始化的顺序 <a class="header-anchor" href="#_3-vue-中各属性初始化的顺序" aria-label="Permalink to &quot;3，vue 中各属性初始化的顺序&quot;">​</a></h2><hr><p>下面这段代码是 Vue 中初始化组件状态的核心部分。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">vm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> opts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vm.$options</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (opts.props) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm, opts.props)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Composition API</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  initSetup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (opts.methods) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initMethods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm, opts.methods)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (opts.data) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    initData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((vm._data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ob </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ob.vmCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (opts.computed) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initComputed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm, opts.computed)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (opts.watch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> opts.watch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nativeWatch) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    initWatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm, opts.watch)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>可以看到依次初始化了:</p><p><strong>props &gt; setup &gt; methods &gt; data &gt; computed &gt; watch</strong></p>`,21))])}const v=t(k,[["render",o]]);export{y as __pageData,v as default};
