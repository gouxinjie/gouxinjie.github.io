import{_ as i,C as e,c as l,o as t,j as a,G as r,aQ as p,a as h}from"./chunks/framework.DEi4YP2n.js";const d="/assets/readonly-1.CDu_6Jgi.png",m=JSON.parse('{"title":"readonly：只读的响应式对象","description":"","frontmatter":{},"headers":[],"relativePath":"column/Vue/响应式API进阶/readonly.md","filePath":"column/Vue/响应式API进阶/readonly.md","lastUpdated":1759201926000}'),o={name:"column/Vue/响应式API进阶/readonly.md"};function k(c,s,y,g,E,u){const n=e("ArticleMetadata");return t(),l("div",null,[s[0]||(s[0]=a("h1",{id:"readonly-只读的响应式对象",tabindex:"-1"},[h("readonly：只读的响应式对象 "),a("a",{class:"header-anchor",href:"#readonly-只读的响应式对象","aria-label":'Permalink to "readonly：只读的响应式对象"'},"​")],-1)),r(n),s[1]||(s[1]=p(`<nav class="table-of-contents"><ul><li><a href="#_1-readonly-的作用">1. readonly 的作用</a></li><li><a href="#_2-readonly-的基本用法">2. readonly 的基本用法</a></li><li><a href="#_3-readonly-的应用场景">3. readonly 的应用场景</a></li><li><a href="#_4-示例-与-reactive-配合使用">4. 示例：与 reactive 配合使用</a><ul><li><a href="#readonly-的使用注意事项">readonly 的使用注意事项</a></li></ul></li></ul></nav><p>在 <strong>Vue 3</strong> 中，<code>readonly</code> 是一个非常有用的响应式工具，它用于将一个对象或数组转换为只读的响应式对象，意味着这个对象的属性不能被修改。<code>readonly</code> 的主要用途是在确保对象不被意外修改的场景中，如传递给子组件时，确保它们只读取数据而不改变它。</p><h2 id="_1-readonly-的作用" tabindex="-1">1. <code>readonly</code> 的作用 <a class="header-anchor" href="#_1-readonly-的作用" aria-label="Permalink to &quot;1. \`readonly\` 的作用&quot;">​</a></h2><p><code>readonly</code> 主要作用是创建一个 <strong>只读的响应式对象</strong>。与 <code>reactive</code> 不同，<code>readonly</code> 会返回一个新对象，该对象的所有属性都无法被修改。如果试图修改这个对象的属性，Vue 会抛出警告（开发模式下）。</p><h2 id="_2-readonly-的基本用法" tabindex="-1">2. <code>readonly</code> 的基本用法 <a class="header-anchor" href="#_2-readonly-的基本用法" aria-label="Permalink to &quot;2. \`readonly\` 的基本用法&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { reactive, readonly } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 readonly 创建一个只读对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> readonlyState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readonly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(readonlyState.count); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 尝试修改只读对象的属性，会触发警告（开发模式下）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">readonlyState.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 会在控制台看到警告</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>警告如图所示：</strong></p><p><img src="`+d+`" alt="readonly-1" loading="lazy"></p><h2 id="_3-readonly-的应用场景" tabindex="-1">3. <code>readonly</code> 的应用场景 <a class="header-anchor" href="#_3-readonly-的应用场景" aria-label="Permalink to &quot;3. \`readonly\` 的应用场景&quot;">​</a></h2><h4 id="_1-防止意外修改" tabindex="-1">1. <strong>防止意外修改</strong> <a class="header-anchor" href="#_1-防止意外修改" aria-label="Permalink to &quot;1. **防止意外修改**&quot;">​</a></h4><p><code>readonly</code> 可以用于防止对某个对象的意外修改。通常，传递给子组件或函数的数据需要保持只读，确保不会被修改。</p><h4 id="_2-与-reactive-配合使用" tabindex="-1">2. <strong>与 <code>reactive</code> 配合使用</strong> <a class="header-anchor" href="#_2-与-reactive-配合使用" aria-label="Permalink to &quot;2. **与 \`reactive\` 配合使用**&quot;">​</a></h4><p><code>readonly</code> 和 <code>reactive</code> 可以结合使用。例如，当你有一个响应式对象时，可以通过 <code>readonly</code> 只暴露一个只读的对象接口，防止外部修改它。</p><h4 id="_3-共享数据的只读视图" tabindex="-1">3. <strong>共享数据的只读视图</strong> <a class="header-anchor" href="#_3-共享数据的只读视图" aria-label="Permalink to &quot;3. **共享数据的只读视图**&quot;">​</a></h4><p>你可以将某些数据通过 <code>readonly</code> 提供给多个组件或者模块，而不担心这些组件会修改共享的状态。</p><h4 id="_4-代码优化和设计" tabindex="-1">4. <strong>代码优化和设计</strong> <a class="header-anchor" href="#_4-代码优化和设计" aria-label="Permalink to &quot;4. **代码优化和设计**&quot;">​</a></h4><p>在大型应用中，保持数据不可变是一种良好的编程习惯，尤其在需要调试和追踪状态变化时。<code>readonly</code> 使得你能够创建明确的只读状态，减少不必要的副作用。</p><h2 id="_4-示例-与-reactive-配合使用" tabindex="-1">4. 示例：与 <code>reactive</code> 配合使用 <a class="header-anchor" href="#_4-示例-与-reactive-配合使用" aria-label="Permalink to &quot;4. 示例：与 \`reactive\` 配合使用&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { reactive, readonly } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建只读对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> readonlyState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readonly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 传递给子组件时，保证它不修改父组件的 state</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ChildComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      readonlyState</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  template: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`&lt;div&gt;{{ readonlyState.count }}&lt;/div&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>在这个例子中，<code>readonlyState</code> 是一个只读对象，确保 <code>ChildComponent</code> 只能读取数据，不能修改它。父组件的 <code>state</code> 被保护起来，避免了意外修改。</p><h3 id="readonly-的使用注意事项" tabindex="-1"><code>readonly</code> 的使用注意事项 <a class="header-anchor" href="#readonly-的使用注意事项" aria-label="Permalink to &quot;\`readonly\` 的使用注意事项&quot;">​</a></h3><ul><li><p><strong>开发模式警告</strong>：在开发环境下，<code>readonly</code> 会对修改属性的操作进行警告，但在生产环境中不会报错。它只是一种开发时的警告机制，用于提醒开发者不要修改只读对象。</p></li><li><p><strong>只读对象不支持修改</strong>：虽然 <code>readonly</code> 返回的是响应式对象，但你不能通过该对象进行修改操作。如果尝试修改，会触发警告。</p></li></ul>`,22))])}const F=i(o,[["render",k]]);export{m as __pageData,F as default};
