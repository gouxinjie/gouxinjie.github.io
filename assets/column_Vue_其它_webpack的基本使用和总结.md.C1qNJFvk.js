import{_ as n,C as l,c as e,o as p,j as i,G as t,aQ as h,a as k}from"./chunks/framework.CZC_k6km.js";const y=JSON.parse('{"title":"webpack 的基本使用和总结","description":"","frontmatter":{},"headers":[],"relativePath":"column/Vue/其它/webpack的基本使用和总结.md","filePath":"column/Vue/其它/webpack的基本使用和总结.md","lastUpdated":1757064142000}'),r={name:"column/Vue/其它/webpack的基本使用和总结.md"};function d(c,s,E,o,b,g){const a=l("ArticleMetadata");return p(),e("div",null,[s[0]||(s[0]=i("h1",{id:"webpack-的基本使用和总结",tabindex:"-1"},[k("webpack 的基本使用和总结 "),i("a",{class:"header-anchor",href:"#webpack-的基本使用和总结","aria-label":'Permalink to "webpack 的基本使用和总结"'},"​")],-1)),t(a),s[1]||(s[1]=h(`<nav class="table-of-contents"><ul><li><a href="#_1-webpack-概念">1，webpack 概念</a></li><li><a href="#_2-为什么学-webpack">2，为什么学 webpack</a></li><li><a href="#_3-webpack-特点">3，webpack 特点</a></li><li><a href="#_4-相对于其他工具优点">4，相对于其他工具优点</a></li><li><a href="#_5-准备工作">5，准备工作</a></li><li><a href="#_6-webpack-的核心介绍">6，webpack 的核心介绍</a></li><li><a href="#_7-webpack-使用-打包-js-代码">7，webpack 使用 - 打包 js 代码</a></li><li><a href="#_8-打包-css-代码">8，打包 css 代码</a></li><li><a href="#_9-生成-html-文件">9，生成 html 文件</a></li><li><a href="#_10-分离-css-代码">10，分离 css 代码</a></li><li><a href="#_11-打包-less">11，打包 less</a></li><li><a href="#_12-集成-postcss">12，集成 postcss</a><ul><li><a href="#_1-什么是-postcss">1，什么是 postcss</a></li><li><a href="#_2-autoprefixer">2，autoprefixer</a></li><li><a href="#_3-postcss-pxtorem">3，postcss-pxtorem</a></li></ul></li><li><a href="#_13-压缩-css-文件">13，压缩 css 文件</a></li><li><a href="#_14-打包assets">14，打包assets</a></li><li><a href="#_15-使用总结">15.使用总结</a></li><li><a href="#_16-node-常用的方法-变量">16，node 常用的方法/变量</a></li><li><a href="#_17-webpack-的作用是什么-谈谈你对它的理解">17，webpack 的作用是什么，谈谈你对它的理解</a></li></ul></nav><h2 id="_1-webpack-概念" tabindex="-1">1，webpack 概念 <a class="header-anchor" href="#_1-webpack-概念" aria-label="Permalink to &quot;1，webpack 概念&quot;">​</a></h2><p><strong>什么是 webpack</strong></p><ol><li><p>Webpack 前端资源模块化管理和打包工具。可以将许多松散的模块按照依赖和引用关系打包成符合生产环境部署的前端资源。并将按需加载的模块进行代码分隔，等到实际需要的时候再加载。</p></li><li><p>webpack 运行在 node 环境上的一个包；webpack 可以把前端的任何资源, 当做模块, 来进行打包整合, 也可以支持不同的代码(ES6 模块代码, CSS 文件, LESS 文件, 图片....) 编写前端代码后, 可以被 webpack 打包整合, 运行在浏览器上；</p></li></ol><h2 id="_2-为什么学-webpack" tabindex="-1">2，为什么学 webpack <a class="header-anchor" href="#_2-为什么学-webpack" aria-label="Permalink to &quot;2，为什么学 webpack&quot;">​</a></h2><ol><li>开发的时候需要一个开发环境，要是我们修改一下代码保存之后浏览器就自动展现最新的代码那就好了；</li><li>​ 本地写代码的时候，要是调后端的接口不跨域就好了（代理服务）；</li><li>为了跟上时代，要是能用上什么 ES6 等新东西就好了（翻译服务）；</li><li>项目要上线了，要是能一键压缩代码啊图片什么的就好了（压缩打包服务）；</li></ol><h2 id="_3-webpack-特点" tabindex="-1">3，webpack 特点 <a class="header-anchor" href="#_3-webpack-特点" aria-label="Permalink to &quot;3，webpack 特点&quot;">​</a></h2><ol><li>丰富的插件，流行的插件, 方便进行开发工作；</li><li>大量的加载器，便于处理和加载各种静态资源；</li><li>将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载；</li></ol><h2 id="_4-相对于其他工具优点" tabindex="-1">4，相对于其他工具优点 <a class="header-anchor" href="#_4-相对于其他工具优点" aria-label="Permalink to &quot;4，相对于其他工具优点&quot;">​</a></h2><p>相对于其他模块打包工具(Grant/Gulp)优势,</p><ol><li>Webpack 以 CommonJS 的形式来书写脚本，对 AMD / CMD / ES6 模块 的支持也很全面，方便旧项目进行代码迁移。所有资源都能模块化；</li><li>开发便捷，能替代 Grunt / Gulp 的工作，比如打包 js/css、打包压缩图片、CSS 分离, 代码压缩等。扩展性强，插件机制完善，支持模块热替换等；</li></ol><h2 id="_5-准备工作" tabindex="-1">5，准备工作 <a class="header-anchor" href="#_5-准备工作" aria-label="Permalink to &quot;5，准备工作&quot;">​</a></h2><p><strong>1，安装 node 和 npm</strong></p><p>node 是 nodejs 运行的环境, npm 是安装 node 一起安装的包管理器的工具, 可以方便的管理我们需要的所有第三方依赖包</p><p><strong>2，安装 webpack 模块</strong></p><p>​webpack 通常使用 npm 包管理工具进行安装。现在 webpack 对外公布的稳定版本是 webpack4；全局安装 webpack 命令：<code>npm install webpack -g</code></p><table tabindex="0"><thead><tr><th>命令</th><th>安装环境</th><th>备注</th></tr></thead><tbody><tr><td>npm view webpack versions --json</td><td>不安装, 查看</td><td>查看现在所有 webpack 模块的版本号</td></tr><tr><td>npm install webpack -g</td><td>-g 全局安装CssList</td><td>在全局安装 webpack在电脑就可以使用 webpack 命令了(工具类模块要全局)</td></tr><tr><td>webpack -v</td><td>不安装, 查看全局 webpack 版本号(注意, webpack4.x 版本, 还要安装 webpack-cli 工具才可以运行此命令)</td><td>可能出现的问题: 1. webpack 不是内部或外部命令(证明你全局安装失败/计算机的环境变量 node 的配置失效)</td></tr></tbody></table><p><strong>3，安装 webpack-cli 工具包</strong> ​</p><p>webpack 的命令, 大多都会执行 webpack-cli 里的 Api 方法, 来实现具体的功能效果, 所以 webpack4.x 版本需要在全局安装此模块, 而 webpack3.x 没有抽离出来那些 API 方法, 所以 webpack3.x 则不需要安装此模块；</p><p>​ 命令: <code>npm i webpack-cli -g</code></p><p>​ 注意 webpack4 配合 webpack-cli3.x 版本</p><p><strong>4，两种环境讲解</strong></p><ul><li>本地开发环境(development): 我们在本地写代码的时候；</li><li>线上发布环境(production): 我们在本地开发完代码, 进行打包后, 对外的环境；</li></ul><h2 id="_6-webpack-的核心介绍" tabindex="-1">6，webpack 的核心介绍 <a class="header-anchor" href="#_6-webpack-的核心介绍" aria-label="Permalink to &quot;6，webpack 的核心介绍&quot;">​</a></h2><p><strong>1，重点说明：webpack.config.js 文件</strong></p><p>​ Webpack 为开发者提供了程序打包的配置信息入口，让开发者可以更好的控制, 管理程序的打包过程与最后程序的输出结果。默认的 webpack 配置文件是 webpack.config.js, 运行 webpack 打包命令, 会自动查看运行命令时, 所在目录下的 webpack.config.js 文件；</p><blockquote><p>注意: webpack4.x 版本可以省略这个文件, webpack3.x 版本是必须声明此文件的</p></blockquote><p><strong>2，核心概念讲解</strong></p><p>官网链接: <a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noreferrer">https://www.webpackjs.com/concepts/</a></p><table tabindex="0"><thead><tr><th style="text-align:center;">webpack的概念名</th><th style="text-align:center;">解释</th></tr></thead><tbody><tr><td style="text-align:center;">入口起点</td><td style="text-align:center;">基础目录, 指定了&quot;./src&quot;目录, 那么下面所有的配置中使用的相对路径, 都是以src为起点</td></tr><tr><td style="text-align:center;">入口</td><td style="text-align:center;">入口起点指示 webpack 应该使用哪个模块来作为构建其内部<em>依赖图</em>的开始进入起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的</td></tr><tr><td style="text-align:center;">出口</td><td style="text-align:center;">output告诉 webpack 在哪输出它所创建的结果及如何命名文件，默认值为 <code>./dist</code></td></tr><tr><td style="text-align:center;">加载器</td><td style="text-align:center;">loader 让 webpack 能去处理非 JavaScript 文件(webpack 自身只理解 JavaScript）loader 可以将所有类型的文件转换为webpack 能够处理的有效模块 然后你就可以利用 webpack 的打包能力，对它们进行处理。</td></tr><tr><td style="text-align:center;">插件</td><td style="text-align:center;">loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。 插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。<a href="https://www.webpackjs.com/api/plugins" target="_blank" rel="noreferrer">插件接口</a>功能极其强大，可以用来处理各种各样的任务。</td></tr><tr><td style="text-align:center;">模式</td><td style="text-align:center;">通过选择 <code>development</code> 或 <code>production</code> 之中的一个，来设置 <code>mode</code> 参数，你可以启用相应模式下的 webpack 内置的优化</td></tr></tbody></table><p><strong>3，配置文件参数讲解</strong></p><p>官网链接: <a href="https://www.webpackjs.com/configuration/" target="_blank" rel="noreferrer">https://www.webpackjs.com/configuration/</a></p><table tabindex="0"><thead><tr><th>键名</th><th>概念</th><th>解释</th></tr></thead><tbody><tr><td>context</td><td>入口起点</td><td>基础目录，<strong>绝对路径</strong>，用于从配置中解析入口起点(entry point)</td></tr><tr><td>entry</td><td>入口 (必须)</td><td>配置打包入口文件的名字</td></tr><tr><td>output</td><td>出口 (必须)</td><td>打包后输出到哪里, 和输出的文件名</td></tr><tr><td>module</td><td>加载器配置</td><td>在rules对应数组中, 定义对象规则</td></tr><tr><td>plugins</td><td>插件配置</td><td>配置插件功能</td></tr><tr><td>mode</td><td>模式</td><td>选择线上/线下环境模式</td></tr><tr><td>devtool</td><td>开发工具</td><td>如何生成 source map, 记录代码所在文件的行数 (调试方式)</td></tr></tbody></table><h2 id="_7-webpack-使用-打包-js-代码" tabindex="-1">7，webpack 使用 - 打包 js 代码 <a class="header-anchor" href="#_7-webpack-使用-打包-js-代码" aria-label="Permalink to &quot;7，webpack 使用 - 打包 js 代码&quot;">​</a></h2><p><strong>1，打包 js 代码</strong></p><ol><li>准备前端模块 js 文件, 和主入口文件 main.js(名字自定义), 在主入口文件里使用前端封装的模块</li><li>在当前工程目录中声明 webpack.config.js 的 webpack 配置文件, 并且填入配置对象信息(入口+出口必须的) <ul><li>dist 不存在会自动创建</li><li>output.path 的值必须是绝对路径 (因为 webpack 是从全局开始创建 dist 目录, 所以必须从全局出发)</li></ul></li><li>在当前工程目录中执行 webpack 打包命令, 查看出口生成的打包后的 js 文件</li><li>自己新建 index.html 文件引入打包后的 js, 执行查看效果</li></ol><blockquote><p>webpack 命令会自动查找当前命令所在目录下的 webpack.config.js 配置文件, 根据配置文件进行代码的打包</p></blockquote><p><strong>2，单入口--单出口</strong></p><ol><li>单个入口, 可以引入很多个要使用的模块部分, 单入口(指的是打包时候指定的入口文件)</li><li>单个出口, 指的打包所有 js, 最后要输入到一个单独的.js 文件当中使用</li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  context: __dirname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 拼接src的绝对路径, context设置入口的文件前缀, 代表入口要从这个文件夹开始寻找 (必须是绝对路径) __dirname: 指的当前文件所在文件夹的路径路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./main.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: __dirname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/dist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 给我输出到同级下的dist目录中(如果没有会自动创建)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bundle.js&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出js文件的名字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>3，多入口--单出口</strong></p><p>1，多入口: 告诉 webpack, 去哪些文件里进行打包</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  context: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./main.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./center.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置多入口文件路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: __dirname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/dist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bundle.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>4，多入口--多出口</strong></p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  context: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    first: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./main.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    second: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./center.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果是多入口单出口用数组结构, 如果是多入口, 多出口用对象结构, 而且key值是打包后的文件名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: __dirname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/dist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[name].js&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // [name]是webpack内置的字符串变量, 对应entry里每个key</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_8-打包-css-代码" tabindex="-1">8，打包 css 代码 <a class="header-anchor" href="#_8-打包-css-代码" aria-label="Permalink to &quot;8，打包 css 代码&quot;">​</a></h2><ol><li>需要下载 2 个加载器模块 (目的是为了让 webpack 认识 css 文件) <ul><li>css-loader: 接收一个 css 文件, 并且解析 import 方式 下载 cssloader 的时候 降低一个版本 @3 下载的版本是 3.6</li><li>style-loader: 接收 css 代码, 并且将其注入到 html 网页中的</li></ul></li><li>在 webpack.config.js 中, 加载器配置：</li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 对加载器进行配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  rules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 加载器的使用规则</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 独立的规则对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以.css结尾的文件类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      use: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;css-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用哪些加载器进行转换</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 注意:  2个加载器的顺序, 默认是从右往左进行使用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ol start="3"><li>在入口文件引入 css 模块</li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./style/home.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注意无需用变量接收</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="4"><li><p>会把 css 代码以字符串的形式, 打包进 js 文件当中</p></li><li><p>在 dist 下新建 index.html, 只要引入打包后的 bundle.js, 来查看 css 代码被打包进 js 的效果即可</p></li></ol><h2 id="_9-生成-html-文件" tabindex="-1">9，生成 html 文件 <a class="header-anchor" href="#_9-生成-html-文件" aria-label="Permalink to &quot;9，生成 html 文件&quot;">​</a></h2><ol><li>需要下载 1 个插件模块 <ul><li>html-webpack-plugin: <a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="noreferrer"><code>HtmlWebpackPlugin</code></a>简化了 HTML 文件的创建，你可以让插件为你生成一个 HTML 文件，使用默认模板, 或使用你自己指定的模板</li></ul></li><li>webpack.config.js 插件配置</li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HtmlWebpackPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;html-webpack-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 配置各种插件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HtmlWebpackPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 插件配置对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webpack ldx使用&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 产出文件名(在dist目录查看)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    template: __dirname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/index.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以此文件来作为基准(注意绝对路径, 因为此文件不在src下)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inject: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 代表打包后的资源都引入到html的什么位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    favicon: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./assets/favicon.ico&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 插入打包后的favicon图标</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // base: &quot;./&quot;,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // html网页中所有相对路径的前缀 (一般不给/给./, 虚拟路径)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 控制html文件是否要压缩(true压缩, false不压缩)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    minify: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //对html文件进行压缩，</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      collapseBooleanAttributes: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//是否简写boolean格式的属性如：disabled=&quot;disabled&quot;简写为disabled</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      collapseWhitespace: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//是否去除空格，默认false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      minifyCSS: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//是否压缩html里的css（使用clean-css进行的压缩） 默认值false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      minifyJS: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//是否压缩html里的js（使用uglify-js进行的压缩）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      removeAttributeQuotes: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//是否移除属性的引号 默认false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      removeComments: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//是否移除注释 默认false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      removeCommentsFromCDATA: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//从脚本和样式删除的注释, 默认false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      useShortDoctype: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //使用短的文档类型，将文档转化成html5，默认false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 数组元素是插件new对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><ol start="3"><li>src/index.html 静态网页模板</li><li>执行 webpack 打包命令, 观察在 dist 生成的目录中, 是否新增了 xxx.html 文件, 并且会自动引入所有需要的外部资源</li></ol><p><strong>报错</strong></p><blockquote><p>Cannot find module &quot;webpack/lib/node/NodeTeplatePlugins&quot;</p></blockquote><p>在安装 html-webpack-plugin 插件的工程中, 单独的在本地安装一下跟全局 webpack 对应的版本</p><p><strong>插件配置项如下:</strong></p><table tabindex="0"><thead><tr><th>选项 key</th><th>值类型</th><th>默认值</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>String</td><td>Webpack App</td><td>在生成 html 网页中title标签里的内容 (如果指定 template 选项, 则此选项失效</td></tr><tr><td>filename</td><td>String</td><td>index.html</td><td>生成的 html 网页文件的名字 (也可以设置目录+名字)</td></tr><tr><td>template</td><td>String</td><td></td><td>以哪个现有的 html 文件作为基础模板, 在此模板的基础上, 生成 html 网页文件</td></tr><tr><td>inject</td><td>Boolean/String</td><td>true</td><td>值的范围(true || &#39;head&#39; || &#39;body&#39; || false) true/&#39;body&#39; -&gt; script 等引入代码, 放到 body 标签内部末尾 &#39;head&#39;/false -&gt; script 等引入代码, 放到 head 标签内部末尾</td></tr><tr><td>favicon</td><td>String</td><td></td><td>将制定 favicon.ico 图标的路径, 插入到 html 网页中去</td></tr><tr><td>base</td><td>String</td><td></td><td>制定 html 中所有相对路径, 都以它的值为出发起点, 例如: base 的值为/bar/, 那么你 HTML 网页里的 img, src=&quot;my.img&quot;, 那实际上去找的路径其实是 /bar/my.img</td></tr><tr><td>minify</td><td>Boolean</td><td>看 mode 的值</td><td>是否压缩 html 代码, 如果 mode 为&#39;production&#39;, 那么 minify 的值为 true, 否则为 false</td></tr></tbody></table><h2 id="_10-分离-css-代码" tabindex="-1">10，分离 css 代码 <a class="header-anchor" href="#_10-分离-css-代码" aria-label="Permalink to &quot;10，分离 css 代码&quot;">​</a></h2><ol><li><p>需要引入 1 个插件模块,</p><ul><li>extract-text-webpack-plugin 使用下一个版本@next 会将所有的入口中引用的<code>*.css</code>，移动到独立分离的 CSS 文件。因此，你的样式将不再内嵌到 JS 中，而是会放到一个单独的 CSS 文件中。如果你的样式文件较大，这会做更快加载，因为 CSS 会跟 JS 并行加载。</li><li>此插件没有压缩 css 代码的功能</li></ul></li><li><p>webpack.config.js 加载器修改</p></li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExtractTextPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;extract-text-webpack-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 加载器的使用规则</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    use: ExtractTextPlugin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 从一个已存在的 loader 中，创建一个提取(extract) loader。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fallback: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 应用于当CSS没有被提取(正常使用use:css-loader进行提取, 如果失败, 则使用fallback来提取)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      use: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;css-loader&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // loader被用于将资源转换成一个CSS单独文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ol start="3"><li><p>插件配置: 其他选项默认即可</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExtractTextPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出的文件名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>在 dist 打包生成的目录中, 就会分离出单独的.css 文件</p></li></ol><p><strong>报错</strong></p><blockquote><p>Chunk.entrypoints: Use Chunks.groupsIterable and filter by instanceof Entrypoint instead</p></blockquote><p>&quot;extract-text-webpack-plugin&quot;: &quot;^3.0.2&quot; 此插件 3.x 版本对应 webpack3.x, 所以我们需要更高的 extract 版本, 所以下载 extract-text-webpack-plugin@next (@next 下载下一个内测最新版)</p><h2 id="_11-打包-less" tabindex="-1">11，打包 less <a class="header-anchor" href="#_11-打包-less" aria-label="Permalink to &quot;11，打包 less&quot;">​</a></h2><ol><li><p>需要安装 less 和 less-loader 来解析 less 代码, 和加载 less 文件</p><p>​ npm install less</p><p>​ npm install less-loader</p></li><li><p>在 webpack.config.js 中 配置加载器, 解析.less 文件</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">less</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;style-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;less-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>但是这样发现 css 代码没有分离出来, 所以还需要使用 extract-text-webpack-plugin 的配置, 分离出 css 代码</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">less</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ExtractTextPlugin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		fallback: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		use: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;less-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>观察打包后 style.css 中多了 less 文件里的样式代码</p></li></ol><h2 id="_12-集成-postcss" tabindex="-1">12，集成 postcss <a class="header-anchor" href="#_12-集成-postcss" aria-label="Permalink to &quot;12，集成 postcss&quot;">​</a></h2><h3 id="_1-什么是-postcss" tabindex="-1">1，什么是 postcss <a class="header-anchor" href="#_1-什么是-postcss" aria-label="Permalink to &quot;1，什么是 postcss&quot;">​</a></h3><p>是一个转换 CSS 代码的工具和插件 (postcss 转换 css 代码, 为了兼容不同的浏览器) 类似于 babel.js 把浏览器不兼容的 js 转换成兼容的 js 代码 (babel 转换 js 代码, 为了兼容不同浏览器) 注意它本身是一个工具, 和 less/sass 等预处理器不同, 它不能处理 css 代码而是靠各种插件来支持 css 在不同浏览器和环境下正确运行的</p><ul><li>增加可读性, 会自动帮你添加特定浏览器厂商的前缀 (插件: <strong>autoprefixer</strong>)</li><li>px 单位自动转 rem (插件: <strong>postcss-pxtorem</strong>)</li></ul><ol><li>先下载 postcss-loader 和 postcss 到当前工程中 npm install postcss npm install postcss-loader@3</li></ol><ul><li>postcss: 集成这个工具, 可以让它发挥它集成的翻译 css 的插件</li><li>postcss-loader: 对 css 文件进行处理</li></ul><ol start="2"><li>新建 webpack.config.js 同级的 postcss.config.js 配置文件</li><li>去 webpack.config.js 中, 把 postcss 使用到 css 相关的加载器中</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ExtractTextPlugin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		fallback: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		use: [{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			options: { importLoaders: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postcss-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// importLoaders 用于配置「css-loader 作用于 @import 的资源之前」有多少个 loader。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_2-autoprefixer" tabindex="-1">2，autoprefixer <a class="header-anchor" href="#_2-autoprefixer" aria-label="Permalink to &quot;2，autoprefixer&quot;">​</a></h3><p>在 css 和 less 文件中, 准备一些代码自动补全前缀：</p><p>1.先下载此插件模块: npm i autoprefixer@9 2.postcss.config.js 配置如下:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // postcss在翻译css代码的时候, 需要使用哪些插件功能</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1. 写使用插件模块的名字, postcss会自己去require引入</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2. 必须配置浏览器列表才可以 自动添加前缀</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    autoprefixer: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 浏览器支持列表放到了package.json中browserslist中进行编写</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>package.json 的 browserslist 下设置</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;browserslist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;defaults&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;not ie &lt; 11&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;last 2 versions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;iOS 7&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;last 3 iOS versions&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// defaults相当于 &quot;&gt; 5%&quot;, 国内浏览器使用率大于5%的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// not ie &lt; 11  不兼容IE11以下的浏览器 (支持ie11)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 支持最后2个版本</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// iOS苹果手机操作系统, 支持ios7</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 支持最后3个IOS的版本 ios13, 12, 11</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ol start="3"><li>打包观察生成的 style.css 文件中代码是否拥有浏览器兼容的前缀</li></ol><h3 id="_3-postcss-pxtorem" tabindex="-1">3，postcss-pxtorem <a class="header-anchor" href="#_3-postcss-pxtorem" aria-label="Permalink to &quot;3，postcss-pxtorem&quot;">​</a></h3><p>浏览 &amp;&amp; 画图, 解释 rem 如何适配的此插件是自动把(css/less..文件里 px 转换成适配的 rem 单位), 无需再手动计算了</p><ol><li>先下载此插件模块 npm i postcss-pxtorem</li><li>在 postcss.config.js 中配置如下,</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;postcss-pxtorem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	rootValue: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这个值就是你看设计稿上基准字体是多少, 就写多少, 1rem=16px</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	unitPrecision: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 小数点几位</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	propList: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指定需要转换rem的属性 例如: &#39;font-size&#39; &#39;line-height&#39; *代表所有属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	mediaQuery: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 媒体查询的px是否转换</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	minPixelValue: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 小于指定数值不转换</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 默认px识别大写小, 所以不写成px不转换</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>注意: 只对 css/less 文件内代码有效, 因为 webpack.config.js 中, 加载器使用了 postcss-loader</p></blockquote><blockquote><p>注意: 如果 html 中使用 px 转 rem, 可以安装插件, 来自动把 px 转换成 rem 使用</p></blockquote><blockquote><p>注意: html 的 font-size 不会自动随着网页的变化而变化</p></blockquote><ol start="3"><li>在 index.html 模板文件中, 根据当前网页设置 html 的 fontSize, 来让所有 rem 单位在运行时得到真正的像素大小</li></ol><h2 id="_13-压缩-css-文件" tabindex="-1">13，压缩 css 文件 <a class="header-anchor" href="#_13-压缩-css-文件" aria-label="Permalink to &quot;13，压缩 css 文件&quot;">​</a></h2><p>想要压缩打包后的 css 文件, 可以使用 optimize-css-assets-webpack-plugin, 先下载这个插件,在 webpack.config.js 中配置</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> OptimizeCss</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;optimize-css-assets-webpack-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 新增</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OptimizeCss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_14-打包assets" tabindex="-1">14，打包assets <a class="header-anchor" href="#_14-打包assets" aria-label="Permalink to &quot;14，打包assets&quot;">​</a></h2><ol><li>需要引入 2 个加载器模块, <ul><li>url-loader: <code>url-loader</code> 功能类似于 <a href="https://github.com/webpack-contrib/file-loader" target="_blank" rel="noreferrer"><code>file-loader</code></a>，但是在文件大小（单位 byte）低于指定的限制时，可以返回一个 DataURL(base64 字符串)</li><li>file-loader: 产出, 寻找文件的引用位置</li></ul></li><li>准备工作: 注意打包的资源, 都要和入口文件产生直接/间接关系, 所以不要写在 index.html 模板文件中, 那样是不会被 webpack 处理的 <ul><li>assets 下准备 图片 和字体图标</li><li>在 main.js 中, 创建标签, 使用图片/字体图标样式 <blockquote><p>注意: webpack 认为, 图片也是一个模块, 所以才需要 loader 来解析图片, 所以图片需要 import/require 引入)</p></blockquote></li></ul></li><li>webpack.config.js 加载器配置:</li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	test: /\\.(png|jpg|jpeg|gif|svg)$/,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	use: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			loader: &#39;url-loader&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			options: { // 参数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">				limit: 8192 // 8kb内的文件都转换成DataURL, 如果超出的都转换成base64字符串</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">},</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 上面options可以简写成下面?传参数的格式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(png</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">jpg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">jpeg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">gif</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">svg)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 处理这些结尾的文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    {   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// options传参的方式被我改成了?传参</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // ? 代表给加载器传入配置参数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // limit字段: 对打包的图片限制字节大小为8KB以内, 超出此限制,会被file-loader产生一个文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // [name]: 代表直接使用打包目标文件的名字,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // [ext]: 代表直接使用打包目标文件的扩展名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // name字段: 代表给打包后的文件定义名字(可以使用[]这种规则)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // 8KB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;url-loader?limit=8192&amp;name=assetsDir/[name].[ext]&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果处理字体图标需要引入这个</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(woff2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">eot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">ttf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">otf)(</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	loader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;url-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		limit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fonts/[name].[hash:7].[ext]&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><ol start="4"><li>执行打包命令, 查看 dist 目录中和 index.html 中的效果</li></ol><p><strong>总结:</strong> 小于 limit 限制的 assets 下的图片资源, 都会被打包进 js 文件中, 先被 url-loader 转换成了 base64 字符串 (这种加密方式的字符串, 可以被 img 标签的 src 所接受, 但是一定要在 base64 加密的字符串前, 声明一个表示 data:image/png;base64, 后面跟 base64 字符串)</p><h2 id="_15-使用总结" tabindex="-1">15.使用总结 <a class="header-anchor" href="#_15-使用总结" aria-label="Permalink to &quot;15.使用总结&quot;">​</a></h2><p>​ 找插件/加载器, 下载插件/加载器模块, webpack.config.js 中进行配置, 编码/准备资源, 打包, 把打包后的资源部署到服务器上；</p><p>​ 部署: 配置环境和需要的各种软件参数等, 上传代码资源包</p><h2 id="_16-node-常用的方法-变量" tabindex="-1">16，node 常用的方法/变量 <a class="header-anchor" href="#_16-node-常用的方法-变量" aria-label="Permalink to &quot;16，node 常用的方法/变量&quot;">​</a></h2><ul><li><p>__dirname (注意 2 个下划线): 代表当前文件所在文件夹的 绝对路径</p></li><li><p>path.resolve: 合并 2 个路径</p></li></ul><h2 id="_17-webpack-的作用是什么-谈谈你对它的理解" tabindex="-1">17，webpack 的作用是什么，谈谈你对它的理解 <a class="header-anchor" href="#_17-webpack-的作用是什么-谈谈你对它的理解" aria-label="Permalink to &quot;17，webpack 的作用是什么，谈谈你对它的理解&quot;">​</a></h2><p><code>答案</code>: 现在的前端网页功能丰富，特别是 SPA（single page web application 单页应用）技术流行后，JavaScript 的复杂度增加和需要一大堆依赖包，还需要解决 SCSS，Le…新增样式的扩展写法的编译工作。所以现代化的前端已经完全依赖于 WebPack 的辅助了。</p><p>现在最流行的三个前端框架，可以说和 webpack 已经紧密相连，框架官方都推出了和自身框架依赖的 webpack 构建工具。</p><p>· React.js+WebPack</p><p>· Vue.js+WebPack</p><p>· AngluarJS+WebPack</p><p><strong>webpack 的工作原理?</strong></p><p><code>答案:</code> WebPack 可以看做是模块打包机：它做的事情是，分析你的项目结构，找到 JavaScript 模块以及其它的一些浏览器不能直接运行的拓展语言（Sass，TypeScript 等），并将其转换和打包为合适的格式供浏览器使用。在 3.0 出现后，Webpack 还肩负起了优化项目的责任。</p><p><strong>webpack 插件网址</strong> <a href="https://www.webpackjs.com/plugins/" target="_blank" rel="noreferrer">https://www.webpackjs.com/plugins/</a></p><p><strong>webpack 加载器网址</strong> <a href="https://www.webpackjs.com/loaders/" target="_blank" rel="noreferrer">https://www.webpackjs.com/loaders/</a></p>`,115))])}const m=n(r,[["render",d]]);export{y as __pageData,m as default};
