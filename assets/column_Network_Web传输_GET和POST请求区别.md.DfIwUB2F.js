import{_ as n,C as t,c as l,o as p,j as i,G as e,aQ as h,a as r}from"./chunks/framework.DEi4YP2n.js";const b=JSON.parse('{"title":"GET 与 POST 两大请求的区别与应用","description":"","frontmatter":{},"headers":[],"relativePath":"column/Network/Web传输/GET和POST请求区别.md","filePath":"column/Network/Web传输/GET和POST请求区别.md","lastUpdated":1759995509000}'),k={name:"column/Network/Web传输/GET和POST请求区别.md"};function E(d,s,o,g,c,y){const a=t("ArticleMetadata");return p(),l("div",null,[s[0]||(s[0]=i("h1",{id:"get-与-post-两大请求的区别与应用",tabindex:"-1"},[r("GET 与 POST 两大请求的区别与应用 "),i("a",{class:"header-anchor",href:"#get-与-post-两大请求的区别与应用","aria-label":'Permalink to "GET 与 POST 两大请求的区别与应用"'},"​")],-1)),e(a),s[1]||(s[1]=h(`<h2 id="一、核心区别对比" tabindex="-1">一、核心区别对比 <a class="header-anchor" href="#一、核心区别对比" aria-label="Permalink to &quot;一、核心区别对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>GET</th><th>POST</th></tr></thead><tbody><tr><td><strong>安全性</strong></td><td>参数在 URL 中可见，不安全</td><td>参数在请求体中，相对安全</td></tr><tr><td><strong>数据长度</strong></td><td>受 URL 长度限制（通常 2048 字符）</td><td>无限制（理论上）</td></tr><tr><td><strong>缓存</strong></td><td>可被缓存</td><td>不可被缓存</td></tr><tr><td><strong>浏览器历史</strong></td><td>参数保留在浏览器历史中</td><td>参数不会保存在浏览器历史中</td></tr><tr><td><strong>幂等性</strong></td><td>是（多次请求结果相同）</td><td>否（可能改变服务器状态）</td></tr><tr><td><strong>后退/刷新</strong></td><td>无害</td><td>数据会被重新提交</td></tr><tr><td><strong>编码类型</strong></td><td>application/x-www-form-urlencoded</td><td>支持多种编码类型</td></tr><tr><td><strong>书签</strong></td><td>可收藏为书签</td><td>不可收藏为书签</td></tr><tr><td><strong>使用场景</strong></td><td>获取数据（查询、搜索）</td><td>提交数据（登录、注册、支付）</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">幂等性介绍</p><p>幂等性是一个数学和计算机科学概念，指的是一个操作执行一次与执行多次所产生的效果完全相同。</p><p>案例：现在想象一个设置音量为 20 的按钮：</p><ul><li>按一次：音量变为 20</li><li>再按多次：音量仍然是 20 ；这是幂等操作，因为无论执行多少次，结果都一样。</li></ul></div><h2 id="二、详细解析" tabindex="-1">二、详细解析 <a class="header-anchor" href="#二、详细解析" aria-label="Permalink to &quot;二、详细解析&quot;">​</a></h2><h3 id="_1-安全性比较" tabindex="-1">1. 安全性比较 <a class="header-anchor" href="#_1-安全性比较" aria-label="Permalink to &quot;1. 安全性比较&quot;">​</a></h3><p><strong>GET 请求</strong>将参数直接附加在 URL 后面，形式为：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://example.com/search?keyword=test&amp;category=books</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这意味着参数在地址栏可见，可能被浏览器历史记录、服务器日志记录，因此不适合传输敏感信息如密码、个人信息等。</p><p><strong>POST 请求</strong>将参数放在请求体中，不会显示在 URL 上：</p><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">POST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /login </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application/x-www-form-urlencoded</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username=john&amp;password=secret123</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这种方式相对更安全，但请注意，在没有使用 HTTPS 的情况下，POST 数据仍然可能被拦截。</p><h3 id="_2-数据长度限制" tabindex="-1">2. 数据长度限制 <a class="header-anchor" href="#_2-数据长度限制" aria-label="Permalink to &quot;2. 数据长度限制&quot;">​</a></h3><p><strong>GET 请求</strong>受到 URL 长度限制，不同浏览器和服务器有不同的限制：</p><ul><li>IE 浏览器：最多 2083 个字符</li><li>Chrome/Firefox：至少 8000 个字符以上</li><li>服务器配置：通常限制在 8192 字节以内</li></ul><p><strong>POST 请求</strong>理论上没有长度限制，但实际上受服务器配置和内存限制。适合传输大量数据，如文件上传、长文本等。</p><h3 id="_3-缓存与历史记录" tabindex="-1">3. 缓存与历史记录 <a class="header-anchor" href="#_3-缓存与历史记录" aria-label="Permalink to &quot;3. 缓存与历史记录&quot;">​</a></h3><p><strong>GET 请求</strong>可以被浏览器缓存，参数会保留在浏览器历史记录中。这意味着：</p><ul><li>优点：可以收藏为书签，便于分享链接</li><li>缺点：可能泄露敏感查询参数</li></ul><p><strong>POST 请求</strong>不会被缓存，参数也不会保存在浏览器历史中，提供更好的隐私保护。</p><h3 id="_4-幂等性与副作用" tabindex="-1">4. 幂等性与副作用 <a class="header-anchor" href="#_4-幂等性与副作用" aria-label="Permalink to &quot;4. 幂等性与副作用&quot;">​</a></h3><p><strong>GET 请求</strong>应该是幂等的，即多次执行相同的 GET 请求应该返回相同的结果，且不会对服务器状态产生改变。适合用于数据检索操作。</p><p><strong>POST 请求</strong>通常是非幂等的，每次请求可能会对服务器状态产生改变（如创建新资源）。因此，浏览器在刷新时会提示是否重新提交表单数据。</p><h3 id="_5-编码类型" tabindex="-1">5. 编码类型 <a class="header-anchor" href="#_5-编码类型" aria-label="Permalink to &quot;5. 编码类型&quot;">​</a></h3><p><strong>GET 请求</strong>只支持<code>application/x-www-form-urlencoded</code>编码格式，参数以键值对形式出现。</p><p><strong>POST 请求</strong>支持多种编码类型：</p><ul><li><code>application/x-www-form-urlencoded</code>：默认表单编码</li><li><code>multipart/form-data</code>：适用于文件上传</li><li><code>application/json</code>：传输 JSON 数据</li><li><code>text/plain</code>：纯文本格式</li></ul><h2 id="三、使用场景" tabindex="-1">三、使用场景 <a class="header-anchor" href="#三、使用场景" aria-label="Permalink to &quot;三、使用场景&quot;">​</a></h2><h3 id="适合使用-get-请求的场景" tabindex="-1">适合使用 GET 请求的场景 <a class="header-anchor" href="#适合使用-get-请求的场景" aria-label="Permalink to &quot;适合使用 GET 请求的场景&quot;">​</a></h3><ol><li><strong>搜索查询</strong> - 用户输入搜索关键词</li><li><strong>分页导航</strong> - 页面切换和筛选</li><li><strong>数据筛选</strong> - 按条件过滤数据</li><li><strong>获取资源</strong> - 请求静态资源或 API 数据</li><li><strong>可分享链接</strong> - 包含所有必要参数的 URL</li></ol><h3 id="适合使用-post-请求的场景" tabindex="-1">适合使用 POST 请求的场景 <a class="header-anchor" href="#适合使用-post-请求的场景" aria-label="Permalink to &quot;适合使用 POST 请求的场景&quot;">​</a></h3><ol><li><strong>用户登录/注册</strong> - 提交用户名和密码</li><li><strong>表单提交</strong> - 创建或更新资源</li><li><strong>文件上传</strong> - 传输大量数据</li><li><strong>敏感操作</strong> - 如支付、删除账户</li><li><strong>修改服务器状态</strong> - 任何改变数据的操作</li></ol><h2 id="四、代码示例" tabindex="-1">四、代码示例 <a class="header-anchor" href="#四、代码示例" aria-label="Permalink to &quot;四、代码示例&quot;">​</a></h2><h3 id="get-请求示例" tabindex="-1">GET 请求示例 <a class="header-anchor" href="#get-请求示例" aria-label="Permalink to &quot;GET 请求示例&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用Fetch API发送GET请求</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.example.com/products?category=books&amp;limit=10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Error:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用Axios发送GET请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axios</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.example.com/users&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    params: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ID: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12345</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      sort: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.data))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Error:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="post-请求示例" tabindex="-1">POST 请求示例 <a class="header-anchor" href="#post-请求示例" aria-label="Permalink to &quot;POST 请求示例&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用Fetch API发送POST请求</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.example.com/users&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;Content-Type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  body: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John Doe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    email: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;john@example.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Error:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用Axios发送POST请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axios</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.example.com/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    username: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;john&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    password: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;secret123&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.data))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Error:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="五、常见误区" tabindex="-1">五、常见误区 <a class="header-anchor" href="#五、常见误区" aria-label="Permalink to &quot;五、常见误区&quot;">​</a></h2><ol><li><strong>POST 比 GET 更安全</strong>：这只是相对而言，在没有 HTTPS 的情况下，两者都不安全</li><li><strong>GET 只能获取数据</strong>：技术上可以通过 GET 修改数据，但这违背了 HTTP 规范</li><li><strong>POST 没有长度限制</strong>：虽然理论上没有，但实际上受服务器配置限制</li></ol>`,38))])}const F=n(k,[["render",E]]);export{b as __pageData,F as default};
