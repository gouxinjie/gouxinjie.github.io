import{_ as n,C as e,c as t,o as l,j as a,G as p,aQ as r,a as h}from"./chunks/framework.DEi4YP2n.js";const y=JSON.parse('{"title":"toRaw：获取原始对象","description":"","frontmatter":{},"headers":[],"relativePath":"column/Vue/响应式API进阶/toRaw.md","filePath":"column/Vue/响应式API进阶/toRaw.md","lastUpdated":1759995509000}'),k={name:"column/Vue/响应式API进阶/toRaw.md"};function o(d,s,c,E,g,u){const i=e("ArticleMetadata");return l(),t("div",null,[s[0]||(s[0]=a("h1",{id:"toraw-获取原始对象",tabindex:"-1"},[h("toRaw：获取原始对象 "),a("a",{class:"header-anchor",href:"#toraw-获取原始对象","aria-label":'Permalink to "toRaw：获取原始对象"'},"​")],-1)),p(i),s[1]||(s[1]=r(`<nav class="table-of-contents"><ul><li><a href="#_1-toraw-的作用">1. toRaw 的作用</a></li><li><a href="#_2-toraw-的用法">2. toRaw 的用法</a></li><li><a href="#_3-toraw-的应用场景">3. toRaw 的应用场景</a></li><li><a href="#_4-toraw-的限制">4. toRaw 的限制</a></li><li><a href="#_5-示例-与外部库的兼容性">5. 示例：与外部库的兼容性</a></li></ul></nav><p>在 <strong>Vue 3</strong> 中，<code>toRaw</code> 是一个非常有用的函数，它来自于 <strong><code>@vue/reactivity</code></strong> 包，主要用于获取 <strong>响应式对象</strong>（如由 <code>reactive</code> 创建的对象）的 <strong>原始对象</strong>。</p><h3 id="_1-toraw-的作用" tabindex="-1">1. <code>toRaw</code> 的作用 <a class="header-anchor" href="#_1-toraw-的作用" aria-label="Permalink to &quot;1. \`toRaw\` 的作用&quot;">​</a></h3><p>Vue 3 中的响应式系统基于 <strong>Proxy</strong>，当你通过 <code>reactive</code> 函数将一个对象转化为响应式对象时，Vue 会使用 <code>Proxy</code> 来拦截对该对象的访问和修改。然而，这种响应式对象与原始对象（即创建时传入的对象）之间并没有直接的引用关系。<code>toRaw</code> 的作用就是 <strong>获取这个原始对象</strong>，绕过 Vue 的响应式代理。</p><h3 id="_2-toraw-的用法" tabindex="-1">2. <code>toRaw</code> 的用法 <a class="header-anchor" href="#_2-toraw-的用法" aria-label="Permalink to &quot;2. \`toRaw\` 的用法&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { reactive, toRaw } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> original</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reactiveObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(original);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reactiveObj.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 &#39;Vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 toRaw 获取原始对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> raw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reactiveObj);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(raw); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 { name: &#39;Vue&#39;, version: 3 }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(raw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> original); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 true，说明 \`raw\` 是原始对象</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在上面的例子中：</p><ol><li>我们通过 <code>reactive</code> 创建了一个响应式对象 <code>reactiveObj</code>，它与原始对象 <code>original</code> 共享数据。</li><li>使用 <code>toRaw(reactiveObj)</code> 获取了这个对象的原始数据，<code>raw</code> 就是原始对象 <code>original</code>，通过比较可以确认它们是同一个对象。</li></ol><h3 id="_3-toraw-的应用场景" tabindex="-1">3. <code>toRaw</code> 的应用场景 <a class="header-anchor" href="#_3-toraw-的应用场景" aria-label="Permalink to &quot;3. \`toRaw\` 的应用场景&quot;">​</a></h3><ol><li><p><strong>避免响应式包装</strong>：有时候你可能需要访问对象的原始数据，而不是通过响应式代理进行访问。这时，<code>toRaw</code> 可以帮助你绕过 Vue 的代理，访问到原始对象。</p></li><li><p><strong>调试</strong>：在调试过程中，你可能希望查看组件的原始数据，而不被 Vue 的响应式代理包装影响。使用 <code>toRaw</code> 可以让你方便地查看对象的原始状态。</p></li><li><p><strong>与外部库集成</strong>：一些外部库可能不理解 Vue 的响应式代理，直接操作响应式对象可能会导致问题。使用 <code>toRaw</code> 可以将响应式对象转回原始对象，避免与外部库的兼容性问题。</p></li></ol><h3 id="_4-toraw-的限制" tabindex="-1">4. <code>toRaw</code> 的限制 <a class="header-anchor" href="#_4-toraw-的限制" aria-label="Permalink to &quot;4. \`toRaw\` 的限制&quot;">​</a></h3><ul><li><code>toRaw</code> 只对 <strong>响应式对象</strong> 生效，普通的对象调用 <code>toRaw</code> 没有任何效果。</li><li>它并不会解除原始对象的代理，如果你在后续修改了响应式对象，Vue 仍然会追踪这些变更。</li></ul><h3 id="_5-示例-与外部库的兼容性" tabindex="-1">5. 示例：与外部库的兼容性 <a class="header-anchor" href="#_5-示例-与外部库的兼容性" aria-label="Permalink to &quot;5. 示例：与外部库的兼容性&quot;">​</a></h3><p>假设我们有一个第三方库，它不理解 Vue 的 Proxy，不能正确处理响应式对象。使用 <code>toRaw</code> 可以解决这个问题。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { reactive, toRaw } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个响应式对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reactiveObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 假设 thirdPartyLib 不理解 Proxy，需要原始对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> thirdPartyLib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  updateName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> raw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 toRaw 获取原始对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(raw.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用原始对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thirdPartyLib.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reactiveObj);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>在这个例子中，<code>thirdPartyLib</code> 期望一个普通的对象而不是响应式对象，因此我们通过 <code>toRaw</code> 获取原始对象。</p>`,16))])}const m=n(k,[["render",o]]);export{y as __pageData,m as default};
