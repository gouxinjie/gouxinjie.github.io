import{_ as a,C as o,c as s,o as i,j as e,G as n,aQ as r,a as d}from"./chunks/framework.DEi4YP2n.js";const f=JSON.parse('{"title":"本地开发为什么需要端口号","description":"","frontmatter":{},"headers":[],"relativePath":"column/Network/网络基础/本地开发为什么需要端口.md","filePath":"column/Network/网络基础/本地开发为什么需要端口.md","lastUpdated":1760343849000}'),c={name:"column/Network/网络基础/本地开发为什么需要端口.md"};function h(p,t,g,u,_,m){const l=o("ArticleMetadata");return i(),s("div",null,[t[0]||(t[0]=e("h1",{id:"本地开发为什么需要端口号",tabindex:"-1"},[d("本地开发为什么需要端口号 "),e("a",{class:"header-anchor",href:"#本地开发为什么需要端口号","aria-label":'Permalink to "本地开发为什么需要端口号"'},"​")],-1)),n(l),t[1]||(t[1]=r(`<nav class="table-of-contents"><ul><li><a href="#_1-没有域名和-dns-解析">1. 没有域名和 DNS 解析</a></li><li><a href="#_2-端口是-进程的地址">2. 端口是“进程的地址”</a></li><li><a href="#_3-权限和冲突规避">3. 权限和冲突规避</a></li><li><a href="#_4-同时运行多个项目">4. 同时运行多个项目</a></li><li><a href="#_5-为什么生产环境通常不需要端口号">5. 为什么生产环境通常不需要端口号？</a></li><li><a href="#_6-总结">6. 总结</a></li></ul></nav><p>在日常开发前端或全栈项目时，我们经常遇到这样一个现象：</p><ul><li>本地开发：访问项目时必须带端口号，例如 <code>http://localhost:5173、http://127.0.0.1:3000</code>。</li><li>生产环境：上线后用户访问时通常不需要写端口号，只需要域名，例如 <code>https://www.example.com</code>。</li></ul><p><strong>那么这是为什么呢？</strong></p><p>下面我们从几个关键点来详细解释：</p><h3 id="_1-没有域名和-dns-解析" tabindex="-1">1. 没有域名和 DNS 解析 <a class="header-anchor" href="#_1-没有域名和-dns-解析" aria-label="Permalink to &quot;1. 没有域名和 DNS 解析&quot;">​</a></h3><ul><li><strong>生产环境</strong>：网站有域名（如 <code>www.myapp.com</code>），DNS 会将其解析到服务器的 IP，并且浏览器会为 HTTP/HTTPS 自动添加默认端口（80/443）。</li><li><strong>本地开发</strong>：你的电脑通常没有公网域名。你访问自己电脑最直接的方式就是使用<strong>本地回环地址</strong> <code>127.0.0.1</code> 或 <code>localhost</code>。它们都指向你自己的机器。</li></ul><p><strong>问题来了</strong>：当你输入 <code>http://localhost</code> 时，浏览器默认会去连接 <code>localhost:80</code>。但你的开发程序就一定运行在 80 端口吗？几乎肯定不会。</p><h3 id="_2-端口是-进程的地址" tabindex="-1">2. 端口是“进程的地址” <a class="header-anchor" href="#_2-端口是-进程的地址" aria-label="Permalink to &quot;2. 端口是“进程的地址”&quot;">​</a></h3><p>你的电脑同时可能运行着很多程序，它们都可能需要网络通信。</p><ul><li>你可能在跑一个前端项目（比如用 Vue 或 React）</li><li>同时跑着一个后端 API 服务（比如用 Node.js, Python Flask, Java Spring）</li><li>可能还开着 MySQL 数据库（默认端口 3306）</li><li>甚至还有 MongoDB（默认端口 27017）</li></ul><p><strong>每个服务都需要一个唯一的端口来监听请求</strong>，否则操作系统会不知道把接收到的数据包交给哪个程序。</p><ul><li><strong>例子</strong>：你把后端 API 服务运行在 <code>3000</code> 端口，把前端开发服务器运行在 <code>8080</code> 端口。 <ul><li>你想测试 API 时，就需要访问 <code>http://localhost:3000/api/users</code></li><li>你想查看网页时，就需要访问 <code>http://localhost:8080</code></li><li>如果你不指定端口，两个服务都无法被正确访问。</li></ul></li></ul><h3 id="_3-权限和冲突规避" tabindex="-1">3. 权限和冲突规避 <a class="header-anchor" href="#_3-权限和冲突规避" aria-label="Permalink to &quot;3. 权限和冲突规避&quot;">​</a></h3><ul><li><strong>权限问题</strong>：在 Linux 和 macOS 系统上，绑定<strong>1024 以下的端口</strong>（如 80、443）通常需要管理员（root）权限。这是出于安全考虑。让一个普通的开发程序以管理员身份运行是非常危险的做法。因此，开发者自然而然地会选择使用 1024 以上的高端口号（如 3000, 5000, 8000, 8080 等），这些端口普通用户权限就可以使用。</li><li><strong>避免冲突</strong>：80 端口可能已经被你电脑上的其他软件占用（比如你安装了 Nginx 或 Apache）。如果你强行让开发程序使用 80 端口，会导致冲突，两个程序都无法正常工作。选择一个不常用的高端口号可以有效避免这个问题。</li></ul><h3 id="_4-同时运行多个项目" tabindex="-1">4. 同时运行多个项目 <a class="header-anchor" href="#_4-同时运行多个项目" aria-label="Permalink to &quot;4. 同时运行多个项目&quot;">​</a></h3><p>这是开发时的常态。你可能同时在开发公司项目、个人项目和一个实验性的小 demo。</p><ul><li>项目 A 运行在 <code>端口3001</code></li><li>项目 B 运行在 <code>端口4000</code></li><li>项目 C（一个静态网站）运行在 <code>端口8080</code></li></ul><p>通过指定不同的端口，你可以在本地浏览器中同时打开这三个项目进行测试，它们之间互不干扰。 <code>http://localhost:3001</code> <code>http://localhost:4000</code> <code>http://localhost:8080</code></p><h3 id="_5-为什么生产环境通常不需要端口号" tabindex="-1">5. 为什么生产环境通常不需要端口号？ <a class="header-anchor" href="#_5-为什么生产环境通常不需要端口号" aria-label="Permalink to &quot;5. 为什么生产环境通常不需要端口号？&quot;">​</a></h3><p>在生产环境里，通常会通过<code> Nginx / Apache / 负载均衡器</code> 统一处理请求：</p><ul><li>统一使用 80/443 <ul><li>用户访问时不用写端口，体验更好。</li><li>域名 <code>www.example.com</code> 默认指向 80/443 端口上的服务。</li></ul></li><li>反向代理隐藏端口 <ul><li>比如后端 API 实际跑在 localhost:8080，但通过 Nginx 配置：</li></ul></li></ul><div class="language-nginx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /api/ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://127.0.0.1:8080/;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>用户访问 <a href="https://www.example.com/api%EF%BC%8C%E4%B8%8D%E4%BC%9A%E6%84%9F%E7%9F%A5%E5%90%8E%E7%AB%AF%E7%9C%9F%E5%AE%9E%E7%9A%84%E7%AB%AF%E5%8F%A3%E3%80%82" target="_blank" rel="noreferrer">https://www.example.com/api，不会感知后端真实的端口。</a></p><ul><li><p>多服务统一网关</p><ul><li>即便系统内部有多个微服务、不同端口，外部用户也只会通过网关访问，端口对用户是透明的。</li></ul></li></ul><h3 id="_6-总结" tabindex="-1">6. 总结 <a class="header-anchor" href="#_6-总结" aria-label="Permalink to &quot;6. 总结&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">方面</th><th style="text-align:left;">本地开发环境</th><th style="text-align:left;">生产环境</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>访问地址</strong></td><td style="text-align:left;"><code>localhost</code> 或 <code>127.0.0.1</code></td><td style="text-align:left;">公网域名（如 <code>www.example.com</code>）</td></tr><tr><td style="text-align:left;"><strong>服务数量</strong></td><td style="text-align:left;">同时运行多个开发服务</td><td style="text-align:left;">通常由统一的 Web 服务器（如 Nginx）代理</td></tr><tr><td style="text-align:left;"><strong>权限</strong></td><td style="text-align:left;">普通用户权限，无法使用 80/443</td><td style="text-align:left;">root 权限，可以使用 80/443</td></tr><tr><td style="text-align:left;"><strong>必要性</strong></td><td style="text-align:left;"><strong>必须指定端口</strong>来区分不同服务</td><td style="text-align:left;">浏览器对 HTTP/HTTPS<strong>自动添加默认端口</strong></td></tr></tbody></table><p>所以，本地开发需要端口号，是<strong>在缺乏标准化网络基础设施（域名、DNS、专业 Web 服务器）的情况下，一种简单、灵活且必要的寻址机制</strong>。它保证了开发者能够高效、隔离地同时运行和测试多个服务。</p>`,28))])}const b=a(c,[["render",h]]);export{f as __pageData,b as default};
