import{_ as a,C as d,c,o as l,j as o,G as r,aQ as i,a as n}from"./chunks/framework.CZC_k6km.js";const s="/assets/tcp-three-handshakes.JgqBhamE.png",h="/assets/tcp-four-waves.BTA1LjTr.png",C=JSON.parse('{"title":"TCP/IP 协议：互联网的基石","description":"","frontmatter":{},"headers":[],"relativePath":"column/Network/网络基础/TCP-IP协议.md","filePath":"column/Network/网络基础/TCP-IP协议.md","lastUpdated":1757062736000}'),p={name:"column/Network/网络基础/TCP-IP协议.md"};function u(b,e,P,T,q,I){const t=d("ArticleMetadata");return l(),c("div",null,[e[0]||(e[0]=o("h1",{id:"tcp-ip-协议-互联网的基石",tabindex:"-1"},[o("strong",null,"TCP/IP 协议：互联网的基石"),n(),o("a",{class:"header-anchor",href:"#tcp-ip-协议-互联网的基石","aria-label":'Permalink to "**TCP/IP 协议：互联网的基石**"'},"​")],-1)),r(t),e[1]||(e[1]=i('<h2 id="tcp-ip-概述" tabindex="-1">TCP/IP 概述 <a class="header-anchor" href="#tcp-ip-概述" aria-label="Permalink to &quot;TCP/IP 概述&quot;">​</a></h2><p><code>TCP/IP</code>是互联网实际使用的协议族（而<code>OSI</code>是理论模型），由<strong>4 层</strong>构成：</p><table tabindex="0"><thead><tr><th>TCP/IP 四层</th><th>对应 OSI 层</th><th>核心功能</th></tr></thead><tbody><tr><td>应用层</td><td>应用层/表示层/会话层</td><td>提供用户服务（HTTP/FTP/DNS）</td></tr><tr><td>传输层</td><td>传输层</td><td>端到端通信（TCP/UDP）</td></tr><tr><td>网络层</td><td>网络层</td><td>寻址和路由（IP/ICMP）</td></tr><tr><td>网络接口层</td><td>数据链路层/物理层</td><td>物理传输（以太网/Wi-Fi）</td></tr></tbody></table><blockquote><p>💡 <strong>关键区别</strong>：<code>TCP/IP</code>更简洁，将会话/表示层合并到应用层，数据链路/物理层合并为网络接口层。</p><p><strong>TCP/IP 是实际实现，OSI 是理论模型</strong></p></blockquote><h2 id="三次握手" tabindex="-1">三次握手 <a class="header-anchor" href="#三次握手" aria-label="Permalink to &quot;三次握手&quot;">​</a></h2><blockquote><p>TCP 连接建立</p></blockquote><p><strong>三次握手</strong>是指在建立一个 TCP 连接时客户端和服务器总共要<strong>发送 3 个数据包以确认连接的建立</strong></p><p>三次握手的过程如下图所示：</p><p><img src="'+s+'" alt="TCP 三次握手" width="70%" loading="lazy"></p><p>最开始时客户端和服务器都处于 <code>CLOSED</code> 状态。然后服务器主动监听某个端口（此时处于 <code>LISTEN</code> 状态）</p><h3 id="第一次握手" tabindex="-1">第一次握手 <a class="header-anchor" href="#第一次握手" aria-label="Permalink to &quot;第一次握手&quot;">​</a></h3><blockquote><p><strong>由客户端发起</strong></p></blockquote><p>客户端会随机初始化一个序列号（<code>client_isn</code>）然后发送一个带有 <code>SYN</code> <code>seq = client_isn</code> 信息的数据包。发送完成后客户端进入 <code>SYN_SEND</code> 状态（连接发送状态）</p><ul><li><code>SYN</code> 是一个标志位，为 1 时表示希望建立连接</li><li><code>seq = client_isn</code> 是客户端随机初始化的序列号（一个 32 位的无符号数）</li></ul><h3 id="第二次握手" tabindex="-1">第二次握手 <a class="header-anchor" href="#第二次握手" aria-label="Permalink to &quot;第二次握手&quot;">​</a></h3><blockquote><p><strong>由服务器发起</strong></p></blockquote><p>服务器收到客户端的 <code>SYN</code> 报文后，首先会随机初始化自己的序列号（<code>server_isn</code>）然后发送一个带有 <code>SYN</code> <code>ACK</code> <code>seq = server_isn</code> <code>ack = client_isn + 1</code> 信息的数据包。发送完成后服务器进入 <code>SYN_RCVD</code> 状态（连接收到状态）</p><ul><li><code>ACK</code> 是一个标志位，表示收到了请求</li><li><code>seq = server_isn</code> 是服务器随机初始化的序列号（一个 32 位的无符号数）</li><li><code>ack = client_isn + 1</code> 是一个确认应答号，值为<strong>客户端序列号 + 1</strong></li></ul><h3 id="第三次握手" tabindex="-1">第三次握手 <a class="header-anchor" href="#第三次握手" aria-label="Permalink to &quot;第三次握手&quot;">​</a></h3><blockquote><p><strong>由客户端发起</strong></p></blockquote><p>客户端收到服务器报文后，会再发送一个带有 <code>ACK</code> <code>ack = server_isn + 1</code> 信息的数据包。发送完成后客户端进入 <code>ESTABLISHED</code> 状态（连接成功状态）服务器收到客户端发送的应答报文包后也会进入 <code>ESTABLISHED</code> 状态</p><ul><li><code>ack = server_isn + 1</code> 是一个确认应答号，值为<strong>服务器序列号 + 1</strong></li></ul><div class="tip custom-block"><p class="custom-block-title">三次握手可以保证客户端和服务器能够确认双方的接收和发送能力是否正常</p><ul><li>第一次握手：客户端发送 <code>SYN</code> 报文给服务器，服务器接收该报文 <ul><li>客户端什么都不能确认</li><li>服务器确认：自己接收正常，对方发送正常</li></ul></li><li>第二次握手：服务器发送 <code>SYN + ACK</code> 报文给客户端，客户端接收该报文 <ul><li>客户端确认：自己发送正常、接收正常，对方发送正常、接收正常</li><li>服务器确认：自己接收正常，对方发送正常</li></ul></li><li>第三次握手：客户端发送 <code>ACK</code> 报文给服务器 <ul><li>客户端在第二次握手时已经完成确认</li><li>服务器确认：自己发送正常，接收正常，对方发送正常、接收正常</li></ul></li></ul></div><h3 id="三次握手的作用" tabindex="-1">三次握手的作用？ <a class="header-anchor" href="#三次握手的作用" aria-label="Permalink to &quot;三次握手的作用？&quot;">​</a></h3><ol><li>防止旧的重复连接初始化造成混乱</li><li>同步双方初始序列号（序列号能够保证数据包不重复、不丢弃和按序传输）</li><li>避免资源浪费</li></ol><h3 id="为什么不是两次握手" tabindex="-1">为什么不是两次握手? <a class="header-anchor" href="#为什么不是两次握手" aria-label="Permalink to &quot;为什么不是两次握手?&quot;">​</a></h3><p>两次握手无法防止历史连接的建立，会造成双方资源的浪费，也无法可靠的同步双方序列号</p><h3 id="为什么不是四次握手" tabindex="-1">为什么不是四次握手? <a class="header-anchor" href="#为什么不是四次握手" aria-label="Permalink to &quot;为什么不是四次握手?&quot;">​</a></h3><p>因为通过前三次已经可以建立一个可靠的连接，如果再发送第四次确认消息会浪费资源，所以不需要使用更多的通信次数</p><h3 id="三次握手过程中-可以携带数据吗" tabindex="-1">三次握手过程中，可以携带数据吗？ <a class="header-anchor" href="#三次握手过程中-可以携带数据吗" aria-label="Permalink to &quot;三次握手过程中，可以携带数据吗？&quot;">​</a></h3><p>第一次、第二次握手不可以携带数据，第三次握手可以携带数据，因为在第三次握手时客户端已经处于连接状态，已经知道服务器的接收、发送能力是正常的</p><h2 id="四次挥手" tabindex="-1">四次挥手 <a class="header-anchor" href="#四次挥手" aria-label="Permalink to &quot;四次挥手&quot;">​</a></h2><blockquote><p>TCP 连接断开</p></blockquote><p><strong>四次挥手</strong>是指断开一个 TCP 连接时客户端和服务器总共<strong>发送 4 个包以确认连接的断开</strong><br> <strong>客户端和服务器双方都可以主动断开连接</strong></p><p>四次挥手的过程如下图所示：</p><p><img src="'+h+'" alt="TCP 四次挥手" width="70%" loading="lazy"></p><p>最开始时客户端和服务器都处于 <code>ESTABLISHED</code> 状态</p><h3 id="第一次挥手" tabindex="-1">第一次挥手 <a class="header-anchor" href="#第一次挥手" aria-label="Permalink to &quot;第一次挥手&quot;">​</a></h3><p>客户端先发送一个带有 <code>FIN=1</code> 信息的数据包，然后客户端进入 <code>FIN_WAIT_1</code> 状态</p><h3 id="第二次挥手" tabindex="-1">第二次挥手 <a class="header-anchor" href="#第二次挥手" aria-label="Permalink to &quot;第二次挥手&quot;">​</a></h3><p>服务器收到客户端的 <code>FIN</code> 报文后，就向客户端发送 <code>ACK</code> 应答报文，然后服务器进入 <code>CLOSED_WAIT</code> 状态<br> 当客户端收到服务器的 <code>ACK</code> 应答报文后会进入 <code>FIN_WAIT_2</code> 状态</p><h3 id="第三次挥手" tabindex="-1">第三次挥手 <a class="header-anchor" href="#第三次挥手" aria-label="Permalink to &quot;第三次挥手&quot;">​</a></h3><p>当服务器处理完数据后，会向客户端发送 <code>FIN</code> 报文，之后服务器进入 <code>LAST_ACK</code> 状态</p><h3 id="第四次挥手" tabindex="-1">第四次挥手 <a class="header-anchor" href="#第四次挥手" aria-label="Permalink to &quot;第四次挥手&quot;">​</a></h3><p>服务器收到服务器的 <code>FIN</code> 报文后，会回复一个 <code>ACK</code> 应答报文，之后进入 <code>TIME_WAIT</code> 状态<br> 服务器收到了 <code>ACK</code> 应答报文后，就进入了 <code>CLOSED</code> 状态（<strong>服务器完成连接的关闭</strong>）<br> 客户端在经过 <code>2MSL</code> 一段时间后会自动进入 <code>CLOSED</code> 状态（<strong>客户端完成连接的关闭</strong>）</p><div class="tip custom-block"><p class="custom-block-title">什么是 MSL</p><p><code>MSL</code> 是 Maximum Segment Lifetime（<strong>报文最大生存时间</strong>）是任何报文在网络上存在的最长时间，超过这个时间报文将会被丢弃</p><p><code>2MSL</code> 的时间是从客户端接收到 <code>FIN</code> 后发送 <code>ACK</code> 开始计时的。如果在 <code>TIME-WAIT</code> 时间内，因为客户端的 <code>ACK</code> 没有传输到服务器，客户端又接收到了服务器重发的 <code>FIN</code> 报文，那么 <code>2MSL</code> 时间将重新计时</p></div><h3 id="为什么挥手需要四次" tabindex="-1">为什么挥手需要四次？ <a class="header-anchor" href="#为什么挥手需要四次" aria-label="Permalink to &quot;为什么挥手需要四次？&quot;">​</a></h3><ul><li>在关闭连接时客户端向服务器发送 <code>FIN</code> 时，仅表示客户端不再发送数据了但是还能接收数据；</li><li>当服务器在收到客户端的 <code>FIN</code> 报文时，会先回一个 <code>ACK</code> 应答报文，而服务器可能还有数据需要处理和发送，等服务器不再发送数据时，才发送 <code>FIN</code> 报文给客户端来表示同意现在关闭连接。</li></ul><h3 id="为什么需要-time-wait-状态" tabindex="-1">为什么需要 TIME_WAIT 状态？ <a class="header-anchor" href="#为什么需要-time-wait-状态" aria-label="Permalink to &quot;为什么需要 TIME_WAIT 状态？&quot;">​</a></h3><blockquote><p>主动发起关闭连接的一方才有 <code>TIME-WAIT</code> 状态</p></blockquote><ol><li>防止历史连接中的数据，被后面相同四元组的连接错误的接收；</li><li>保证<strong>被动关闭连接</strong>的一方，能被正确的关闭；</li></ol><h3 id="为什么-time-wait-等待的时间是-2msl" tabindex="-1">为什么 TIME_WAIT 等待的时间是 2MSL？ <a class="header-anchor" href="#为什么-time-wait-等待的时间是-2msl" aria-label="Permalink to &quot;为什么 TIME_WAIT 等待的时间是 2MSL？&quot;">​</a></h3><ol><li>保证服务器能收到最后的 <code>ACK</code> 应答报文</li><li>让此次 TCP 连接中的所有报文在网络中消失，从而避免前后两个使用相同四元组的连接中的前一个连接的报文干扰后一个连接</li></ol><p>假如客户端在送 <code>ACK</code> 后，这个 <code>ACK</code> 在 <code>1MSL</code> 时到达服务器，此时服务器在收到这个 <code>ACK</code> 的前一刹那，一直在重传 <code>FIN</code>，这个 <code>FIN</code> 最坏会在 <code>1MSL</code> 时间内消失。因此从客户端发送 <code>ACK</code> 的那一刹那开始，等待 <code>2MSL</code> 可以保证客户端发送的最后一个 <code>ACK</code> 和服务器发送的最后一个 <code>FIN</code> 都在网络中消失</p><h2 id="tcp-相关学习文章" tabindex="-1">TCP 相关学习文章 <a class="header-anchor" href="#tcp-相关学习文章" aria-label="Permalink to &quot;TCP 相关学习文章&quot;">​</a></h2><p><a href="https://xiaolincoding.com/network/3_tcp/tcp_interview.html" target="_blank" rel="noreferrer">TCP 三次握手与四次挥手面试题 —— 小林 coding</a></p>',56))])}const _=a(p,[["render",u]]);export{C as __pageData,_ as default};
