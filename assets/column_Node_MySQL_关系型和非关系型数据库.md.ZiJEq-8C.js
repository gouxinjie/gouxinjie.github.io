import{_ as i,C as e,c as n,o as r,j as s,G as l,aQ as d,a as o}from"./chunks/framework.DEi4YP2n.js";const y=JSON.parse('{"title":"关系型和非关系型数据库","description":"","frontmatter":{},"headers":[],"relativePath":"column/Node/MySQL/关系型和非关系型数据库.md","filePath":"column/Node/MySQL/关系型和非关系型数据库.md","lastUpdated":1759995509000}'),h={name:"column/Node/MySQL/关系型和非关系型数据库.md"};function p(k,t,g,c,u,b){const a=e("ArticleMetadata");return r(),n("div",null,[t[0]||(t[0]=s("h1",{id:"关系型和非关系型数据库",tabindex:"-1"},[o("关系型和非关系型数据库 "),s("a",{class:"header-anchor",href:"#关系型和非关系型数据库","aria-label":'Permalink to "关系型和非关系型数据库"'},"​")],-1)),l(a),t[1]||(t[1]=d(`<nav class="table-of-contents"><ul><li><a href="#一、关系型数据库-relational-database-rdbms">一、关系型数据库（Relational Database，RDBMS）</a></li><li><a href="#二、非关系型数据库-nosql">二、非关系型数据库（NoSQL）</a></li><li><a href="#三、关系型-vs-非关系型数据库对比">三、关系型 vs 非关系型数据库对比</a></li><li><a href="#四、怎么理解主键和外键">四、怎么理解主键和外键</a><ul><li><a href="#_4-1-主键-primary-key">4.1 主键（Primary Key）</a></li><li><a href="#_4-2-外键-foreign-key">4.2 外键（Foreign Key）</a></li><li><a href="#_4-3-例子">4.3 例子：</a></li></ul></li><li><a href="#五、实体-属性-关系简述">五、实体，属性，关系简述</a><ul><li><a href="#_5-1-实体-entity">5.1 实体（Entity）</a></li><li><a href="#_5-2-属性-attribute">5.2 属性（Attribute）</a></li><li><a href="#_5-3-关系-relationship">5.3 关系（Relationship）</a></li></ul></li></ul></nav><h2 id="一、关系型数据库-relational-database-rdbms" tabindex="-1">一、关系型数据库（Relational Database，RDBMS） <a class="header-anchor" href="#一、关系型数据库-relational-database-rdbms" aria-label="Permalink to &quot;一、关系型数据库（Relational Database，RDBMS）&quot;">​</a></h2><p>关系型数据库是<strong>基于表格结构存储数据</strong>，每条数据称为一条记录（Row），每个字段称为列（Column），表之间通过<strong>主键、外键</strong>建立关系。</p><p><strong>特点</strong></p><table tabindex="0"><thead><tr><th>特点</th><th>说明</th></tr></thead><tbody><tr><td><strong>结构化数据</strong></td><td>数据存储在表中，字段类型固定</td></tr><tr><td><strong>强一致性</strong></td><td>支持 ACID（原子性、Consistency、一致性、Isolation、隔离性、Durability、持久性）</td></tr><tr><td><strong>复杂查询</strong></td><td>支持 SQL 语句，多表关联、聚合函数等</td></tr><tr><td><strong>模式固定</strong></td><td>数据库表的列结构需提前定义（Schema）</td></tr></tbody></table><p><strong>常见数据库</strong></p><ul><li>MySQL</li><li>PostgreSQL</li><li>Oracle</li><li>SQL Server</li></ul><p><strong>使用场景</strong></p><ul><li>金融系统（银行、交易）</li><li>企业 ERP / CRM 系统</li><li>高一致性要求的业务</li></ul><p><strong>简单示例：MySQL 用户表</strong></p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> users</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTO_INCREMENT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    email </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    created_at </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DATETIME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CURRENT_TIMESTAMP</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>关系型数据库适合<strong>结构化、强一致性数据</strong>，方便复杂查询和事务处理。</p></blockquote><h2 id="二、非关系型数据库-nosql" tabindex="-1">二、非关系型数据库（NoSQL） <a class="header-anchor" href="#二、非关系型数据库-nosql" aria-label="Permalink to &quot;二、非关系型数据库（NoSQL）&quot;">​</a></h2><p>非关系型数据库（NoSQL）是一类<strong>非表格结构的数据库</strong>，通常用于存储非结构化或半结构化数据，支持高性能、高扩展性需求。</p><p><strong>特点</strong></p><table tabindex="0"><thead><tr><th>特点</th><th>说明</th></tr></thead><tbody><tr><td><strong>灵活数据模型</strong></td><td>可存储 JSON、键值对、文档、图等形式</td></tr><tr><td><strong>高扩展性</strong></td><td>水平扩展（Sharding）容易</td></tr><tr><td><strong>弱一致性</strong></td><td>通常遵循 BASE 原则（基本可用、柔性状态、最终一致性）</td></tr><tr><td><strong>性能优先</strong></td><td>适合海量数据快速读写</td></tr></tbody></table><p><strong>类型</strong></p><table tabindex="0"><thead><tr><th>类型</th><th>说明</th><th>常见数据库</th></tr></thead><tbody><tr><td><strong>键值（Key-Value）</strong></td><td>以 key 存取 value</td><td>Redis、Memcached</td></tr><tr><td><strong>文档（Document）</strong></td><td>JSON/ BSON 形式存储</td><td>MongoDB、CouchDB</td></tr><tr><td><strong>列族（Column-Family）</strong></td><td>面向列存储</td><td>HBase、Cassandra</td></tr><tr><td><strong>图数据库（Graph）</strong></td><td>节点和边存储</td><td>Neo4j、JanusGraph</td></tr></tbody></table><p><strong>使用场景</strong></p><ul><li>高并发读写缓存（Redis）</li><li>社交关系数据（图数据库）</li><li>日志存储 / 大数据分析（HBase、Cassandra）</li><li>灵活文档存储（MongoDB）</li></ul><p><strong>简单示例：MongoDB 用户文档</strong></p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;64f1a2b5c3d4e5f6&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;alice@example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;created_at&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2025-10-09T10:00:00Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>非关系型数据库适合<strong>高并发、海量数据、灵活结构</strong>的场景，牺牲部分一致性来换取性能和扩展性。</p></blockquote><h2 id="三、关系型-vs-非关系型数据库对比" tabindex="-1">三、关系型 vs 非关系型数据库对比 <a class="header-anchor" href="#三、关系型-vs-非关系型数据库对比" aria-label="Permalink to &quot;三、关系型 vs 非关系型数据库对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>关系型 (RDBMS)</th><th>非关系型 (NoSQL)</th></tr></thead><tbody><tr><td>数据结构</td><td>表格（行列）</td><td>键值、文档、列族、图</td></tr><tr><td>模式</td><td>固定 Schema</td><td>灵活，可变字段</td></tr><tr><td>一致性</td><td>强一致性 ACID</td><td>弱一致性 BASE</td></tr><tr><td>扩展性</td><td>垂直扩展为主</td><td>水平扩展方便</td></tr><tr><td>查询语言</td><td>SQL</td><td>不同类型数据库有不同 API</td></tr><tr><td>性能</td><td>复杂查询强</td><td>高并发、大数据场景快</td></tr><tr><td>典型场景</td><td>金融、ERP</td><td>缓存、日志、大数据、社交关系</td></tr></tbody></table><h2 id="四、怎么理解主键和外键" tabindex="-1">四、怎么理解主键和外键 <a class="header-anchor" href="#四、怎么理解主键和外键" aria-label="Permalink to &quot;四、怎么理解主键和外键&quot;">​</a></h2><h3 id="_4-1-主键-primary-key" tabindex="-1">4.1 主键（Primary Key） <a class="header-anchor" href="#_4-1-主键-primary-key" aria-label="Permalink to &quot;4.1 主键（Primary Key）&quot;">​</a></h3><p><strong>主键</strong>是用来唯一标识表中每一行记录的字段。每个表只能有一个主键，主键值必须是唯一的且不能为 <code>NULL</code>。它确保表中的每一条记录都有唯一标识。</p><p><strong>例子</strong>：在学生表中，<code>Student_ID</code> 可以作为主键，因为每个学生的学号都是唯一的。</p><h3 id="_4-2-外键-foreign-key" tabindex="-1">4.2 外键（Foreign Key） <a class="header-anchor" href="#_4-2-外键-foreign-key" aria-label="Permalink to &quot;4.2 外键（Foreign Key）&quot;">​</a></h3><p><strong>外键</strong>是一个表中的字段，它指向另一个表的主键，用来建立两个表之间的联系。外键确保数据的完整性和一致性，外键列的值必须在目标表的主键列中存在。</p><p><strong>例子</strong>：在成绩表中，<code>Student_ID</code> 可以作为外键，指向学生表中的 <code>Student_ID</code>，表示成绩记录属于哪个学生。</p><h3 id="_4-3-例子" tabindex="-1">4.3 例子： <a class="header-anchor" href="#_4-3-例子" aria-label="Permalink to &quot;4.3 例子：&quot;">​</a></h3><p>假设我们有两个表：</p><ol><li><strong>学生表</strong>（<code>students</code>）：</li></ol><table tabindex="0"><thead><tr><th>学号（Student_ID）</th><th>姓名（Name）</th><th>年龄（Age）</th></tr></thead><tbody><tr><td>1001</td><td>张三</td><td>20</td></tr><tr><td>1002</td><td>李四</td><td>22</td></tr><tr><td>1003</td><td>王五</td><td>21</td></tr></tbody></table><ol start="2"><li><strong>成绩表</strong>（<code>grades</code>）：</li></ol><table tabindex="0"><thead><tr><th>学号（Student_ID）</th><th>课程（Course）</th><th>成绩（Grade）</th></tr></thead><tbody><tr><td>1001</td><td>数学</td><td>90</td></tr><tr><td>1002</td><td>英语</td><td>85</td></tr><tr><td>1001</td><td>物理</td><td>88</td></tr></tbody></table><p>在这个例子中，<code>grades</code> 表中的 <code>Student_ID</code> 是外键，它引用了 <code>students</code> 表中的 <code>Student_ID</code> 主键。这样，我们就能知道每一条成绩记录对应的是哪个学生。外键确保了成绩表中每个学生的学号必须存在于学生表中，从而保证数据的关联性和完整性。</p><h2 id="五、实体-属性-关系简述" tabindex="-1">五、实体，属性，关系简述 <a class="header-anchor" href="#五、实体-属性-关系简述" aria-label="Permalink to &quot;五、实体，属性，关系简述&quot;">​</a></h2><p>在数据库建模中，实体（Entity）属性（Attribute）和关系（Relationship）是三个基本概念，它们用来描述现实世界中的数据和数据之间的关系。</p><h3 id="_5-1-实体-entity" tabindex="-1">5.1 实体（Entity） <a class="header-anchor" href="#_5-1-实体-entity" aria-label="Permalink to &quot;5.1 实体（Entity）&quot;">​</a></h3><p><strong>实体</strong>表示现实世界中的一个对象或事物，它可以是具体的也可以是抽象的，通常指的是我们需要存储数据的对象。</p><ul><li><strong>例子</strong>：学生、课程、员工、订单等。</li><li>实体通常被表示为表格中的一行。</li></ul><h3 id="_5-2-属性-attribute" tabindex="-1">5.2 属性（Attribute） <a class="header-anchor" href="#_5-2-属性-attribute" aria-label="Permalink to &quot;5.2 属性（Attribute）&quot;">​</a></h3><p><strong>属性</strong>是描述实体特征的字段或数据项。每个实体通常有多个属性，用于详细描述该实体的特征。</p><ul><li><strong>例子</strong>：对于一个“学生”实体，属性可以是 <code>Student_ID</code>（学号）、<code>Name</code>（姓名）、<code>Age</code>（年龄）等。</li></ul><h3 id="_5-3-关系-relationship" tabindex="-1">5.3 关系（Relationship） <a class="header-anchor" href="#_5-3-关系-relationship" aria-label="Permalink to &quot;5.3 关系（Relationship）&quot;">​</a></h3><p><strong>关系</strong>表示不同实体之间的联系或互动。在数据库中，关系通常表示表与表之间的关联。</p><ul><li><strong>例子</strong>：学生与课程之间的关系，可以是“选修”关系，表示哪个学生选了哪些课程。</li><li>关系在数据库中通过外键来实现。</li></ul><div class="tip custom-block"><p class="custom-block-title">总结：</p><ul><li><strong>实体</strong>：表示现实世界中的事物（例如：学生、课程）。</li><li><strong>属性</strong>：描述实体的特征（例如：学生的姓名、年龄）。</li><li><strong>关系</strong>：描述不同实体之间的联系（例如：学生选修课程）。</li></ul></div>`,51))])}const m=i(h,[["render",p]]);export{y as __pageData,m as default};
