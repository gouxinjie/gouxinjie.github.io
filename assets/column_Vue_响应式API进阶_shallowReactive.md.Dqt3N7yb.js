import{_ as n,C as l,c as t,o as e,j as i,G as h,aQ as p,a as k}from"./chunks/framework.DEi4YP2n.js";const r="/assets/shallowReactive-1.ouPejJKL.gif",m=JSON.parse('{"title":"shallowReactive：浅层响应式对象","description":"","frontmatter":{},"headers":[],"relativePath":"column/Vue/响应式API进阶/shallowReactive.md","filePath":"column/Vue/响应式API进阶/shallowReactive.md","lastUpdated":1760688554000}'),E={name:"column/Vue/响应式API进阶/shallowReactive.md"};function d(o,s,c,g,u,y){const a=l("ArticleMetadata");return e(),t("div",null,[s[0]||(s[0]=i("h1",{id:"shallowreactive-浅层响应式对象",tabindex:"-1"},[k("shallowReactive：浅层响应式对象 "),i("a",{class:"header-anchor",href:"#shallowreactive-浅层响应式对象","aria-label":'Permalink to "shallowReactive：浅层响应式对象"'},"​")],-1)),h(a),s[1]||(s[1]=p(`<nav class="table-of-contents"><ul><li><a href="#_1-shallowreactive-的作用">1. shallowReactive 的作用</a></li><li><a href="#_2-基本用法">2. 基本用法</a><ul><li><a href="#shallowreactive-与-reactive-的区别">shallowReactive 与 reactive 的区别</a></li></ul></li><li><a href="#_3-使用场景">3. 使用场景</a></li><li><a href="#_4-总结">4. 总结</a></li></ul></nav><p>在 <strong>Vue 3</strong> 中，<code>shallowReactive</code> 是响应式系统提供的一个函数，它与 <code>reactive</code> 类似，但有一个关键区别：它只对对象的 <strong>顶层属性</strong> 进行响应式处理，而不会递归地对嵌套对象或数组进行响应式代理。这与 <code>shallowRef</code> 的思想类似，但作用在 <strong>对象本身</strong> 而不是引用上。</p><h2 id="_1-shallowreactive-的作用" tabindex="-1">1. <code>shallowReactive</code> 的作用 <a class="header-anchor" href="#_1-shallowreactive-的作用" aria-label="Permalink to &quot;1. \`shallowReactive\` 的作用&quot;">​</a></h2><ul><li>创建一个 <strong>浅层响应式对象</strong>。</li><li>顶层属性（第一层属性）会被 Vue 的响应式系统代理。</li><li>嵌套的对象或数组不会被代理为响应式。</li><li>适合那些只需要顶层响应式、或者嵌套对象不需要深度追踪的场景。</li></ul><h2 id="_2-基本用法" tabindex="-1">2. 基本用法 <a class="header-anchor" href="#_2-基本用法" aria-label="Permalink to &quot;2. 基本用法&quot;">​</a></h2><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ state.count }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ state.nested.name }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;updateCount&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;修改顶层属性&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">br</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;updateShallowReactive&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;强行修改嵌套属性&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { shallowReactive } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shallowReactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  nested: { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state.count); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state.nested.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;Vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义一个方法来修改顶层属性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  state.count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改顶层属性，会触发视图更新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;修改顶层属性:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, state.count); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 累加</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义一个方法来强行修改 shallowReactive</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateShallowReactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 修改嵌套对象的属性，不会触发视图更新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  state.nested.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;React&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;强行修改嵌套属性后:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, state.nested.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 React</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><ul><li><code>state.count</code> 是顶层属性，修改它会触发响应式更新。</li><li><code>state.nested</code> 是嵌套对象，其内部属性 <code>name</code> 不会被代理，因此修改它不会触发更新。</li></ul><p><strong>如图所示：</strong></p><p><img src="`+r+'" alt="shallowReactive" loading="lazy"></p><h3 id="shallowreactive-与-reactive-的区别" tabindex="-1"><strong><code>shallowReactive</code> 与 <code>reactive</code> 的区别</strong> <a class="header-anchor" href="#shallowreactive-与-reactive-的区别" aria-label="Permalink to &quot;**`shallowReactive` 与 `reactive` 的区别**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>特性</th><th><code>reactive</code></th><th><code>shallowReactive</code></th></tr></thead><tbody><tr><td>响应式深度</td><td>深度响应式（递归代理嵌套对象）</td><td>浅层响应式（只代理顶层属性）</td></tr><tr><td>性能开销</td><td>较大</td><td>较小</td></tr><tr><td>适用场景</td><td>需要深度追踪对象变化</td><td>只关心顶层属性变化，或优化性能</td></tr></tbody></table><h2 id="_3-使用场景" tabindex="-1">3. 使用场景 <a class="header-anchor" href="#_3-使用场景" aria-label="Permalink to &quot;3. 使用场景&quot;">​</a></h2><ol><li><p><strong>性能优化</strong></p><ul><li>当对象嵌套层级较深或对象很大时，使用 <code>shallowReactive</code> 可以减少 Vue 对嵌套对象递归代理的开销。</li></ul></li><li><p><strong>只关心顶层属性</strong></p><ul><li>如果你只关心对象顶层的变化，而不需要追踪嵌套对象的变化，可以使用 <code>shallowReactive</code>。</li></ul></li></ol><h2 id="_4-总结" tabindex="-1">4. 总结 <a class="header-anchor" href="#_4-总结" aria-label="Permalink to &quot;4. 总结&quot;">​</a></h2><ul><li><strong><code>shallowReactive</code></strong> 创建一个 <strong>浅层响应式对象</strong>，只代理顶层属性。</li><li>它适合 <strong>性能优化</strong>、只关心顶层属性变化或嵌套对象不需要响应式的场景。</li><li>与 <code>reactive</code> 相比，它减少了不必要的代理和性能开销，但使用时要注意嵌套对象的变化不会被追踪。</li></ul>',15))])}const v=n(E,[["render",d]]);export{m as __pageData,v as default};
