import{_ as n,C as e,c as l,o as t,j as a,G as p,aQ as r,a as h}from"./chunks/framework.DEi4YP2n.js";const y=JSON.parse('{"title":"Next.js 路由系统对比：Pages Router vs App Router","description":"","frontmatter":{},"headers":[],"relativePath":"column/Next/基础/新旧路由系统区别.md","filePath":"column/Next/基础/新旧路由系统区别.md","lastUpdated":1760343849000}'),d={name:"column/Next/基础/新旧路由系统区别.md"};function k(o,s,c,g,u,E){const i=e("ArticleMetadata");return t(),l("div",null,[s[0]||(s[0]=a("h1",{id:"next-js-路由系统对比-pages-router-vs-app-router",tabindex:"-1"},[h("Next.js 路由系统对比：Pages Router vs App Router "),a("a",{class:"header-anchor",href:"#next-js-路由系统对比-pages-router-vs-app-router","aria-label":'Permalink to "Next.js 路由系统对比：Pages Router vs App Router"'},"​")],-1)),p(i),s[1]||(s[1]=r(`<nav class="table-of-contents"><ul><li><a href="#一、pages-router">一、Pages Router</a><ul><li><a href="#_1️-基本概念">1️. 基本概念</a></li><li><a href="#_2-典型代码示例">2. 典型代码示例</a></li><li><a href="#_3-优点">3. 优点</a></li><li><a href="#_4-缺点">4. 缺点</a></li></ul></li><li><a href="#二、app-router-新项目推荐使用">二、App Router （新项目推荐使用）</a><ul><li><a href="#_1-基本概念">1. 基本概念</a></li><li><a href="#_2-典型代码示例-1">2. 典型代码示例</a></li><li><a href="#_3-优点-1">3. 优点</a></li><li><a href="#_4-缺点-1">4. 缺点</a></li></ul></li><li><a href="#三、主要区别对比">三、主要区别对比</a></li><li><a href="#四、选型建议">四、选型建议</a></li></ul></nav><p><code>Next.js 是 React </code>的全栈框架，自带路由系统。随着 <strong>Next.js 13 / 15</strong> 的发展，官方推出了 <strong>App Router</strong>，与传统 <strong>Pages Router</strong> 共存。</p><h2 id="一、pages-router" tabindex="-1">一、Pages Router <a class="header-anchor" href="#一、pages-router" aria-label="Permalink to &quot;一、Pages Router&quot;">​</a></h2><h3 id="_1️-基本概念" tabindex="-1">1️. 基本概念 <a class="header-anchor" href="#_1️-基本概念" aria-label="Permalink to &quot;1️. 基本概念&quot;">​</a></h3><ul><li><p><strong>目录</strong>：<code>pages/</code></p></li><li><p><strong>路由映射</strong>：文件名对应 URL 路径</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pages/</span></span>
<span class="line"><span>  index.js      → /</span></span>
<span class="line"><span>  about.js      → /about</span></span>
<span class="line"><span>  blog/[id].js  → /blog/:id</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p><strong>特点</strong>：</p><ul><li>每个文件都是页面</li><li>支持 <code>getStaticProps</code>, <code>getServerSideProps</code>, <code>getStaticPaths</code></li><li><code>_app.js</code> 和 <code>_document.js</code> 管理全局布局和 HTML</li><li>数据获取通过 page-level 函数完成</li></ul></li></ul><h3 id="_2-典型代码示例" tabindex="-1">2. 典型代码示例 <a class="header-anchor" href="#_2-典型代码示例" aria-label="Permalink to &quot;2. 典型代码示例&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// pages/index.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Home</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">posts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Welcome to My Blog&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {posts.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{post.id}&gt;{post.title}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ))}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 数据获取</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getStaticProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> posts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchPosts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { props: { posts } };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="_3-优点" tabindex="-1">3. 优点 <a class="header-anchor" href="#_3-优点" aria-label="Permalink to &quot;3. 优点&quot;">​</a></h3><ul><li>简单直观，适合传统项目</li><li>社区和示例多，学习成本低</li><li>支持 SSR、SSG 和 ISR</li></ul><h3 id="_4-缺点" tabindex="-1">4. 缺点 <a class="header-anchor" href="#_4-缺点" aria-label="Permalink to &quot;4. 缺点&quot;">​</a></h3><ul><li><strong>布局复用复杂</strong>：每页必须通过 <code>_app.js</code> 或 HOC 实现</li><li><strong>嵌套路由不方便</strong>：没有原生 nested routing</li><li><strong>不支持 React Server Components（RSC）</strong>：不能像 App Router 那样在服务器直接渲染组件</li></ul><h2 id="二、app-router-新项目推荐使用" tabindex="-1">二、App Router （新项目推荐使用） <a class="header-anchor" href="#二、app-router-新项目推荐使用" aria-label="Permalink to &quot;二、App Router （新项目推荐使用）&quot;">​</a></h2><h3 id="_1-基本概念" tabindex="-1">1. 基本概念 <a class="header-anchor" href="#_1-基本概念" aria-label="Permalink to &quot;1. 基本概念&quot;">​</a></h3><ul><li><p><strong>目录</strong>：<code>app/</code></p></li><li><p><strong>路由映射</strong>：文件夹对应 URL</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>app/</span></span>
<span class="line"><span>  page.js         → /</span></span>
<span class="line"><span>  about/page.js   → /about</span></span>
<span class="line"><span>  blog/[id]/page.js → /blog/:id</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p><strong>特点</strong>：</p><ul><li>原生支持 <strong>嵌套路由</strong>（nested routing）</li><li>原生支持 <strong>Server Components</strong> 和 <strong>Client Components</strong></li><li>使用 <code>layout.js</code> 实现全局和局部布局</li><li>使用 <code>metadata</code> 配置全局 title、meta、Open Graph</li><li>支持 <code>loading.js</code>、<code>error.js</code>、<code>template.js</code> 等页面状态</li></ul></li></ul><h3 id="_2-典型代码示例-1" tabindex="-1">2. 典型代码示例 <a class="header-anchor" href="#_2-典型代码示例-1" aria-label="Permalink to &quot;2. 典型代码示例&quot;">​</a></h3><h4 id="layout-page-metadata" tabindex="-1">Layout + Page + Metadata <a class="header-anchor" href="#layout-page-metadata" aria-label="Permalink to &quot;Layout + Page + Metadata&quot;">​</a></h4><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app/layout.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> metadata</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;My Blog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  description: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Welcome to my blog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RootLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{children}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app/page.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HomePage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Welcome to My Blog (App Router)&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="嵌套路由示例" tabindex="-1">嵌套路由示例 <a class="header-anchor" href="#嵌套路由示例" aria-label="Permalink to &quot;嵌套路由示例&quot;">​</a></h4><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>app/</span></span>
<span class="line"><span>  blog/</span></span>
<span class="line"><span>    layout.js      // blog 页面布局</span></span>
<span class="line"><span>    [id]/</span></span>
<span class="line"><span>      page.js      // /blog/:id</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_3-优点-1" tabindex="-1">3. 优点 <a class="header-anchor" href="#_3-优点-1" aria-label="Permalink to &quot;3. 优点&quot;">​</a></h3><ul><li><strong>嵌套路由和嵌套布局</strong>原生支持</li><li><strong>Server Components</strong> + <strong>Client Components</strong> 优化性能</li><li>页面级 metadata 管理更简单</li><li>支持局部加载状态 (<code>loading.js</code>) 和错误边界 (<code>error.js</code>)</li><li>更现代化的全局布局和字体管理</li></ul><h3 id="_4-缺点-1" tabindex="-1">4. 缺点 <a class="header-anchor" href="#_4-缺点-1" aria-label="Permalink to &quot;4. 缺点&quot;">​</a></h3><ul><li>学习成本较高，需要理解 RSC</li><li>社区和第三方库支持不如 Pages Router 广泛</li><li>与旧项目迁移可能需要重构目录结构</li></ul><h2 id="三、主要区别对比" tabindex="-1">三、主要区别对比 <a class="header-anchor" href="#三、主要区别对比" aria-label="Permalink to &quot;三、主要区别对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>Pages Router</th><th>App Router</th></tr></thead><tbody><tr><td>路由目录</td><td>pages/</td><td>app/</td></tr><tr><td>文件到 URL 映射</td><td>文件名 → 路径</td><td>文件夹 + page.js → 路径</td></tr><tr><td>布局复用</td><td><code>_app.js</code> 或 HOC</td><td>layout.js + 嵌套布局</td></tr><tr><td>数据获取</td><td>getStaticProps / getServerSideProps</td><td>Server Components + fetch / async</td></tr><tr><td>React Server Components</td><td>❌</td><td>✅</td></tr><tr><td>页面状态管理（loading/error）</td><td>❌</td><td>✅ loading.js / error.js</td></tr><tr><td>Metadata / SEO</td><td>Head 组件手动管理</td><td>metadata 自动生成</td></tr><tr><td>学习曲线</td><td>低</td><td>高</td></tr></tbody></table><h2 id="四、选型建议" tabindex="-1">四、选型建议 <a class="header-anchor" href="#四、选型建议" aria-label="Permalink to &quot;四、选型建议&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">提示</p><p>现在新项目只推荐使用 App Router。</p></div>`,27))])}const m=n(d,[["render",k]]);export{y as __pageData,m as default};
