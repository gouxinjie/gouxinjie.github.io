import{_ as a,C as n,c as t,o as l,j as i,G as p,aQ as r,a as h}from"./chunks/framework.DEi4YP2n.js";const b=JSON.parse('{"title":"TypeScript 中的三斜线指令：/// <reference>","description":"","frontmatter":{},"headers":[],"relativePath":"column/TS/工程化相关/三斜线指令.md","filePath":"column/TS/工程化相关/三斜线指令.md","lastUpdated":1760343849000}'),o={name:"column/TS/工程化相关/三斜线指令.md"};function d(k,s,c,u,g,E){const e=n("ArticleMetadata");return l(),t("div",null,[s[0]||(s[0]=i("h1",{id:"typescript-中的三斜线指令-reference",tabindex:"-1"},[h("TypeScript 中的三斜线指令：/// <reference> "),i("a",{class:"header-anchor",href:"#typescript-中的三斜线指令-reference","aria-label":'Permalink to "TypeScript 中的三斜线指令：/// \\<reference\\>"'},"​")],-1)),p(e),s[1]||(s[1]=r(`<nav class="table-of-contents"><ul><li><a href="#_1-常见的三斜线指令">1. 常见的三斜线指令</a></li><li><a href="#_2-reference-path">2. /// &lt;reference path=&quot;...&quot; /&gt;</a></li><li><a href="#_3-reference-lib">3. /// &lt;reference lib=&quot;...&quot; /&gt;</a></li><li><a href="#_4-reference-types">4. /// &lt;reference types=&quot;...&quot; /&gt;</a></li><li><a href="#_5-amd-module-name">5. /// &lt;amd-module name=&quot;...&quot; /&gt;</a></li></ul></nav><p><strong>三斜线指令</strong>（<code>///</code>）是 <code>TypeScript</code> 提供的用于注释中的特殊指令，它们用于指导 <code>TypeScript</code> 编译器如何解析和处理代码。这些指令通常出现在文件的最顶部，作用是对整个文件进行配置。三斜线指令的主要用途包括引用其他文件、启用特定的编译选项，或对类型进行配置。</p><p>三斜线指令的语法格式如下：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;directive&gt; &lt;value&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>注意，<strong>三斜线指令</strong>只能出现在文件的开头，并且它们不需要被导入，它们是 <code>TypeScript</code> 的注释机制。</p><h3 id="_1-常见的三斜线指令" tabindex="-1">1. <strong>常见的三斜线指令</strong> <a class="header-anchor" href="#_1-常见的三斜线指令" aria-label="Permalink to &quot;1. **常见的三斜线指令**&quot;">​</a></h3><p>TypeScript 中有几种常用的三斜线指令，包括：</p><ol><li><strong><code>/// &lt;reference path=&quot;...&quot; /&gt;</code></strong></li><li><strong><code>/// &lt;reference lib=&quot;...&quot; /&gt;</code></strong></li><li><strong><code>/// &lt;reference types=&quot;...&quot; /&gt;</code></strong></li><li><strong><code>/// &lt;amd-module name=&quot;...&quot; /&gt;</code></strong></li></ol><h3 id="_2-reference-path" tabindex="-1">2. <strong><code>/// &lt;reference path=&quot;...&quot; /&gt;</code></strong> <a class="header-anchor" href="#_2-reference-path" aria-label="Permalink to &quot;2. **\`/// &lt;reference path=&quot;...&quot; /&gt;\`**&quot;">​</a></h3><p><code>&lt;reference path=&quot;...&quot; /&gt;</code> 是最常见的三斜线指令之一，用于<strong>引用其他 TypeScript 文件</strong>。它允许一个 TypeScript 文件通过指定文件路径来引用另一个 TypeScript 文件，从而让 TypeScript 知道其他文件中定义的类型和模块。</p><h4 id="示例" tabindex="-1">示例： <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例：&quot;">​</a></h4><p>假设我们有两个文件：</p><ul><li><code>file1.ts</code>，包含一个 <code>Person</code> 接口。</li><li><code>file2.ts</code>，我们需要在此文件中引用 <code>file1.ts</code> 中的接口。</li></ul><p><code>file1.ts</code>：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>file2.ts</code>：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file1.ts&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(person);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在 <code>file2.ts</code> 文件中，我们通过 <code>/// &lt;reference path=&quot;file1.ts&quot; /&gt;</code> 引用了 <code>file1.ts</code>，从而使 <code>file2.ts</code> 可以访问 <code>file1.ts</code> 中定义的 <code>Person</code> 接口。</p><blockquote><p><strong>注意：</strong> <code>path</code> 是相对路径或绝对路径，可以是相对当前文件的路径。</p></blockquote><h3 id="_3-reference-lib" tabindex="-1">3. <strong><code>/// &lt;reference lib=&quot;...&quot; /&gt;</code></strong> <a class="header-anchor" href="#_3-reference-lib" aria-label="Permalink to &quot;3. **\`/// &lt;reference lib=&quot;...&quot; /&gt;\`**&quot;">​</a></h3><p><code>&lt;reference lib=&quot;...&quot; /&gt;</code> 用于引入 <strong>内置的 JavaScript 库类型</strong>，例如 DOM、ES6、ESNext 等。这使得 TypeScript 知道要包含哪些标准库的类型定义。这对于告诉 TypeScript 编译器你正在使用哪些库的类型非常有用。</p><h4 id="示例-1" tabindex="-1">示例： <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例：&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dom&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> button </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;click&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Button clicked!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这里，<code>/// &lt;reference lib=&quot;dom&quot; /&gt;</code> 告诉 TypeScript 包含 <strong>DOM</strong> 的类型定义，这样就可以在代码中安全地访问 DOM 方法和属性。</p><p>你可以通过 <code>lib</code> 属性引入多种类型库：</p><ul><li><code>&quot;dom&quot;</code>：包含 DOM 类型</li><li><code>&quot;es5&quot;</code>、<code>&quot;es6&quot;</code>、<code>&quot;esnext&quot;</code>：包含 ES5、ES6 或更高版本的 JavaScript 类型</li><li><code>&quot;webworker&quot;</code>、<code>&quot;scripthost&quot;</code> 等：用于特定环境下的库类型</li></ul><h3 id="_4-reference-types" tabindex="-1">4. <strong><code>/// &lt;reference types=&quot;...&quot; /&gt;</code></strong> <a class="header-anchor" href="#_4-reference-types" aria-label="Permalink to &quot;4. **\`/// &lt;reference types=&quot;...&quot; /&gt;\`**&quot;">​</a></h3><p><code>&lt;reference types=&quot;...&quot; /&gt;</code> 用于引入<strong>类型声明文件</strong>，通常是通过 <code>@types</code> 包安装的类型声明。例如，<code>@types/node</code>、<code>@types/react</code> 等。</p><h4 id="示例-2" tabindex="-1">示例： <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例：&quot;">​</a></h4><p>假设你使用了第三方库，并且该库没有内置类型，你可以通过安装其类型定义（通常在 <code>@types</code> 组织中）来为 TypeScript 提供类型支持。</p><p>首先，安装类型定义：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @types/lodash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后，在文件中通过 <code>/// &lt;reference types=&quot;...&quot; /&gt;</code> 引入该类型定义：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> types</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lodash&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { debounce } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;lodash&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> debouncedFunc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> debounce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is debounced!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debouncedFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在这个例子中，<code>/// &lt;reference types=&quot;lodash&quot; /&gt;</code> 让 TypeScript 知道 <code>lodash</code> 的类型信息，使得我们可以安全地使用 <code>lodash</code> 库的 API。</p><h3 id="_5-amd-module-name" tabindex="-1">5. <strong><code>/// &lt;amd-module name=&quot;...&quot; /&gt;</code></strong> <a class="header-anchor" href="#_5-amd-module-name" aria-label="Permalink to &quot;5. **\`/// &lt;amd-module name=&quot;...&quot; /&gt;\`**&quot;">​</a></h3><p><code>&lt;amd-module name=&quot;...&quot; /&gt;</code> 用于在使用 <strong>AMD 模块系统</strong> 时为模块指定名称。这通常用于将 TypeScript 文件转换为 AMD 模块时，给模块指定名称。</p><h4 id="示例-3" tabindex="-1">示例： <a class="header-anchor" href="#示例-3" aria-label="Permalink to &quot;示例：&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">amd-module</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyModule&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello from MyClass&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在这个例子中，<code>/// &lt;amd-module name=&quot;MyModule&quot; /&gt;</code> 给模块指定了名称 <code>MyModule</code>。这在 AMD（Asynchronous Module Definition）模块系统中使用，帮助模块解析器识别该模块。</p>`,40))])}const m=a(o,[["render",d]]);export{b as __pageData,m as default};
