import{_ as n,C as t,c as e,o as l,j as a,G as h,aQ as o,a as r}from"./chunks/framework.DEi4YP2n.js";const p="/assets/OAuth.TJzC6LIS.png",k="/assets/OAuth-1.L5Qj1xEy.jpg",u="/assets/OAuth-2.DEw5aW5K.png",y=JSON.parse('{"title":"OAuth2.0 授权流程讲解","description":"","frontmatter":{},"headers":[],"relativePath":"column/Network/Web传输/OAuth2.0授权流程.md","filePath":"column/Network/Web传输/OAuth2.0授权流程.md","lastUpdated":1760343849000}'),d={name:"column/Network/Web传输/OAuth2.0授权流程.md"};function c(E,s,g,b,q,_){const i=t("ArticleMetadata");return l(),e("div",null,[s[0]||(s[0]=a("h1",{id:"oauth2-0-授权流程讲解",tabindex:"-1"},[r("OAuth2.0 授权流程讲解 "),a("a",{class:"header-anchor",href:"#oauth2-0-授权流程讲解","aria-label":'Permalink to "OAuth2.0 授权流程讲解"'},"​")],-1)),h(i),s[1]||(s[1]=o('<nav class="table-of-contents"><ul><li><a href="#_1、什么是认证-authentication">1、什么是认证（Authentication）</a></li><li><a href="#_2、什么是授权-authorization">2、什么是授权（Authorization）</a></li><li><a href="#_3、oauth2-0-介绍">3、OAuth2.0 介绍</a><ul><li><a href="#_3-1-主要概念">3.1 主要概念</a></li><li><a href="#_3-2-授权流程">3.2 授权流程</a></li><li><a href="#_3-3-常见授权方式">3.3 常见授权方式</a></li></ul></li><li><a href="#_4、oauth-2-0-的主要流程和应用场景">4、OAuth 2.0 的主要流程和应用场景</a><ul><li><a href="#案例-1-、app-授权登录">案例 1 、app 授权登录</a></li><li><a href="#案例-2、微信网页授权">案例 2、微信网页授权</a></li></ul></li><li><a href="#_5、oauth-2-0-的好处">5、OAuth 2.0 的好处</a><ul><li><a href="#_1-安全性增强">1. 安全性增强</a></li><li><a href="#_2-细粒度授权">2. 细粒度授权</a></li><li><a href="#_3-简化用户体验">3. 简化用户体验</a></li><li><a href="#_4-支持第三方应用">4. 支持第三方应用</a></li><li><a href="#_5-减少服务器负担">5. 减少服务器负担</a></li><li><a href="#_6-适用跨平台应用">6. 适用跨平台应用</a></li></ul></li></ul></nav><p>OAuth 2.0 是目前最流行的授权机制，用来授权第三方应用，获取用户数据。</p><p>先了解一下什么是<code>认证</code>（Authentication）和<code>授权</code>（Authorization）。</p><h2 id="_1、什么是认证-authentication" tabindex="-1">1、什么是认证（Authentication） <a class="header-anchor" href="#_1、什么是认证-authentication" aria-label="Permalink to &quot;1、什么是认证（Authentication）&quot;">​</a></h2><p>通俗地讲就是验证当前用户的身份，证明“你是你自己”。</p><blockquote><p>比如：你每天上下班打卡，都需要通过指纹打卡，当你的指纹和系统里录入的指纹相匹配时，就打卡成功</p></blockquote><p><strong>互联网中的认证：</strong></p><p>(1) 用户名密码登录<br> (2) 邮箱发送登录链接<br> (3) 手机号接收验证码<br> (4) 只要你能收到邮箱/验证码，就默认你是账号的主人</p><h2 id="_2、什么是授权-authorization" tabindex="-1">2、什么是授权（Authorization） <a class="header-anchor" href="#_2、什么是授权-authorization" aria-label="Permalink to &quot;2、什么是授权（Authorization）&quot;">​</a></h2><p>用户授予第三方应用访问该用户某些资源的权限:你在安装手机应用的时候，APP 会询问是否允许授予权限（访问相册、地理位置等权限）。<br> 你在访问微信小程序时，当登录时，小程序会询问是否允许授予权限（获取昵称、头像、地区、性别等个人信息）。</p><p>实现授权的方式有：<code>cookie、session、token、OAuth</code></p><h2 id="_3、oauth2-0-介绍" tabindex="-1">3、OAuth2.0 介绍 <a class="header-anchor" href="#_3、oauth2-0-介绍" aria-label="Permalink to &quot;3、OAuth2.0 介绍&quot;">​</a></h2><p><code>OAuth 2.0</code> 是一种<strong>授权框架</strong>，用于使第三方应用能够以安全的方式访问用户在某个服务提供商处的资源，而无需将用户的凭证（如用户名和密码）直接暴露给第三方应用。</p><p><code>OAuth 2.0</code> 通过引入访问令牌（Access Token）的概念来实现这一点，这些令牌代表了用户授予第三方应用的权限。</p><h3 id="_3-1-主要概念" tabindex="-1">3.1 主要概念 <a class="header-anchor" href="#_3-1-主要概念" aria-label="Permalink to &quot;3.1 主要概念&quot;">​</a></h3><ol><li><strong>授权服务器（Authorization Server）</strong>：负责验证用户身份并颁发访问令牌（access token）。</li><li><strong>资源服务器（Resource Server）</strong>：存储用户的资源，保护这些资源的访问，只允许持有有效访问令牌的请求访问。</li><li><strong>客户端（Client）</strong>：第三方应用或服务，获取用户授权后，通过访问令牌访问用户在资源服务器上的资源。</li><li><strong>资源所有者（Resource Owner）</strong>：通常是最终用户，授权客户端访问其资源。</li></ol><h3 id="_3-2-授权流程" tabindex="-1">3.2 授权流程 <a class="header-anchor" href="#_3-2-授权流程" aria-label="Permalink to &quot;3.2 授权流程&quot;">​</a></h3><ol><li><strong>用户授权</strong>：用户通过授权服务器同意允许客户端应用访问自己的资源。</li><li><strong>授权码或令牌交换</strong>：客户端通过授权码或直接通过客户端凭证，向授权服务器请求访问令牌（access token）。</li><li><strong>令牌使用</strong>：客户端使用获取到的访问令牌，向资源服务器请求用户数据。</li></ol><h3 id="_3-3-常见授权方式" tabindex="-1">3.3 常见授权方式 <a class="header-anchor" href="#_3-3-常见授权方式" aria-label="Permalink to &quot;3.3 常见授权方式&quot;">​</a></h3><ol><li><strong>授权码模式（Authorization Code Flow）</strong>：适用于服务器端应用，用户首先通过授权服务器授权，获得授权码，再用授权码交换访问令牌。</li><li><strong>客户端凭证模式（Client Credentials Flow）</strong>：适用于服务器与服务器之间的授权，无需用户参与，客户端直接使用自己的凭证获取令牌。</li><li><strong>密码凭证模式（Resource Owner Password Credentials Flow）</strong>：用户提供用户名和密码，客户端直接用这些凭证获取访问令牌，适用于受信任的客户端。</li><li><strong>隐式授权模式（Implicit Flow）</strong>：适用于浏览器中的客户端应用，直接返回访问令牌，适合公共客户端。</li></ol><h2 id="_4、oauth-2-0-的主要流程和应用场景" tabindex="-1">4、OAuth 2.0 的主要流程和应用场景 <a class="header-anchor" href="#_4、oauth-2-0-的主要流程和应用场景" aria-label="Permalink to &quot;4、OAuth 2.0 的主要流程和应用场景&quot;">​</a></h2><p>流程图如下：</p><p><img src="'+p+'" alt="" width="80%" loading="lazy"></p><h3 id="案例-1-、app-授权登录" tabindex="-1">案例 1 、app 授权登录 <a class="header-anchor" href="#案例-1-、app-授权登录" aria-label="Permalink to &quot;案例 1 、app 授权登录&quot;">​</a></h3><p>我们经常使用 app 或者小程序登录，就会遇见以下场景；</p><p>我手机上下载了一个新的<code>qq音乐</code>,进入 app 时需要登录，下方有 QQ 登录和微信登录的按钮，点击 QQ 登录，就会跳转到 QQ 的授权页面（授权页面上显示 qq 音乐申请使用你的头像和昵称信息），点击<code>[同意授权]</code>后返回 qq 音乐 app，然后登陆成功。</p><div class="info custom-block"><p class="custom-block-title">授权页面：</p><p><img src="'+k+'" alt="" width="50%" loading="lazy"></p></div><p>上面就是一个典型的应用场景，qq 音乐作为客户端，需要使用 QQ 用户的数据（头像、昵称等），qq 作为授权服务器，验证 qq 音乐的请求是否合法，并下发令牌。配合流程图不难理解。</p><h3 id="案例-2、微信网页授权" tabindex="-1">案例 2、微信网页授权 <a class="header-anchor" href="#案例-2、微信网页授权" aria-label="Permalink to &quot;案例 2、微信网页授权&quot;">​</a></h3><p>如果用户在微信客户端中访问第三方网页，公众号可以通过微信网页授权机制，来获取用户基本信息，进而实现业务逻辑。</p><p>微信网页授权是通过 OAuth2.0 机制实现的，在用户授权给公众号后，公众号可以获取到一个网页授权特有的接口调用凭证（网页授权 access_token），通过网页授权 access_token 可以进行授权后接口调用，如获取用户基本信息；</p><p><strong>网页授权流程分为四步</strong></p><p>(1)、引导用户进入授权页面同意授权，获取 code</p><p><img src="'+u+`" alt="" loading="lazy"></p><p>(2)、通过 code 换取网页授权 access_token（与基础支持中的 access_token 不同）</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;access_token&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ACCESS_TOKEN&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;expires_in&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;refresh_token&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;REFRESH_TOKEN&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;openid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;OPENID&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scope&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SCOPE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;is_snapshotuser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;unionid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UNIONID&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>(3)、如果需要，开发者可以刷新网页授权 access_token，避免过期</p><p>由于 access_token 拥有较短的有效期，当 access_token 超时后，可以使用 refresh_token 进行刷新，refresh_token 有效期为 30 天，当 refresh_token 失效之后，需要用户重新授权</p><p>(4)、通过网页授权 access_token 和 openid 获取用户基本信息（支持 UnionID 机制）</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;openid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;OPENID&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;nickname&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">NICKNAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;sex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;province&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PROVINCE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;city&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CITY&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;country&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;COUNTRY&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;headimgurl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://thirdwx.qlogo.cn/mmopen/g3MonUZtNHkdmzicIlibx6iaFqAc56vxLSUfpb6n5WKSYVY0ChQKkiaJSgQ1dZuTOgvLLrhJbERQQ4eMsv84eavHiaiceqxibJxCfHe/46&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;privilege&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:[ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PRIVILEGE1&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;PRIVILEGE2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;unionid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;o6_bmasdasdsad6_2sgVt7hMZOPfL&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html" target="_blank" rel="noreferrer">官方地址</a></p><h2 id="_5、oauth-2-0-的好处" tabindex="-1">5、OAuth 2.0 的好处 <a class="header-anchor" href="#_5、oauth-2-0-的好处" aria-label="Permalink to &quot;5、OAuth 2.0 的好处&quot;">​</a></h2><p><strong>OAuth 2.0</strong> 是一种授权框架，广泛用于授权第三方应用访问用户资源。它相比传统的授权方式（如基本认证）有几个显著的好处：</p><h3 id="_1-安全性增强" tabindex="-1">1. <strong>安全性增强</strong> <a class="header-anchor" href="#_1-安全性增强" aria-label="Permalink to &quot;1. **安全性增强**&quot;">​</a></h3><ul><li><strong>无需暴露密码</strong>：用户无需将密码直接提供给第三方应用，而是通过授权代码或访问令牌授权，从而降低了密码泄露的风险。</li><li><strong>短期令牌</strong>：OAuth 2.0 使用短期的 <strong>访问令牌</strong> 和可控制的 <strong>刷新令牌</strong>，即使令牌泄露，攻击者也无法长期访问资源。</li></ul><h3 id="_2-细粒度授权" tabindex="-1">2. <strong>细粒度授权</strong> <a class="header-anchor" href="#_2-细粒度授权" aria-label="Permalink to &quot;2. **细粒度授权**&quot;">​</a></h3><ul><li><strong>权限控制</strong>：OAuth 2.0 允许用户根据需要精确授权第三方应用访问特定资源和权限，而不是全盘授权。用户可以授权读取邮箱，但不授权发送邮件等功能。</li></ul><h3 id="_3-简化用户体验" tabindex="-1">3. <strong>简化用户体验</strong> <a class="header-anchor" href="#_3-简化用户体验" aria-label="Permalink to &quot;3. **简化用户体验**&quot;">​</a></h3><ul><li><strong>单点登录</strong>：通过 OAuth 2.0，用户可以使用现有的身份验证服务（如 Google、Facebook 登录）登录其他应用，避免了多次注册和登录的麻烦。</li></ul><h3 id="_4-支持第三方应用" tabindex="-1">4. <strong>支持第三方应用</strong> <a class="header-anchor" href="#_4-支持第三方应用" aria-label="Permalink to &quot;4. **支持第三方应用**&quot;">​</a></h3><ul><li><strong>灵活性</strong>：OAuth 2.0 支持多种授权方式（如授权码、客户端凭证、密码凭证等），适应了不同类型的客户端（Web、移动、桌面应用等）需求。</li></ul><h3 id="_5-减少服务器负担" tabindex="-1">5. <strong>减少服务器负担</strong> <a class="header-anchor" href="#_5-减少服务器负担" aria-label="Permalink to &quot;5. **减少服务器负担**&quot;">​</a></h3><ul><li><strong>不存储密码</strong>：OAuth 2.0 实现了授权和认证的分离，减少了服务器端存储和管理用户密码的负担，降低了安全风险。</li></ul><h3 id="_6-适用跨平台应用" tabindex="-1">6. <strong>适用跨平台应用</strong> <a class="header-anchor" href="#_6-适用跨平台应用" aria-label="Permalink to &quot;6. **适用跨平台应用**&quot;">​</a></h3><ul><li><strong>跨平台支持</strong>：OAuth 2.0 可在多种平台（Web、iOS、Android 等）上工作，提供一致的授权机制，提升了跨平台应用的安全性和可扩展性。</li></ul>`,55))])}const m=n(d,[["render",c]]);export{y as __pageData,m as default};
