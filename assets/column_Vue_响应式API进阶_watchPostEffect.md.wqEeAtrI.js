import{_ as t,C as n,c as e,o as l,j as a,G as h,aQ as p,a as k}from"./chunks/framework.DEi4YP2n.js";const E="/assets/watchPostEffect-1.CcIFLQi1.gif",b=JSON.parse('{"title":"watchPostEffect：DOM 更新后的副作用处理","description":"","frontmatter":{},"headers":[],"relativePath":"column/Vue/响应式API进阶/watchPostEffect.md","filePath":"column/Vue/响应式API进阶/watchPostEffect.md","lastUpdated":1760343849000}'),r={name:"column/Vue/响应式API进阶/watchPostEffect.md"};function c(d,s,o,g,f,y){const i=n("ArticleMetadata");return l(),e("div",null,[s[0]||(s[0]=a("h1",{id:"watchposteffect-dom-更新后的副作用处理",tabindex:"-1"},[k("watchPostEffect：DOM 更新后的副作用处理 "),a("a",{class:"header-anchor",href:"#watchposteffect-dom-更新后的副作用处理","aria-label":'Permalink to "watchPostEffect：DOM 更新后的副作用处理"'},"​")],-1)),h(i),s[1]||(s[1]=p(`<nav class="table-of-contents"><ul><li><a href="#_1-watchposteffect-的基本用法">1. watchPostEffect 的基本用法</a></li><li><a href="#_2-watchposteffect-与-watcheffect-的对比">2. watchPostEffect 与 watchEffect 的对比</a></li><li><a href="#_3-使用场景">3. 使用场景</a></li></ul></nav><p><code>watchPostEffect</code> 用于在 <strong>DOM 更新完成后</strong> 执行回调。这是 Vue 响应式系统中一个相对较新的 API，允许你执行那些需要在 Vue 完成更新后进行的任务，例如 DOM 操作、第三方库更新等。它的行为与 <code>watchEffect</code> 类似，但执行时机更加延迟，确保所有 DOM 更新都已完成。</p><h2 id="_1-watchposteffect-的基本用法" tabindex="-1">1. <code>watchPostEffect</code> 的基本用法 <a class="header-anchor" href="#_1-watchposteffect-的基本用法" aria-label="Permalink to &quot;1. \`watchPostEffect\` 的基本用法&quot;">​</a></h2><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ count }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;updateCount&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;修改 count&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">br</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref, watchPostEffect, watchEffect } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 执行比watchPostEffect要早，因为它是在 DOM 更新之前执行的</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watchEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`watchEffect - \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 执行比watchEffect要晚，因为它是在 DOM 更新之后执行的</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watchPostEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`watchPostEffect - DOM 已更新，当前 count 值为: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  count.value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 数据变化，视图更新后，watchPostEffect 执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>在这个例子中：</p><ul><li><code>watchPostEffect</code> 会在 <code>count</code> 改变之后，视图更新完成后执行回调，打印出最新的 <code>count</code> 值。执行时机始终是比 <code>watchEffect</code> 要晚的。</li></ul><p><strong>如图所示：</strong></p><p><img src="`+E+'" alt="watchPostEffect" loading="lazy"></p><h2 id="_2-watchposteffect-与-watcheffect-的对比" tabindex="-1">2. <code>watchPostEffect</code> 与 <code>watchEffect</code> 的对比 <a class="header-anchor" href="#_2-watchposteffect-与-watcheffect-的对比" aria-label="Permalink to &quot;2. `watchPostEffect` 与 `watchEffect` 的对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th><code>watchEffect</code></th><th><code>watchPostEffect</code></th></tr></thead><tbody><tr><td><strong>执行时机</strong></td><td>在响应式数据变化后，<strong>立即执行</strong>回调函数</td><td>在响应式数据变化后，<strong>DOM 更新完成后执行</strong>回调</td></tr><tr><td><strong>适用场景</strong></td><td>当你希望在数据变化后立刻执行副作用</td><td>当你希望在 DOM 更新后执行副作用，如操作 DOM 或调用第三方库</td></tr><tr><td><strong>常见用途</strong></td><td>计算值、触发数据相关的副作用</td><td>DOM 操作、与非 Vue 的库交互、做布局等操作</td></tr></tbody></table><h2 id="_3-使用场景" tabindex="-1">3. 使用场景 <a class="header-anchor" href="#_3-使用场景" aria-label="Permalink to &quot;3. 使用场景&quot;">​</a></h2><p><code>watchPostEffect</code> 主要用于那些需要在 <strong>DOM 更新之后</strong> 执行的副作用操作。这包括但不限于：</p><ul><li><strong>DOM 操作</strong>：例如，调整元素的位置、大小、或者在更新后执行的动画。</li><li><strong>第三方库</strong>：如果你在 Vue 中使用了第三方库（例如图表库、地图插件等），而这些库需要等到 Vue 完成 DOM 更新后再进行渲染或者更新。</li><li><strong>性能优化</strong>：确保某些操作仅在 DOM 更新后才执行，避免不必要的更新操作。</li></ul>',13))])}const F=t(r,[["render",c]]);export{b as __pageData,F as default};
