import{_ as n,C as t,c as e,o as l,j as a,G as p,aQ as h,a as r}from"./chunks/framework.DEi4YP2n.js";const g=JSON.parse('{"title":"解决 Mac 版钉钉微应用流式输出中的 TypeError: Load failed 错误","description":"","frontmatter":{},"headers":[],"relativePath":"column/ProblemNotes/踩坑记录/Mac版钉钉微应用流式输出时前端报TypeError Load failed.md","filePath":"column/ProblemNotes/踩坑记录/Mac版钉钉微应用流式输出时前端报TypeError Load failed.md","lastUpdated":1758527591000}'),k={name:"column/ProblemNotes/踩坑记录/Mac版钉钉微应用流式输出时前端报TypeError Load failed.md"};function d(o,s,E,c,u,y){const i=t("ArticleMetadata");return l(),e("div",null,[s[0]||(s[0]=a("h1",{id:"解决-mac-版钉钉微应用流式输出中的-typeerror-load-failed-错误",tabindex:"-1"},[r("解决 Mac 版钉钉微应用流式输出中的 TypeError: Load failed 错误 "),a("a",{class:"header-anchor",href:"#解决-mac-版钉钉微应用流式输出中的-typeerror-load-failed-错误","aria-label":'Permalink to "解决 Mac 版钉钉微应用流式输出中的 TypeError: Load failed 错误"'},"​")],-1)),p(i),s[1]||(s[1]=h(`<h2 id="一、问题描述" tabindex="-1">一、问题描述 <a class="header-anchor" href="#一、问题描述" aria-label="Permalink to &quot;一、问题描述&quot;">​</a></h2><p>在 Mac 系统的钉钉微应用开发过程中，当等待后端流式数据输出时，前端控制台抛出 <code>TypeError: Load failed</code> 错误。这种错误通常发生在长时间等待后端响应的场景中，特别是在需要持续接收数据流的应用中。</p><h2 id="二、问题分析" tabindex="-1">二、问题分析 <a class="header-anchor" href="#二、问题分析" aria-label="Permalink to &quot;二、问题分析&quot;">​</a></h2><p>经过排查，发现这个问题的主要原因在于：微应用环境特殊性下，在长时间等待后端响应时，浏览器会自动断开连接，导致前端无法接收数据。</p><h2 id="三、解决方案-后端添加心跳检测机制" tabindex="-1">三、解决方案：后端添加心跳检测机制 <a class="header-anchor" href="#三、解决方案-后端添加心跳检测机制" aria-label="Permalink to &quot;三、解决方案：后端添加心跳检测机制&quot;">​</a></h2><p>最有效的解决方案是在流式传输过程中，后端定期发送心跳数据包，保持连接活跃状态。由于心跳包其实是发送的一段字符串，前端是不会处理这种格式的流失数据，只是保持常连接状态，从而避免断开连接。</p><h3 id="_3-1-后端-python-代码示例" tabindex="-1">3.1 后端 python 代码示例 <a class="header-anchor" href="#_3-1-后端-python-代码示例" aria-label="Permalink to &quot;3.1 后端 python 代码示例&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stream_data[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;heartbeat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 处理心跳包 - 发送保持连接的空消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      heartbeat_chunk </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: stream_data[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;chat.completion.heartbeat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;created&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: stream_data[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;timestamp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;message_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: stream_data[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;heartbeat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;connection_alive&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             &quot;timestamp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: stream_data[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;timestamp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        yield</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">json.dumps(heartbeat_chunk)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>前端不用处理心跳包，只需要保持连接状态即可。</p>`,9))])}const m=n(k,[["render",d]]);export{g as __pageData,m as default};
