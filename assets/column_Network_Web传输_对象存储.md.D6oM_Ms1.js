import{_ as s,C as e,c as l,o as d,j as a,G as n,aQ as r,a as h}from"./chunks/framework.DEi4YP2n.js";const y=JSON.parse('{"title":"对象存储（Object Storage）","description":"","frontmatter":{},"headers":[],"relativePath":"column/Network/Web传输/对象存储.md","filePath":"column/Network/Web传输/对象存储.md","lastUpdated":1759999524000}'),p={name:"column/Network/Web传输/对象存储.md"};function o(k,t,c,u,g,b){const i=e("ArticleMetadata");return d(),l("div",null,[t[0]||(t[0]=a("h1",{id:"对象存储-object-storage",tabindex:"-1"},[h("对象存储（Object Storage） "),a("a",{class:"header-anchor",href:"#对象存储-object-storage","aria-label":'Permalink to "对象存储（Object Storage）"'},"​")],-1)),n(i),t[1]||(t[1]=r('<nav class="table-of-contents"><ul><li><a href="#一、什么是对象存储">一、什么是对象存储？</a></li><li><a href="#二、对象存储-vs-传统存储">二、对象存储 vs 传统存储</a></li><li><a href="#三、对象存储的核心特点">三、对象存储的核心特点</a></li><li><a href="#四、对象存储的典型应用场景">四、对象存储的典型应用场景</a></li><li><a href="#五、对象存储的基本操作">五、对象存储的基本操作</a></li><li><a href="#六、对象存储常用概念">六、对象存储常用概念</a></li><li><a href="#七、对象存储与-cdn-的组合">七、对象存储与 CDN 的组合</a></li><li><a href="#八、对象存储优缺点总结">八、对象存储优缺点总结</a></li></ul></nav><blockquote><p>对象存储已经成为云计算、互联网和企业数据存储的标配，<br> 从阿里云 OSS、AWS S3，到腾讯云 COS、七牛云存储，都是基于对象存储设计。</p></blockquote><h2 id="一、什么是对象存储" tabindex="-1">一、什么是对象存储？ <a class="header-anchor" href="#一、什么是对象存储" aria-label="Permalink to &quot;一、什么是对象存储？&quot;">​</a></h2><p>对象存储是一种<strong>以对象为单位进行存储和管理</strong>的数据存储方式。它与传统文件存储和块存储不同，核心概念是：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>对象 = 数据 + 元数据 + 唯一标识（Key）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><strong>数据（Data）</strong>：实际存储的内容，比如图片、视频、文档等</li><li><strong>元数据（Metadata）</strong>：描述对象的附加信息，比如大小、类型、创建时间</li><li><strong>唯一标识（Key）</strong>：对象的唯一访问路径或名称</li></ul><p>对象存储不再依赖传统的目录结构，而是通过<strong>全局唯一的 Key</strong>来访问每一个对象。</p><h2 id="二、对象存储-vs-传统存储" tabindex="-1">二、对象存储 vs 传统存储 <a class="header-anchor" href="#二、对象存储-vs-传统存储" aria-label="Permalink to &quot;二、对象存储 vs 传统存储&quot;">​</a></h2><table tabindex="0"><thead><tr><th>存储类型</th><th>数据单元</th><th>访问方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>块存储（Block Storage）</td><td>块</td><td>类似硬盘，读写块</td><td>高性能，低延迟</td><td>不方便跨地域共享，需挂载文件系统</td></tr><tr><td>文件存储（File Storage）</td><td>文件</td><td>目录结构、路径访问</td><td>兼容性好，易迁移</td><td>扩展性差，性能随文件系统增长下降</td></tr><tr><td>对象存储（Object Storage）</td><td>对象</td><td>HTTP API（RESTful）</td><td>高扩展性、海量存储、易管理</td><td>低延迟写入少，随机写不灵活</td></tr></tbody></table><blockquote><p>总结：对象存储适合<strong>海量非结构化数据</strong>，而非传统高性能数据库或块存储场景。</p></blockquote><h2 id="三、对象存储的核心特点" tabindex="-1">三、对象存储的核心特点 <a class="header-anchor" href="#三、对象存储的核心特点" aria-label="Permalink to &quot;三、对象存储的核心特点&quot;">​</a></h2><p>1️⃣ <strong>海量扩展</strong></p><ul><li>理论上可以存储 PB 级数据</li><li>通过分布式架构实现高扩展性</li></ul><p>2️⃣ <strong>数据通过 Key 唯一访问</strong></p><ul><li>无需目录层级</li><li>RESTful API 支持 CRUD 操作</li></ul><p>3️⃣ <strong>高可靠性与持久性</strong></p><ul><li>数据冗余存储在多个节点或机房</li><li>保障数据不丢失</li></ul><p>4️⃣ <strong>支持元数据管理</strong></p><ul><li>可以给对象添加自定义属性</li><li>方便数据检索和分类</li></ul><p>5️⃣ <strong>低成本</strong></p><ul><li>按需存储、按量计费</li><li>适合备份、归档和 CDN 加速场景</li></ul><h2 id="四、对象存储的典型应用场景" tabindex="-1">四、对象存储的典型应用场景 <a class="header-anchor" href="#四、对象存储的典型应用场景" aria-label="Permalink to &quot;四、对象存储的典型应用场景&quot;">​</a></h2><table tabindex="0"><thead><tr><th>场景</th><th>描述</th></tr></thead><tbody><tr><td>图片、视频存储</td><td>CDN + OSS/S3 提供全球访问</td></tr><tr><td>日志存储</td><td>备份、分析大数据</td></tr><tr><td>静态网站托管</td><td>将网站文件存入对象存储 + CDN</td></tr><tr><td>数据归档</td><td>长期保存备份数据，低成本</td></tr><tr><td>机器学习/AI</td><td>存储训练数据集、模型文件</td></tr></tbody></table><h2 id="五、对象存储的基本操作" tabindex="-1">五、对象存储的基本操作 <a class="header-anchor" href="#五、对象存储的基本操作" aria-label="Permalink to &quot;五、对象存储的基本操作&quot;">​</a></h2><p>以 AWS S3 或阿里云 OSS 为例，操作主要通过 <strong>HTTP API 或 SDK</strong>：</p><p>1️⃣ <strong>上传对象（PUT / UploadFile）</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PUT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bucket </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>上传文件并指定元数据</li><li>支持大文件分片上传</li></ul><p>2️⃣ <strong>下载对象（GET / DownloadFile）</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bucket </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>通过 Key 获取对象数据</li><li>可设置 URL 过期时间（临时访问）</li></ul><p>3️⃣ <strong>删除对象（DELETE）</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DELETE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bucket </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>支持批量删除</li></ul><p>4️⃣ <strong>获取对象元数据（HEAD）</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HEAD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bucket </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>获取文件大小、类型、创建时间等信息</li></ul><p>5️⃣ <strong>权限管理</strong></p><ul><li>可以设置公有读、私有读写</li><li>支持基于 IAM 的细粒度权限</li></ul><h2 id="六、对象存储常用概念" tabindex="-1">六、对象存储常用概念 <a class="header-anchor" href="#六、对象存储常用概念" aria-label="Permalink to &quot;六、对象存储常用概念&quot;">​</a></h2><table tabindex="0"><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>Bucket（桶）</td><td>存放对象的逻辑容器</td></tr><tr><td>Object（对象）</td><td>数据 + 元数据 + Key</td></tr><tr><td>Key</td><td>对象唯一标识</td></tr><tr><td>Metadata（元数据）</td><td>文件类型、大小、自定义属性</td></tr><tr><td>CDN</td><td>加速对象全球访问</td></tr><tr><td>ACL</td><td>权限控制（公有/私有）</td></tr><tr><td>Multipart Upload</td><td>大文件分片上传，支持断点续传</td></tr></tbody></table><h2 id="七、对象存储与-cdn-的组合" tabindex="-1">七、对象存储与 CDN 的组合 <a class="header-anchor" href="#七、对象存储与-cdn-的组合" aria-label="Permalink to &quot;七、对象存储与 CDN 的组合&quot;">​</a></h2><ul><li><p>对象存储常配合 CDN 使用：</p><ol><li>文件上传到对象存储</li><li>CDN 分发节点缓存对象</li><li>用户访问直接从就近 CDN 节点获取</li></ol></li><li><p>优势：</p><ul><li>减少源站压力</li><li>全球访问低延迟</li><li>静态资源加速</li></ul></li></ul><h2 id="八、对象存储优缺点总结" tabindex="-1">八、对象存储优缺点总结 <a class="header-anchor" href="#八、对象存储优缺点总结" aria-label="Permalink to &quot;八、对象存储优缺点总结&quot;">​</a></h2><table tabindex="0"><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>高扩展性、几乎无限存储</td><td>随机写性能低，不适合高频写入数据库场景</td></tr><tr><td>易于管理，支持元数据</td><td>数据访问延迟略高于本地存储</td></tr><tr><td>支持海量非结构化数据</td><td>不适合作为主数据库</td></tr><tr><td>与 CDN 完美结合</td><td>大量小文件可能增加管理开销</td></tr><tr><td>低成本</td><td>需要理解 Bucket/Key/ACL 概念</td></tr></tbody></table>',45))])}const m=s(p,[["render",o]]);export{y as __pageData,m as default};
