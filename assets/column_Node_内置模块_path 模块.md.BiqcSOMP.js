import{_ as n,C as t,c as e,o as p,j as a,G as l,aQ as h,a as r}from"./chunks/framework.DEi4YP2n.js";const y=JSON.parse('{"title":"Node.js 中的 path 模块:处理文件和目录路径","description":"","frontmatter":{},"headers":[],"relativePath":"column/Node/内置模块/path 模块.md","filePath":"column/Node/内置模块/path 模块.md","lastUpdated":1759136986000}'),d={name:"column/Node/内置模块/path 模块.md"};function o(k,s,c,g,E,b){const i=t("ArticleMetadata");return p(),e("div",null,[s[0]||(s[0]=a("h1",{id:"node-js-中的-path-模块-处理文件和目录路径",tabindex:"-1"},[a("strong",null,"Node.js 中的 path 模块:处理文件和目录路径"),r(),a("a",{class:"header-anchor",href:"#node-js-中的-path-模块-处理文件和目录路径","aria-label":'Permalink to "**Node.js 中的 path 模块:处理文件和目录路径**"'},"​")],-1)),l(i),s[1]||(s[1]=h(`<p><code>path</code> 是 Node.js 内置的核心模块，用于<strong>处理文件和目录路径</strong>。它提供了一系列工具方法来规范化、拼接、解析路径，确保跨平台兼容性（Windows、macOS、Linux）。</p><h2 id="_1-为什么需要-path-模块" tabindex="-1"><strong>1. 为什么需要 path 模块？</strong> <a class="header-anchor" href="#_1-为什么需要-path-模块" aria-label="Permalink to &quot;**1. 为什么需要 path 模块？**&quot;">​</a></h2><ul><li><strong>跨平台兼容性</strong>：Windows 使用 <code>\\</code>，Unix（macOS/Linux）使用 <code>/</code>，<code>path</code> 模块自动适配当前系统。</li><li><strong>路径拼接</strong>：避免手动拼接路径时遗漏分隔符（如 <code>dir + &#39;/&#39; + file</code> 容易出错）。</li><li><strong>规范化路径</strong>：处理 <code>./</code>、<code>../</code> 等相对路径，解析出绝对路径。</li></ul><h2 id="_2-基本用法" tabindex="-1"><strong>2. 基本用法</strong> <a class="header-anchor" href="#_2-基本用法" aria-label="Permalink to &quot;**2. 基本用法**&quot;">​</a></h2><h3 id="导入模块" tabindex="-1"><strong>导入模块</strong> <a class="header-anchor" href="#导入模块" aria-label="Permalink to &quot;**导入模块**&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CommonJS</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或 ES Modules</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_3-核心方法解析" tabindex="-1"><strong>3. 核心方法解析</strong> <a class="header-anchor" href="#_3-核心方法解析" aria-label="Permalink to &quot;**3. 核心方法解析**&quot;">​</a></h2><h3 id="_1-路径拼接-path-join-paths" tabindex="-1"><strong>（1）路径拼接：<code>path.join([...paths])</code></strong> <a class="header-anchor" href="#_1-路径拼接-path-join-paths" aria-label="Permalink to &quot;**（1）路径拼接：\`path.join([...paths])\`**&quot;">​</a></h3><p>将多个路径片段拼接成一个<strong>规范化</strong>的路径：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;baz/file.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// *nix: &#39;/foo/bar/baz/file.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Windows: &#39;\\foo\\bar\\baz\\file.js&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>特点</strong>：</p><ul><li>自动处理不同操作系统的分隔符。</li><li>解析 <code>.</code>（当前目录）和 <code>..</code>（上级目录）。</li></ul><p><strong>示例</strong>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fullPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出（假设 __dirname 是 /project）:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// *nix: /project/src/app.js</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Windows: \\project\\src\\app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2-路径解析-path-resolve-paths" tabindex="-1"><strong>（2）路径解析：<code>path.resolve([...paths])</code></strong> <a class="header-anchor" href="#_2-路径解析-path-resolve-paths" aria-label="Permalink to &quot;**（2）路径解析：\`path.resolve([...paths])\`**&quot;">​</a></h3><p>将路径解析为<strong>绝对路径</strong>（从右向左计算，直到生成绝对路径）：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 假设当前工作目录是 /project，输出:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// /project/src/app.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;baz.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出（以最后一个绝对路径 /bar 为基准）:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// /bar/baz.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>vs <code>path.join()</code></strong>：</p><ul><li><code>join</code> 只是拼接，<code>resolve</code> 会返回绝对路径。</li><li><code>resolve</code> 更适用于需要确定最终路径的场景（如配置文件路径）。</li></ul><h3 id="_3-规范化路径-path-normalize-path" tabindex="-1"><strong>（3）规范化路径：<code>path.normalize(path)</code></strong> <a class="header-anchor" href="#_3-规范化路径-path-normalize-path" aria-label="Permalink to &quot;**（3）规范化路径：\`path.normalize(path)\`**&quot;">​</a></h3><p>处理路径中的冗余部分（如 <code>//</code>、<code>../</code>）：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">normalize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/foo/bar//baz/../qux.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: /foo/bar/qux.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_4-获取路径信息" tabindex="-1"><strong>（4）获取路径信息</strong> <a class="header-anchor" href="#_4-获取路径信息" aria-label="Permalink to &quot;**（4）获取路径信息**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>方法</th><th>作用</th><th>示例（路径：<code>/project/src/app.js</code>）</th></tr></thead><tbody><tr><td><code>path.basename(path)</code></td><td>获取文件名（含扩展名）</td><td><code>app.js</code></td></tr><tr><td><code>path.basename(path, ext)</code></td><td>去掉扩展名</td><td><code>app</code>（传 <code>.js</code> 时）</td></tr><tr><td><code>path.dirname(path)</code></td><td>获取目录名</td><td><code>/project/src</code></td></tr><tr><td><code>path.extname(path)</code></td><td>获取扩展名（含 <code>.</code>）</td><td><code>.js</code></td></tr></tbody></table><p><strong>示例</strong>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> filePath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/project/src/app.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filePath)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;app.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filePath)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;/project/src&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filePath)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;.js&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_5-路径分隔符" tabindex="-1"><strong>（5）路径分隔符</strong> <a class="header-anchor" href="#_5-路径分隔符" aria-label="Permalink to &quot;**（5）路径分隔符**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>path.sep</code></td><td>系统路径分隔符（<code>\\</code> 或 <code>/</code>）</td></tr><tr><td><code>path.delimiter</code></td><td>系统环境变量分隔符（<code>;</code> 或 <code>:</code>）</td></tr></tbody></table><p><strong>示例</strong>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.sep); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// *nix: &#39;/&#39;, Windows: &#39;\\&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PATH环境变量分隔符:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, path.delimiter); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// *nix: &#39;:&#39;, Windows: &#39;;&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_6-跨平台路径转换" tabindex="-1"><strong>（6）跨平台路径转换</strong> <a class="header-anchor" href="#_6-跨平台路径转换" aria-label="Permalink to &quot;**（6）跨平台路径转换**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>path.toNamespacedPath(path)</code></td><td>转 Windows 长路径格式（如 <code>\\\\?\\C:\\foo</code>）</td></tr><tr><td><code>path.parse(path)</code></td><td>解析路径为对象</td></tr><tr><td><code>path.format(pathObject)</code></td><td>从对象生成路径</td></tr></tbody></table><p><strong><code>path.parse()</code> 示例</strong>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parsed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/project/src/app.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parsed);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 输出:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  root: &#39;/&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  dir: &#39;/project/src&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  base: &#39;app.js&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ext: &#39;.js&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  name: &#39;app&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong><code>path.format()</code> 示例</strong>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dir: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/project/src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ext: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: &#39;/project/src/app.js&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_4-实际应用场景" tabindex="-1"><strong>4. 实际应用场景</strong> <a class="header-anchor" href="#_4-实际应用场景" aria-label="Permalink to &quot;**4. 实际应用场景**&quot;">​</a></h2><h3 id="场景-1-安全拼接用户输入的路径" tabindex="-1"><strong>场景 1：安全拼接用户输入的路径</strong> <a class="header-anchor" href="#场景-1-安全拼接用户输入的路径" aria-label="Permalink to &quot;**场景 1：安全拼接用户输入的路径**&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> userInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;../malicious.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> safePath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, userInput);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出规范化的绝对路径，避免目录穿越攻击</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="场景-2-动态加载文件" tabindex="-1"><strong>场景 2：动态加载文件</strong> <a class="header-anchor" href="#场景-2-动态加载文件" aria-label="Permalink to &quot;**场景 2：动态加载文件**&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> configPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;config.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(configPath);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="场景-3-处理不同操作系统的路径" tabindex="-1"><strong>场景 3：处理不同操作系统的路径</strong> <a class="header-anchor" href="#场景-3-处理不同操作系统的路径" aria-label="Permalink to &quot;**场景 3：处理不同操作系统的路径**&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> filePath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;assets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;images&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;logo.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Windows: assets\\images\\logo.png</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// *nix: assets/images/logo.png</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_5-注意事项" tabindex="-1"><strong>5. 注意事项</strong> <a class="header-anchor" href="#_5-注意事项" aria-label="Permalink to &quot;**5. 注意事项**&quot;">​</a></h2><ol><li><strong>不要手动拼接路径</strong>：<br> 错误示例：<code>const badPath = dir + &#39;/&#39; + file;</code>（跨平台兼容性问题）。</li><li><strong><code>__dirname</code> vs <code>process.cwd()</code></strong>： <ul><li><code>__dirname</code>：当前模块的目录路径。</li><li><code>process.cwd()</code>：Node.js 进程的工作目录（可能变化）。</li></ul></li><li><strong>Windows 路径的特殊性</strong>： <ul><li>反斜杠 <code>\\</code> 在字符串中需转义（如 <code>C:\\\\foo</code>）。</li><li><code>path</code> 模块会自动处理。</li></ul></li></ol><h2 id="_6-总结" tabindex="-1"><strong>6. 总结</strong> <a class="header-anchor" href="#_6-总结" aria-label="Permalink to &quot;**6. 总结**&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>方法</strong></th><th><strong>用途</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><code>path.join()</code></td><td>安全拼接路径</td><td><code>path.join(&#39;a&#39;, &#39;b.js&#39;)</code></td></tr><tr><td><code>path.resolve()</code></td><td>解析绝对路径</td><td><code>path.resolve(&#39;src&#39;, &#39;app.js&#39;)</code></td></tr><tr><td><code>path.normalize()</code></td><td>规范化冗余路径</td><td><code>path.normalize(&#39;/foo//bar/../baz&#39;)</code></td></tr><tr><td><code>path.basename()</code></td><td>获取文件名</td><td><code>path.basename(&#39;/a/b.js&#39;)</code> → <code>b.js</code></td></tr><tr><td><code>path.parse()</code></td><td>解析路径对象</td><td><code>path.parse(&#39;/a/b.js&#39;)</code></td></tr></tbody></table>`,47))])}const m=n(d,[["render",o]]);export{y as __pageData,m as default};
