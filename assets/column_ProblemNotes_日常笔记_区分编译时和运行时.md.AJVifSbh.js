import{_ as t,C as n,c as e,o as l,j as i,G as r,aQ as p,a as h}from"./chunks/framework.DEi4YP2n.js";const y=JSON.parse('{"title":"区分编译时和运行时","description":"","frontmatter":{},"headers":[],"relativePath":"column/ProblemNotes/日常笔记/区分编译时和运行时.md","filePath":"column/ProblemNotes/日常笔记/区分编译时和运行时.md","lastUpdated":1760403902000}'),o={name:"column/ProblemNotes/日常笔记/区分编译时和运行时.md"};function d(k,s,g,c,E,u){const a=n("ArticleMetadata");return l(),e("div",null,[s[0]||(s[0]=i("h1",{id:"区分编译时和运行时",tabindex:"-1"},[h("区分编译时和运行时 "),i("a",{class:"header-anchor",href:"#区分编译时和运行时","aria-label":'Permalink to "区分编译时和运行时"'},"​")],-1)),r(a),s[1]||(s[1]=p(`<nav class="table-of-contents"><ul><li><a href="#_1-编译时-compile-time">1. 编译时（Compile-time）</a></li><li><a href="#_2-运行时-run-time">2. 运行时（Run-time）</a></li><li><a href="#_3-编译时与运行时在前端的区别">3. 编译时与运行时在前端的区别</a></li><li><a href="#_4-前端编译时和运行时的实际案例">4. 前端编译时和运行时的实际案例</a></li><li><a href="#_5-编译时和运行时在前端框架中的应用">5. 编译时和运行时在前端框架中的应用</a></li><li><a href="#总结">总结</a></li></ul></nav><h3 id="_1-编译时-compile-time" tabindex="-1">1. <strong>编译时（Compile-time）</strong> <a class="header-anchor" href="#_1-编译时-compile-time" aria-label="Permalink to &quot;1. **编译时（Compile-time）**&quot;">​</a></h3><p>在前端开发中，<strong>编译时</strong>通常指的是源代码<code>（如 JavaScript、TypeScript、SCSS、HTML 等）</code>在打包和构建过程中的处理阶段，这个阶段的工作通常由构建工具<code>（如 Webpack、Vite）</code>或者前端框架<code>（如 React、Vue）</code>来完成。</p><h4 id="编译时包含的内容" tabindex="-1">编译时包含的内容： <a class="header-anchor" href="#编译时包含的内容" aria-label="Permalink to &quot;编译时包含的内容：&quot;">​</a></h4><ul><li><strong>源代码转化</strong>：将源代码从一种格式转化为浏览器可以理解的格式。例如，<code>将 TypeScript 转为 JavaScript、将 SCSS 转为 CSS</code>，或者将 JSX 转为 JavaScript。</li><li><strong>代码压缩和优化</strong>：对代码进行压缩、树摇（Tree Shaking）等优化，移除无用的代码，减少文件体积。</li><li><strong>模块化</strong>：通过模块打包工具（如 Webpack、Vite）将多个源文件合并成一个或多个模块，优化依赖管理和加载效率。</li><li><strong>静态分析</strong>：例如，在 TypeScript 编译阶段，类型检查会发生在编译时；也可以进行一些代码风格检查和 linting。</li><li><strong>构建生成</strong>：构建过程中还会生成缓存文件、版本控制文件、生产环境代码（如打包后的 JavaScript、CSS 文件）等。</li></ul><p><strong>例子</strong>：</p><ul><li><strong>TypeScript 转换</strong>：将 TypeScript 编写的代码转为 JavaScript。</li><li><strong>JSX 转换</strong>：React 中的 JSX 语法会在编译时被转化为普通的 JavaScript 代码。</li><li><strong>SCSS 转换为 CSS</strong>：通过构建工具将 SCSS 编写的样式转换成标准的 CSS 文件。</li></ul><p><strong>工具和技术</strong>：</p><ul><li><strong>Webpack</strong>：用于打包和构建前端项目。</li><li><strong>Babel</strong>：用于将现代 JavaScript 转换为兼容的 JavaScript 版本。</li><li><strong>Vite</strong>：现代的前端构建工具，主要依靠 ES 模块进行开发时的即时构建和编译。</li><li><strong>TypeScript</strong>：在编译时检查类型，并将 TypeScript 代码编译为 JavaScript。</li></ul><h3 id="_2-运行时-run-time" tabindex="-1">2. <strong>运行时（Run-time）</strong> <a class="header-anchor" href="#_2-运行时-run-time" aria-label="Permalink to &quot;2. **运行时（Run-time）**&quot;">​</a></h3><p><strong>运行时</strong>指的是程序在浏览器中执行的阶段。在此阶段，代码已经通过编译和打包过程，最终变成浏览器可以执行的 JavaScript。运行时关注的是程序执行时的动态行为，如数据处理、事件触发、用户输入、网络请求等。</p><h4 id="运行时包含的内容" tabindex="-1">运行时包含的内容： <a class="header-anchor" href="#运行时包含的内容" aria-label="Permalink to &quot;运行时包含的内容：&quot;">​</a></h4><ul><li><strong>代码执行</strong>：浏览器开始执行 JavaScript 代码，这时程序开始根据输入、外部 API 等进行计算和处理。</li><li><strong>DOM 操作</strong>：在运行时，JavaScript 通过 DOM 操作来修改页面元素和样式。</li><li><strong>事件处理</strong>：前端代码中涉及的用户交互（如点击、输入、滚动）等事件处理也是在运行时发生的。</li><li><strong>网络请求</strong>：前端通过运行时发起网络请求（如 <code>fetch</code> 或 <code>axios</code>）与后端进行数据交换。</li><li><strong>错误和调试</strong>：运行时错误（例如 <code>undefined</code> 引用、数组越界、网络请求失败等）通常是在执行过程中发生，并通过浏览器的控制台进行捕获和调试。</li></ul><p><strong>例子</strong>：</p><ul><li>当用户在页面中点击按钮时，绑定的事件处理函数会在 <strong>运行时</strong> 执行。</li><li>通过 <code>fetch</code> 请求数据时，返回的数据会在 <strong>运行时</strong> 处理并更新到 DOM 上。</li><li>动态计算和显示数据：例如，基于用户输入动态更新页面内容。</li></ul><p><strong>工具和技术</strong>：</p><ul><li><strong>浏览器的 JavaScript 引擎</strong>（如 Chrome 的 V8 引擎）：负责在浏览器中执行代码。</li><li><strong>浏览器 API</strong>：如 DOM API、Fetch API 等，在运行时提供与页面、用户、网络等交互的能力。</li></ul><h3 id="_3-编译时与运行时在前端的区别" tabindex="-1">3. <strong>编译时与运行时在前端的区别</strong> <a class="header-anchor" href="#_3-编译时与运行时在前端的区别" aria-label="Permalink to &quot;3. **编译时与运行时在前端的区别**&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>特性</strong></th><th><strong>编译时（Compile-time）</strong></th><th><strong>运行时（Run-time）</strong></th></tr></thead><tbody><tr><td><strong>定义</strong></td><td>程序在被执行之前的准备过程，如代码的转换、打包和优化。</td><td>程序实际运行并与用户、服务器交互的过程。</td></tr><tr><td><strong>发生时机</strong></td><td>在开发过程中，代码被构建和打包时。</td><td>在浏览器中，代码被解释并执行时。</td></tr><tr><td><strong>关注的内容</strong></td><td>代码转译、静态检查、性能优化、打包等。</td><td>事件处理、网络请求、数据处理、UI 更新等。</td></tr><tr><td><strong>错误检查</strong></td><td>编译时的语法错误、类型错误、代码风格问题。</td><td>运行时的错误，如 <code>null</code> 引用、数组越界等。</td></tr><tr><td><strong>常见操作</strong></td><td>代码压缩、树摇、模块化、类型检查等。</td><td>用户交互、DOM 操作、异步请求等。</td></tr><tr><td><strong>例子</strong></td><td>将 TypeScript 转换为 JavaScript，JSX 转为普通 JS。</td><td>处理用户点击、滚动事件，发起 API 请求，更新 DOM 内容。</td></tr><tr><td><strong>工具和框架</strong></td><td>Webpack、Babel、TypeScript、Vite 等。</td><td>JavaScript 引擎、浏览器 API（如 DOM、Fetch）。</td></tr></tbody></table><h3 id="_4-前端编译时和运行时的实际案例" tabindex="-1">4. <strong>前端编译时和运行时的实际案例</strong> <a class="header-anchor" href="#_4-前端编译时和运行时的实际案例" aria-label="Permalink to &quot;4. **前端编译时和运行时的实际案例**&quot;">​</a></h3><h4 id="编译时" tabindex="-1"><strong>编译时</strong>： <a class="header-anchor" href="#编译时" aria-label="Permalink to &quot;**编译时**：&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TypeScript 编译为 JavaScript</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译时，如果类型不匹配会报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译时错误：不能将类型 &#39;42&#39; 赋值给类型 &#39;string&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="运行时" tabindex="-1"><strong>运行时</strong>： <a class="header-anchor" href="#运行时" aria-label="Permalink to &quot;**运行时**：&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 运行时错误：使用 undefined 调用方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 运行时错误：无法读取 &#39;name&#39; 属性，因为 obj 为 undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 动态更新页面内容</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;click&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).textContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data.message; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 运行时更新 DOM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_5-编译时和运行时在前端框架中的应用" tabindex="-1">5. <strong>编译时和运行时在前端框架中的应用</strong> <a class="header-anchor" href="#_5-编译时和运行时在前端框架中的应用" aria-label="Permalink to &quot;5. **编译时和运行时在前端框架中的应用**&quot;">​</a></h3><ul><li><p><strong>React（JSX 转换）</strong>：React 使用 JSX 编写组件时，编译时会将 JSX 转换为 JavaScript 代码。例如：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello, world!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译时：JSX 转换为 JavaScript</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// const element = React.createElement(&#39;h1&#39;, null, &#39;Hello, world!&#39;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在 <strong>运行时</strong>，React 负责通过虚拟 DOM 和实际 DOM 进行比对和更新。</p></li><li><p><strong>Vue（模板编译）</strong>：Vue 在开发阶段将模板编译成 JavaScript 渲染函数。Vue 的模板语法和响应式系统都在运行时处理。在 Vue 中，<strong>编译时</strong>是指将模板转换为渲染函数，<strong>运行时</strong>是指渲染函数在浏览器中执行，更新视图和响应用户交互。</p></li><li><p><strong>Angular（AOT 编译）</strong>：Angular 在 <strong>编译时</strong> 使用 AOT（Ahead-of-Time）编译将模板和组件转化为高效的 JavaScript 代码，以提升应用性能。它会在构建过程中完成所有模板和组件的编译。</p></li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li><strong>编译时</strong>：在开发过程中，主要是构建、打包、转译、优化代码，确保代码结构和类型正确。编译时的错误通常是静态的，如类型错误、语法错误等。</li><li><strong>运行时</strong>：在浏览器中执行代码的阶段，涉及用户交互、事件处理、DOM 操作和网络请求等，运行时错误通常是动态的，发生在程序实际执行时。</li></ul>`,29))])}const m=t(o,[["render",d]]);export{y as __pageData,m as default};
